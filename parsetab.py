
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND COMMA COMMENT DIVIDE ELSE EQUALS EQUALS_EQUALS FALSE GREATER_THAN GREATER_THAN_EQUAL ID IF LEFT_BRACE LEFT_PAREN LESS_THAN LESS_THAN_EQUAL MINUS NOT NUMBER OR PLUS PRINTF RIGHT_BRACE RIGHT_PAREN SEMICOLON STRING TIMES TRUE WHILEstart : ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACEprogram : ID EQUALS expr SEMICOLON program\n                     | ID EQUALS function_call SEMICOLON program\n                     | function_call SEMICOLON program\n                     | expr program\n                     | lambda\n                     function_call : ID LEFT_PAREN args RIGHT_PARENparameters : ID\n                      | parameters COMMA IDargs : expr\n                | args COMMA exprterm : term TIMES factor\n                | term DIVIDE factorterm : factorfactor : NUMBER\n            | ID\n            | LEFT_PAREN expr RIGHT_PARENexpr : termexpr : expr PLUS term\n                | expr MINUS termexpr : expr EQUALS_EQUALS expr\n                | expr LESS_THAN expr\n                | expr LESS_THAN_EQUAL expr\n                | expr GREATER_THAN expr\n                | expr GREATER_THAN_EQUAL exprexpr : expr AND expr\n                | expr OR expr\n                | NOT exprexpr : LEFT_PAREN expr RIGHT_PARENexpr : IDexpr : NUMBERexpr : STRINGexpr : TRUEexpr : FALSEexpr : IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACEexpr : IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACEexpr : WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE expr : PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLONlambda :'
    
_lr_action_items = {'ID':([0,3,7,8,10,11,13,16,17,18,19,20,21,25,26,27,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,73,75,83,84,85,86,89,90,92,94,],[2,4,9,10,-16,29,10,-18,29,-15,-32,-33,-34,-14,48,29,-16,56,56,29,29,29,29,29,29,29,10,56,56,-28,29,29,29,-17,-19,-15,-16,29,-20,-21,-22,-23,-24,-25,-26,-27,-12,-13,10,10,29,-17,10,10,-38,-35,-37,10,-36,]),'$end':([1,30,],[0,-1,]),'LEFT_PAREN':([2,8,10,11,13,16,17,18,19,20,21,22,23,24,25,26,27,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,73,75,83,84,85,86,89,90,92,94,],[3,11,27,11,11,-18,11,-15,-32,-33,-34,45,46,47,-14,11,11,-16,57,57,11,11,11,11,11,11,11,11,57,57,-28,11,11,11,27,-17,-19,-15,-16,11,-20,-21,-22,-23,-24,-25,-26,-27,-12,-13,11,11,11,-17,11,11,-38,-35,-37,11,-36,]),'RIGHT_PAREN':([4,5,9,16,18,19,20,21,25,28,29,44,51,52,53,54,55,56,58,59,60,61,62,63,64,65,67,68,69,70,71,76,82,83,86,89,90,94,],[-8,6,-9,-18,-15,-32,-33,-34,-14,53,-16,-28,74,-10,-17,-19,-15,-16,-20,-21,-22,-23,-24,-25,-26,-27,-12,-13,77,78,79,83,-11,-17,-38,-35,-37,-36,]),'COMMA':([4,5,9,16,18,19,20,21,25,29,44,51,52,53,54,55,56,58,59,60,61,62,63,64,65,67,68,82,83,86,89,90,94,],[-8,7,-9,-18,-15,-32,-33,-34,-14,-16,-28,75,-10,-17,-19,-15,-16,-20,-21,-22,-23,-24,-25,-26,-27,-12,-13,-11,-17,-38,-35,-37,-36,]),'LEFT_BRACE':([6,77,78,91,],[8,84,85,92,]),'NOT':([8,10,11,13,16,17,18,19,20,21,25,26,27,29,34,35,36,37,38,39,40,41,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,73,75,83,84,85,86,89,90,92,94,],[17,-16,17,17,-18,17,-15,-32,-33,-34,-14,17,17,-16,17,17,17,17,17,17,17,17,-28,17,17,17,-17,-19,-15,-16,17,-20,-21,-22,-23,-24,-25,-26,-27,-12,-13,17,17,17,-17,17,17,-38,-35,-37,17,-36,]),'NUMBER':([8,10,11,13,16,17,18,19,20,21,25,26,27,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,73,75,83,84,85,86,89,90,92,94,],[18,-16,18,18,-18,18,-15,-32,-33,-34,-14,18,18,-16,55,55,18,18,18,18,18,18,18,18,55,55,-28,18,18,18,-17,-19,-15,-16,18,-20,-21,-22,-23,-24,-25,-26,-27,-12,-13,18,18,18,-17,18,18,-38,-35,-37,18,-36,]),'STRING':([8,10,11,13,16,17,18,19,20,21,25,26,27,29,34,35,36,37,38,39,40,41,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,73,75,83,84,85,86,89,90,92,94,],[19,-16,19,19,-18,19,-15,-32,-33,-34,-14,19,19,-16,19,19,19,19,19,19,19,19,-28,19,19,19,-17,-19,-15,-16,19,-20,-21,-22,-23,-24,-25,-26,-27,-12,-13,19,19,19,-17,19,19,-38,-35,-37,19,-36,]),'TRUE':([8,10,11,13,16,17,18,19,20,21,25,26,27,29,34,35,36,37,38,39,40,41,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,73,75,83,84,85,86,89,90,92,94,],[20,-16,20,20,-18,20,-15,-32,-33,-34,-14,20,20,-16,20,20,20,20,20,20,20,20,-28,20,20,20,-17,-19,-15,-16,20,-20,-21,-22,-23,-24,-25,-26,-27,-12,-13,20,20,20,-17,20,20,-38,-35,-37,20,-36,]),'FALSE':([8,10,11,13,16,17,18,19,20,21,25,26,27,29,34,35,36,37,38,39,40,41,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,73,75,83,84,85,86,89,90,92,94,],[21,-16,21,21,-18,21,-15,-32,-33,-34,-14,21,21,-16,21,21,21,21,21,21,21,21,-28,21,21,21,-17,-19,-15,-16,21,-20,-21,-22,-23,-24,-25,-26,-27,-12,-13,21,21,21,-17,21,21,-38,-35,-37,21,-36,]),'IF':([8,10,11,13,16,17,18,19,20,21,25,26,27,29,34,35,36,37,38,39,40,41,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,73,75,83,84,85,86,89,90,92,94,],[22,-16,22,22,-18,22,-15,-32,-33,-34,-14,22,22,-16,22,22,22,22,22,22,22,22,-28,22,22,22,-17,-19,-15,-16,22,-20,-21,-22,-23,-24,-25,-26,-27,-12,-13,22,22,22,-17,22,22,-38,-35,-37,22,-36,]),'WHILE':([8,10,11,13,16,17,18,19,20,21,25,26,27,29,34,35,36,37,38,39,40,41,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,73,75,83,84,85,86,89,90,92,94,],[23,-16,23,23,-18,23,-15,-32,-33,-34,-14,23,23,-16,23,23,23,23,23,23,23,23,-28,23,23,23,-17,-19,-15,-16,23,-20,-21,-22,-23,-24,-25,-26,-27,-12,-13,23,23,23,-17,23,23,-38,-35,-37,23,-36,]),'PRINTF':([8,10,11,13,16,17,18,19,20,21,25,26,27,29,34,35,36,37,38,39,40,41,44,45,46,47,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,73,75,83,84,85,86,89,90,92,94,],[24,-16,24,24,-18,24,-15,-32,-33,-34,-14,24,24,-16,24,24,24,24,24,24,24,24,-28,24,24,24,-17,-19,-15,-16,24,-20,-21,-22,-23,-24,-25,-26,-27,-12,-13,24,24,24,-17,24,24,-38,-35,-37,24,-36,]),'RIGHT_BRACE':([8,10,12,13,15,16,18,19,20,21,25,29,31,41,44,53,54,55,56,58,59,60,61,62,63,64,65,66,67,68,72,73,80,81,83,84,85,86,87,88,89,90,92,93,94,],[-39,-16,30,-39,-6,-18,-15,-32,-33,-34,-14,-16,-5,-39,-28,-17,-19,-15,-16,-20,-21,-22,-23,-24,-25,-26,-27,-4,-12,-13,-39,-39,-2,-3,-17,-39,-39,-38,89,90,-35,-37,-39,94,-36,]),'EQUALS':([10,],[26,]),'PLUS':([10,13,16,18,19,20,21,25,28,29,44,48,49,52,53,54,55,56,58,59,60,61,62,63,64,65,67,68,69,70,71,76,82,83,86,89,90,94,],[-16,32,-18,-15,-32,-33,-34,-14,32,-16,32,-16,32,32,-17,-19,-15,-16,-20,32,32,32,32,32,32,32,-12,-13,32,32,32,32,32,-17,-38,-35,-37,-36,]),'MINUS':([10,13,16,18,19,20,21,25,28,29,44,48,49,52,53,54,55,56,58,59,60,61,62,63,64,65,67,68,69,70,71,76,82,83,86,89,90,94,],[-16,33,-18,-15,-32,-33,-34,-14,33,-16,33,-16,33,33,-17,-19,-15,-16,-20,33,33,33,33,33,33,33,-12,-13,33,33,33,33,33,-17,-38,-35,-37,-36,]),'EQUALS_EQUALS':([10,13,16,18,19,20,21,25,28,29,44,48,49,52,53,54,55,56,58,59,60,61,62,63,64,65,67,68,69,70,71,76,82,83,86,89,90,94,],[-16,34,-18,-15,-32,-33,-34,-14,34,-16,34,-16,34,34,-17,-19,-15,-16,-20,34,34,34,34,34,34,34,-12,-13,34,34,34,34,34,-17,-38,-35,-37,-36,]),'LESS_THAN':([10,13,16,18,19,20,21,25,28,29,44,48,49,52,53,54,55,56,58,59,60,61,62,63,64,65,67,68,69,70,71,76,82,83,86,89,90,94,],[-16,35,-18,-15,-32,-33,-34,-14,35,-16,35,-16,35,35,-17,-19,-15,-16,-20,35,35,35,35,35,35,35,-12,-13,35,35,35,35,35,-17,-38,-35,-37,-36,]),'LESS_THAN_EQUAL':([10,13,16,18,19,20,21,25,28,29,44,48,49,52,53,54,55,56,58,59,60,61,62,63,64,65,67,68,69,70,71,76,82,83,86,89,90,94,],[-16,36,-18,-15,-32,-33,-34,-14,36,-16,36,-16,36,36,-17,-19,-15,-16,-20,36,36,36,36,36,36,36,-12,-13,36,36,36,36,36,-17,-38,-35,-37,-36,]),'GREATER_THAN':([10,13,16,18,19,20,21,25,28,29,44,48,49,52,53,54,55,56,58,59,60,61,62,63,64,65,67,68,69,70,71,76,82,83,86,89,90,94,],[-16,37,-18,-15,-32,-33,-34,-14,37,-16,37,-16,37,37,-17,-19,-15,-16,-20,37,37,37,37,37,37,37,-12,-13,37,37,37,37,37,-17,-38,-35,-37,-36,]),'GREATER_THAN_EQUAL':([10,13,16,18,19,20,21,25,28,29,44,48,49,52,53,54,55,56,58,59,60,61,62,63,64,65,67,68,69,70,71,76,82,83,86,89,90,94,],[-16,38,-18,-15,-32,-33,-34,-14,38,-16,38,-16,38,38,-17,-19,-15,-16,-20,38,38,38,38,38,38,38,-12,-13,38,38,38,38,38,-17,-38,-35,-37,-36,]),'AND':([10,13,16,18,19,20,21,25,28,29,44,48,49,52,53,54,55,56,58,59,60,61,62,63,64,65,67,68,69,70,71,76,82,83,86,89,90,94,],[-16,39,-18,-15,-32,-33,-34,-14,39,-16,39,-16,39,39,-17,-19,-15,-16,-20,39,39,39,39,39,39,39,-12,-13,39,39,39,39,39,-17,-38,-35,-37,-36,]),'OR':([10,13,16,18,19,20,21,25,28,29,44,48,49,52,53,54,55,56,58,59,60,61,62,63,64,65,67,68,69,70,71,76,82,83,86,89,90,94,],[-16,40,-18,-15,-32,-33,-34,-14,40,-16,40,-16,40,40,-17,-19,-15,-16,-20,40,40,40,40,40,40,40,-12,-13,40,40,40,40,40,-17,-38,-35,-37,-36,]),'TIMES':([10,16,18,25,29,48,53,54,55,56,58,67,68,83,],[-16,42,-15,-14,-16,-16,-17,42,-15,-16,42,-12,-13,-17,]),'DIVIDE':([10,16,18,25,29,48,53,54,55,56,58,67,68,83,],[-16,43,-15,-14,-16,-16,-17,43,-15,-16,43,-12,-13,-17,]),'SEMICOLON':([14,16,18,19,20,21,25,29,44,48,49,50,53,54,55,56,58,59,60,61,62,63,64,65,67,68,74,79,83,86,89,90,94,],[41,-18,-15,-32,-33,-34,-14,-16,-28,-16,72,73,-17,-19,-15,-16,-20,-21,-22,-23,-24,-25,-26,-27,-12,-13,-7,86,-17,-38,-35,-37,-36,]),'ELSE':([89,],[91,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'parameters':([3,],[5,]),'program':([8,13,41,72,73,84,85,92,],[12,31,66,80,81,87,88,93,]),'expr':([8,11,13,17,26,27,34,35,36,37,38,39,40,41,45,46,47,57,72,73,75,84,85,92,],[13,28,13,44,49,52,59,60,61,62,63,64,65,13,69,70,71,76,13,13,82,13,13,13,]),'function_call':([8,13,26,41,72,73,84,85,92,],[14,14,50,14,14,14,14,14,14,]),'lambda':([8,13,41,72,73,84,85,92,],[15,15,15,15,15,15,15,15,]),'term':([8,11,13,17,26,27,32,33,34,35,36,37,38,39,40,41,45,46,47,57,72,73,75,84,85,92,],[16,16,16,16,16,16,54,58,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'factor':([8,11,13,17,26,27,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,57,72,73,75,84,85,92,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,67,68,25,25,25,25,25,25,25,25,25,25,]),'args':([27,],[51,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE','start',7,'p_start','sintatico.py',18),
  ('program -> ID EQUALS expr SEMICOLON program','program',5,'p_program','sintatico.py',29),
  ('program -> ID EQUALS function_call SEMICOLON program','program',5,'p_program','sintatico.py',30),
  ('program -> function_call SEMICOLON program','program',3,'p_program','sintatico.py',31),
  ('program -> expr program','program',2,'p_program','sintatico.py',32),
  ('program -> lambda','program',1,'p_program','sintatico.py',33),
  ('function_call -> ID LEFT_PAREN args RIGHT_PAREN','function_call',4,'p_function_call','sintatico.py',62),
  ('parameters -> ID','parameters',1,'p_parameters','sintatico.py',66),
  ('parameters -> parameters COMMA ID','parameters',3,'p_parameters','sintatico.py',67),
  ('args -> expr','args',1,'p_args','sintatico.py',75),
  ('args -> args COMMA expr','args',3,'p_args','sintatico.py',76),
  ('term -> term TIMES factor','term',3,'p_term_op','sintatico.py',83),
  ('term -> term DIVIDE factor','term',3,'p_term_op','sintatico.py',84),
  ('term -> factor','term',1,'p_term_factor','sintatico.py',91),
  ('factor -> NUMBER','factor',1,'p_factor_num','sintatico.py',95),
  ('factor -> ID','factor',1,'p_factor_num','sintatico.py',96),
  ('factor -> LEFT_PAREN expr RIGHT_PAREN','factor',3,'p_factor_num','sintatico.py',97),
  ('expr -> term','expr',1,'p_expr_term','sintatico.py',104),
  ('expr -> expr PLUS term','expr',3,'p_expr_op','sintatico.py',108),
  ('expr -> expr MINUS term','expr',3,'p_expr_op','sintatico.py',109),
  ('expr -> expr EQUALS_EQUALS expr','expr',3,'p_expr_relational','sintatico.py',117),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr_relational','sintatico.py',118),
  ('expr -> expr LESS_THAN_EQUAL expr','expr',3,'p_expr_relational','sintatico.py',119),
  ('expr -> expr GREATER_THAN expr','expr',3,'p_expr_relational','sintatico.py',120),
  ('expr -> expr GREATER_THAN_EQUAL expr','expr',3,'p_expr_relational','sintatico.py',121),
  ('expr -> expr AND expr','expr',3,'p_expr_logical','sintatico.py',125),
  ('expr -> expr OR expr','expr',3,'p_expr_logical','sintatico.py',126),
  ('expr -> NOT expr','expr',2,'p_expr_logical','sintatico.py',127),
  ('expr -> LEFT_PAREN expr RIGHT_PAREN','expr',3,'p_expr_group','sintatico.py',136),
  ('expr -> ID','expr',1,'p_expr_id','sintatico.py',140),
  ('expr -> NUMBER','expr',1,'p_expr_num','sintatico.py',144),
  ('expr -> STRING','expr',1,'p_expr_string','sintatico.py',156),
  ('expr -> TRUE','expr',1,'p_expr_true','sintatico.py',160),
  ('expr -> FALSE','expr',1,'p_expr_false','sintatico.py',164),
  ('expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE','expr',7,'p_expr_if','sintatico.py',170),
  ('expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE','expr',11,'p_expr_if_else','sintatico.py',174),
  ('expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE','expr',7,'p_expr_while','sintatico.py',178),
  ('expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON','expr',5,'p_expr_printf','sintatico.py',182),
  ('lambda -> <empty>','lambda',0,'p_lambda','sintatico.py',187),
]
