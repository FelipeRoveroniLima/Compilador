Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FALSE
    LEFT_BRACKET
    RIGHT_BRACKET
    TRUE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> ID EQUALS expr SEMICOLON
Rule 2     statement -> expr
Rule 3     statement -> ID EQUALS expr SEMICOLON statement
Rule 4     statement -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
Rule 5     parameters -> ID
Rule 6     parameters -> parameters COMMA ID
Rule 7     statement -> ID LEFT_PAREN args RIGHT_PAREN SEMICOLON
Rule 8     args -> expr
Rule 9     args -> args COMMA expr
Rule 10    expr -> expr PLUS expr
Rule 11    expr -> expr MINUS expr
Rule 12    expr -> expr TIMES expr
Rule 13    expr -> expr DIVIDE expr
Rule 14    expr -> expr LESS_THAN expr
Rule 15    expr -> expr LESS_THAN_EQUAL expr
Rule 16    expr -> expr GREATER_THAN expr
Rule 17    expr -> expr GREATER_THAN_EQUAL expr
Rule 18    expr -> expr AND expr
Rule 19    expr -> expr OR expr
Rule 20    expr -> NOT expr
Rule 21    expr -> LEFT_PAREN expr RIGHT_PAREN
Rule 22    expr -> ID
Rule 23    expr -> NUMBER
Rule 24    expr -> STRING
Rule 25    expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
Rule 26    expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE ELSE LEFT_BRACE statement RIGHT_BRACE
Rule 27    expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
Rule 28    expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
Rule 29    p_expr_call -> ID ( p_arglist_opt )

Terminals, with rules where they appear

(                    : 29
)                    : 29
AND                  : 18
COMMA                : 6 9
DIVIDE               : 13
ELSE                 : 26
EQUALS               : 1 3
FALSE                : 
GREATER_THAN         : 16
GREATER_THAN_EQUAL   : 17
ID                   : 1 3 4 5 6 7 22 29
IF                   : 25 26
LEFT_BRACE           : 4 25 26 26 27
LEFT_BRACKET         : 
LEFT_PAREN           : 4 7 21 25 26 27 28
LESS_THAN            : 14
LESS_THAN_EQUAL      : 15
MINUS                : 11
NOT                  : 20
NUMBER               : 23
OR                   : 19
PLUS                 : 10
PRINTF               : 28
RIGHT_BRACE          : 4 25 26 26 27
RIGHT_BRACKET        : 
RIGHT_PAREN          : 4 7 21 25 26 27 28
SEMICOLON            : 1 3 7 28
STRING               : 24
TIMES                : 12
TRUE                 : 
WHILE                : 27
error                : 

Nonterminals, with rules where they appear

args                 : 7 9
expr                 : 1 2 3 8 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 21 25 26 27 28
p_arglist_opt        : 29
p_expr_call          : 
parameters           : 4 6
statement            : 3 4 25 26 26 27 0

rogram
    (4) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (5) program -> . ID LEFT_PAREN args RIGHT_PAREN SEMICOLON
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    ID              shift and go to state 2
    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    program                        shift and go to state 1
    expr                           shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> ID . EQUALS expr SEMICOLON
    (3) program -> ID . EQUALS expr SEMICOLON program
    (4) program -> ID . LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (5) program -> ID . LEFT_PAREN args RIGHT_PAREN SEMICOLON
    (22) expr -> ID .

    EQUALS          shift and go to state 11
    LEFT_PAREN      shift and go to state 12
    PLUS            reduce using rule 22 (expr -> ID .)
    MINUS           reduce using rule 22 (expr -> ID .)
    TIMES           reduce using rule 22 (expr -> ID .)
    DIVIDE          reduce using rule 22 (expr -> ID .)
    LESS_THAN       reduce using rule 22 (expr -> ID .)
    LESS_THAN_EQUAL reduce using rule 22 (expr -> ID .)
    GREATER_THAN    reduce using rule 22 (expr -> ID .)
    GREATER_THAN_EQUAL reduce using rule 22 (expr -> ID .)
    AND             reduce using rule 22 (expr -> ID .)
    OR              reduce using rule 22 (expr -> ID .)
    $end            reduce using rule 22 (expr -> ID .)
    RIGHT_BRACE     reduce using rule 22 (expr -> ID .)


state 3

    (2) program -> expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

    $end            reduce using rule 2 (program -> expr .)
    RIGHT_BRACE     reduce using rule 2 (program -> expr .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22


state 4

    (21) expr -> LEFT_PAREN . expr RIGHT_PAREN
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 23

state 5

    (20) expr -> NOT . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 25

state 6

    (23) expr -> NUMBER .

    PLUS            reduce using rule 23 (expr -> NUMBER .)
    MINUS           reduce using rule 23 (expr -> NUMBER .)
    TIMES           reduce using rule 23 (expr -> NUMBER .)
    DIVIDE          reduce using rule 23 (expr -> NUMBER .)
    LESS_THAN       reduce using rule 23 (expr -> NUMBER .)
    LESS_THAN_EQUAL reduce using rule 23 (expr -> NUMBER .)
    GREATER_THAN    reduce using rule 23 (expr -> NUMBER .)
    GREATER_THAN_EQUAL reduce using rule 23 (expr -> NUMBER .)
    AND             reduce using rule 23 (expr -> NUMBER .)
    OR              reduce using rule 23 (expr -> NUMBER .)
    $end            reduce using rule 23 (expr -> NUMBER .)
    RIGHT_PAREN     reduce using rule 23 (expr -> NUMBER .)
    SEMICOLON       reduce using rule 23 (expr -> NUMBER .)
    COMMA           reduce using rule 23 (expr -> NUMBER .)
    RIGHT_BRACE     reduce using rule 23 (expr -> NUMBER .)


state 7

    (24) expr -> STRING .

    PLUS            reduce using rule 24 (expr -> STRING .)
    MINUS           reduce using rule 24 (expr -> STRING .)
    TIMES           reduce using rule 24 (expr -> STRING .)
    DIVIDE          reduce using rule 24 (expr -> STRING .)
    LESS_THAN       reduce using rule 24 (expr -> STRING .)
    LESS_THAN_EQUAL reduce using rule 24 (expr -> STRING .)
    GREATER_THAN    reduce using rule 24 (expr -> STRING .)
    GREATER_THAN_EQUAL reduce using rule 24 (expr -> STRING .)
    AND             reduce using rule 24 (expr -> STRING .)
    OR              reduce using rule 24 (expr -> STRING .)
    $end            reduce using rule 24 (expr -> STRING .)
    RIGHT_PAREN     reduce using rule 24 (expr -> STRING .)
    SEMICOLON       reduce using rule 24 (expr -> STRING .)
    COMMA           reduce using rule 24 (expr -> STRING .)
    RIGHT_BRACE     reduce using rule 24 (expr -> STRING .)


state 8

    (25) expr -> IF . LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> IF . LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE

    LEFT_PAREN      shift and go to state 26


state 9

    (27) expr -> WHILE . LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE

    LEFT_PAREN      shift and go to state 27


state 10

    (28) expr -> PRINTF . LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 28


state 11

    (1) program -> ID EQUALS . expr SEMICOLON
    (3) program -> ID EQUALS . expr SEMICOLON program
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 29

state 12

    (4) program -> ID LEFT_PAREN . parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (5) program -> ID LEFT_PAREN . args RIGHT_PAREN SEMICOLON
    (6) parameters -> . ID
    (7) parameters -> . parameters COMMA ID
    (8) args -> . expr
    (9) args -> . args COMMA expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    ID              shift and go to state 30
    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    parameters                     shift and go to state 31
    args                           shift and go to state 32
    expr                           shift and go to state 33

state 13

    (10) expr -> expr PLUS . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 34

state 14

    (11) expr -> expr MINUS . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 35

state 15

    (12) expr -> expr TIMES . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 36

state 16

    (13) expr -> expr DIVIDE . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 37

state 17

    (14) expr -> expr LESS_THAN . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 38

state 18

    (15) expr -> expr LESS_THAN_EQUAL . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 39

state 19

    (16) expr -> expr GREATER_THAN . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 40

state 20

    (17) expr -> expr GREATER_THAN_EQUAL . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 41

state 21

    (18) expr -> expr AND . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 42

state 22

    (19) expr -> expr OR . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 43

state 23

    (21) expr -> LEFT_PAREN expr . RIGHT_PAREN
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 44
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22


state 24

    (22) expr -> ID .

    RIGHT_PAREN     reduce using rule 22 (expr -> ID .)
    PLUS            reduce using rule 22 (expr -> ID .)
    MINUS           reduce using rule 22 (expr -> ID .)
    TIMES           reduce using rule 22 (expr -> ID .)
    DIVIDE          reduce using rule 22 (expr -> ID .)
    LESS_THAN       reduce using rule 22 (expr -> ID .)
    LESS_THAN_EQUAL reduce using rule 22 (expr -> ID .)
    GREATER_THAN    reduce using rule 22 (expr -> ID .)
    GREATER_THAN_EQUAL reduce using rule 22 (expr -> ID .)
    AND             reduce using rule 22 (expr -> ID .)
    OR              reduce using rule 22 (expr -> ID .)
    $end            reduce using rule 22 (expr -> ID .)
    SEMICOLON       reduce using rule 22 (expr -> ID .)
    COMMA           reduce using rule 22 (expr -> ID .)
    RIGHT_BRACE     reduce using rule 22 (expr -> ID .)


state 25

    (20) expr -> NOT expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 20 (expr -> NOT expr .)
    RIGHT_PAREN     reduce using rule 20 (expr -> NOT expr .)
    SEMICOLON       reduce using rule 20 (expr -> NOT expr .)
    COMMA           reduce using rule 20 (expr -> NOT expr .)
    RIGHT_BRACE     reduce using rule 20 (expr -> NOT expr .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22

  ! PLUS            [ reduce using rule 20 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 20 (expr -> NOT expr .) ]
  ! TIMES           [ reduce using rule 20 (expr -> NOT expr .) ]
  ! DIVIDE          [ reduce using rule 20 (expr -> NOT expr .) ]
  ! LESS_THAN       [ reduce using rule 20 (expr -> NOT expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 20 (expr -> NOT expr .) ]
  ! GREATER_THAN    [ reduce using rule 20 (expr -> NOT expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 20 (expr -> NOT expr .) ]
  ! AND             [ reduce using rule 20 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 20 (expr -> NOT expr .) ]


state 26

    (25) expr -> IF LEFT_PAREN . expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> IF LEFT_PAREN . expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 45

state 27

    (27) expr -> WHILE LEFT_PAREN . expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 46

state 28

    (28) expr -> PRINTF LEFT_PAREN . expr RIGHT_PAREN SEMICOLON
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 47

state 29

    (1) program -> ID EQUALS expr . SEMICOLON
    (3) program -> ID EQUALS expr . SEMICOLON program
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

    SEMICOLON       shift and go to state 48
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22


state 30

    (6) parameters -> ID .
    (22) expr -> ID .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 6 (parameters -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 6 (parameters -> ID .)
    RIGHT_PAREN     reduce using rule 6 (parameters -> ID .)
    COMMA           reduce using rule 6 (parameters -> ID .)
    PLUS            reduce using rule 22 (expr -> ID .)
    MINUS           reduce using rule 22 (expr -> ID .)
    TIMES           reduce using rule 22 (expr -> ID .)
    DIVIDE          reduce using rule 22 (expr -> ID .)
    LESS_THAN       reduce using rule 22 (expr -> ID .)
    LESS_THAN_EQUAL reduce using rule 22 (expr -> ID .)
    GREATER_THAN    reduce using rule 22 (expr -> ID .)
    GREATER_THAN_EQUAL reduce using rule 22 (expr -> ID .)
    AND             reduce using rule 22 (expr -> ID .)
    OR              reduce using rule 22 (expr -> ID .)

  ! RIGHT_PAREN     [ reduce using rule 22 (expr -> ID .) ]
  ! COMMA           [ reduce using rule 22 (expr -> ID .) ]


state 31

    (4) program -> ID LEFT_PAREN parameters . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (7) parameters -> parameters . COMMA ID

    RIGHT_PAREN     shift and go to state 49
    COMMA           shift and go to state 50


state 32

    (5) program -> ID LEFT_PAREN args . RIGHT_PAREN SEMICOLON
    (9) args -> args . COMMA expr

    RIGHT_PAREN     shift and go to state 51
    COMMA           shift and go to state 52


state 33

    (8) args -> expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

    RIGHT_PAREN     reduce using rule 8 (args -> expr .)
    COMMA           reduce using rule 8 (args -> expr .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22


state 34

    (10) expr -> expr PLUS expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 10 (expr -> expr PLUS expr .)
    RIGHT_PAREN     reduce using rule 10 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 10 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 10 (expr -> expr PLUS expr .)
    RIGHT_BRACE     reduce using rule 10 (expr -> expr PLUS expr .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22

  ! PLUS            [ reduce using rule 10 (expr -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 10 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 10 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 10 (expr -> expr PLUS expr .) ]
  ! LESS_THAN       [ reduce using rule 10 (expr -> expr PLUS expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 10 (expr -> expr PLUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 10 (expr -> expr PLUS expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 10 (expr -> expr PLUS expr .) ]
  ! AND             [ reduce using rule 10 (expr -> expr PLUS expr .) ]
  ! OR              [ reduce using rule 10 (expr -> expr PLUS expr .) ]


state 35

    (11) expr -> expr MINUS expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 11 (expr -> expr MINUS expr .)
    RIGHT_PAREN     reduce using rule 11 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 11 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 11 (expr -> expr MINUS expr .)
    RIGHT_BRACE     reduce using rule 11 (expr -> expr MINUS expr .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22

  ! PLUS            [ reduce using rule 11 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 11 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 11 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 11 (expr -> expr MINUS expr .) ]
  ! LESS_THAN       [ reduce using rule 11 (expr -> expr MINUS expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 11 (expr -> expr MINUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 11 (expr -> expr MINUS expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 11 (expr -> expr MINUS expr .) ]
  ! AND             [ reduce using rule 11 (expr -> expr MINUS expr .) ]
  ! OR              [ reduce using rule 11 (expr -> expr MINUS expr .) ]


state 36

    (12) expr -> expr TIMES expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 12 (expr -> expr TIMES expr .)
    RIGHT_PAREN     reduce using rule 12 (expr -> expr TIMES expr .)
    SEMICOLON       reduce using rule 12 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 12 (expr -> expr TIMES expr .)
    RIGHT_BRACE     reduce using rule 12 (expr -> expr TIMES expr .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22

  ! PLUS            [ reduce using rule 12 (expr -> expr TIMES expr .) ]
  ! MINUS           [ reduce using rule 12 (expr -> expr TIMES expr .) ]
  ! TIMES           [ reduce using rule 12 (expr -> expr TIMES expr .) ]
  ! DIVIDE          [ reduce using rule 12 (expr -> expr TIMES expr .) ]
  ! LESS_THAN       [ reduce using rule 12 (expr -> expr TIMES expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 12 (expr -> expr TIMES expr .) ]
  ! GREATER_THAN    [ reduce using rule 12 (expr -> expr TIMES expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 12 (expr -> expr TIMES expr .) ]
  ! AND             [ reduce using rule 12 (expr -> expr TIMES expr .) ]
  ! OR              [ reduce using rule 12 (expr -> expr TIMES expr .) ]


state 37

    (13) expr -> expr DIVIDE expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 13 (expr -> expr DIVIDE expr .)
    RIGHT_PAREN     reduce using rule 13 (expr -> expr DIVIDE expr .)
    SEMICOLON       reduce using rule 13 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 13 (expr -> expr DIVIDE expr .)
    RIGHT_BRACE     reduce using rule 13 (expr -> expr DIVIDE expr .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22

  ! PLUS            [ reduce using rule 13 (expr -> expr DIVIDE expr .) ]
  ! MINUS           [ reduce using rule 13 (expr -> expr DIVIDE expr .) ]
  ! TIMES           [ reduce using rule 13 (expr -> expr DIVIDE expr .) ]
  ! DIVIDE          [ reduce using rule 13 (expr -> expr DIVIDE expr .) ]
  ! LESS_THAN       [ reduce using rule 13 (expr -> expr DIVIDE expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 13 (expr -> expr DIVIDE expr .) ]
  ! GREATER_THAN    [ reduce using rule 13 (expr -> expr DIVIDE expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 13 (expr -> expr DIVIDE expr .) ]
  ! AND             [ reduce using rule 13 (expr -> expr DIVIDE expr .) ]
  ! OR              [ reduce using rule 13 (expr -> expr DIVIDE expr .) ]


state 38

    (14) expr -> expr LESS_THAN expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 14 (expr -> expr LESS_THAN expr .)
    RIGHT_PAREN     reduce using rule 14 (expr -> expr LESS_THAN expr .)
    SEMICOLON       reduce using rule 14 (expr -> expr LESS_THAN expr .)
    COMMA           reduce using rule 14 (expr -> expr LESS_THAN expr .)
    RIGHT_BRACE     reduce using rule 14 (expr -> expr LESS_THAN expr .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22

  ! PLUS            [ reduce using rule 14 (expr -> expr LESS_THAN expr .) ]
  ! MINUS           [ reduce using rule 14 (expr -> expr LESS_THAN expr .) ]
  ! TIMES           [ reduce using rule 14 (expr -> expr LESS_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 14 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 14 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 14 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 14 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 14 (expr -> expr LESS_THAN expr .) ]
  ! AND             [ reduce using rule 14 (expr -> expr LESS_THAN expr .) ]
  ! OR              [ reduce using rule 14 (expr -> expr LESS_THAN expr .) ]


state 39

    (15) expr -> expr LESS_THAN_EQUAL expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 15 (expr -> expr LESS_THAN_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 15 (expr -> expr LESS_THAN_EQUAL expr .)
    SEMICOLON       reduce using rule 15 (expr -> expr LESS_THAN_EQUAL expr .)
    COMMA           reduce using rule 15 (expr -> expr LESS_THAN_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 15 (expr -> expr LESS_THAN_EQUAL expr .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22

  ! PLUS            [ reduce using rule 15 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 15 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 15 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 15 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 15 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 15 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 15 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 15 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! AND             [ reduce using rule 15 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! OR              [ reduce using rule 15 (expr -> expr LESS_THAN_EQUAL expr .) ]


state 40

    (16) expr -> expr GREATER_THAN expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 16 (expr -> expr GREATER_THAN expr .)
    RIGHT_PAREN     reduce using rule 16 (expr -> expr GREATER_THAN expr .)
    SEMICOLON       reduce using rule 16 (expr -> expr GREATER_THAN expr .)
    COMMA           reduce using rule 16 (expr -> expr GREATER_THAN expr .)
    RIGHT_BRACE     reduce using rule 16 (expr -> expr GREATER_THAN expr .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22

  ! PLUS            [ reduce using rule 16 (expr -> expr GREATER_THAN expr .) ]
  ! MINUS           [ reduce using rule 16 (expr -> expr GREATER_THAN expr .) ]
  ! TIMES           [ reduce using rule 16 (expr -> expr GREATER_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 16 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 16 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 16 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 16 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 16 (expr -> expr GREATER_THAN expr .) ]
  ! AND             [ reduce using rule 16 (expr -> expr GREATER_THAN expr .) ]
  ! OR              [ reduce using rule 16 (expr -> expr GREATER_THAN expr .) ]


state 41

    (17) expr -> expr GREATER_THAN_EQUAL expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 17 (expr -> expr GREATER_THAN_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 17 (expr -> expr GREATER_THAN_EQUAL expr .)
    SEMICOLON       reduce using rule 17 (expr -> expr GREATER_THAN_EQUAL expr .)
    COMMA           reduce using rule 17 (expr -> expr GREATER_THAN_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 17 (expr -> expr GREATER_THAN_EQUAL expr .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22

  ! PLUS            [ reduce using rule 17 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 17 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 17 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 17 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 17 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 17 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 17 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 17 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! AND             [ reduce using rule 17 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! OR              [ reduce using rule 17 (expr -> expr GREATER_THAN_EQUAL expr .) ]


state 42

    (18) expr -> expr AND expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 18 (expr -> expr AND expr .)
    RIGHT_PAREN     reduce using rule 18 (expr -> expr AND expr .)
    SEMICOLON       reduce using rule 18 (expr -> expr AND expr .)
    COMMA           reduce using rule 18 (expr -> expr AND expr .)
    RIGHT_BRACE     reduce using rule 18 (expr -> expr AND expr .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22

  ! PLUS            [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! LESS_THAN       [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! GREATER_THAN    [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! AND             [ reduce using rule 18 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 18 (expr -> expr AND expr .) ]


state 43

    (19) expr -> expr OR expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 19 (expr -> expr OR expr .)
    RIGHT_PAREN     reduce using rule 19 (expr -> expr OR expr .)
    SEMICOLON       reduce using rule 19 (expr -> expr OR expr .)
    COMMA           reduce using rule 19 (expr -> expr OR expr .)
    RIGHT_BRACE     reduce using rule 19 (expr -> expr OR expr .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22

  ! PLUS            [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! LESS_THAN       [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! GREATER_THAN    [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 19 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 19 (expr -> expr OR expr .) ]


state 44

    (21) expr -> LEFT_PAREN expr RIGHT_PAREN .

    PLUS            reduce using rule 21 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    MINUS           reduce using rule 21 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    TIMES           reduce using rule 21 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    DIVIDE          reduce using rule 21 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_THAN       reduce using rule 21 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_THAN_EQUAL reduce using rule 21 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 21 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 21 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    AND             reduce using rule 21 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    OR              reduce using rule 21 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    $end            reduce using rule 21 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 21 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    SEMICOLON       reduce using rule 21 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    COMMA           reduce using rule 21 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 21 (expr -> LEFT_PAREN expr RIGHT_PAREN .)


state 45

    (25) expr -> IF LEFT_PAREN expr . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> IF LEFT_PAREN expr . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 53
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22


state 46

    (27) expr -> WHILE LEFT_PAREN expr . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 54
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22


state 47

    (28) expr -> PRINTF LEFT_PAREN expr . RIGHT_PAREN SEMICOLON
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 55
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22


state 48

    (1) program -> ID EQUALS expr SEMICOLON .
    (3) program -> ID EQUALS expr SEMICOLON . program
    (1) program -> . ID EQUALS expr SEMICOLON
    (2) program -> . expr
    (3) program -> . ID EQUALS expr SEMICOLON program
    (4) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (5) program -> . ID LEFT_PAREN args RIGHT_PAREN SEMICOLON
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    $end            reduce using rule 1 (program -> ID EQUALS expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 1 (program -> ID EQUALS expr SEMICOLON .)
    ID              shift and go to state 2
    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 3
    program                        shift and go to state 56

state 49

    (4) program -> ID LEFT_PAREN parameters RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE

    LEFT_BRACE      shift and go to state 57


state 50

    (7) parameters -> parameters COMMA . ID

    ID              shift and go to state 58


state 51

    (5) program -> ID LEFT_PAREN args RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 59


state 52

    (9) args -> args COMMA . expr
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    ID              shift and go to state 24
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 60

state 53

    (25) expr -> IF LEFT_PAREN expr RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE
    (26) expr -> IF LEFT_PAREN expr RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE

    LEFT_BRACE      shift and go to state 61


state 54

    (27) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE

    LEFT_BRACE      shift and go to state 62


state 55

    (28) expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 63


state 56

    (3) program -> ID EQUALS expr SEMICOLON program .

    $end            reduce using rule 3 (program -> ID EQUALS expr SEMICOLON program .)
    RIGHT_BRACE     reduce using rule 3 (program -> ID EQUALS expr SEMICOLON program .)


state 57

    (4) program -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE
    (1) program -> . ID EQUALS expr SEMICOLON
    (2) program -> . expr
    (3) program -> . ID EQUALS expr SEMICOLON program
    (4) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (5) program -> . ID LEFT_PAREN args RIGHT_PAREN SEMICOLON
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    ID              shift and go to state 2
    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    program                        shift and go to state 64
    expr                           shift and go to state 3

state 58

    (7) parameters -> parameters COMMA ID .

    RIGHT_PAREN     reduce using rule 7 (parameters -> parameters COMMA ID .)
    COMMA           reduce using rule 7 (parameters -> parameters COMMA ID .)


state 59

    (5) program -> ID LEFT_PAREN args RIGHT_PAREN SEMICOLON .

    $end            reduce using rule 5 (program -> ID LEFT_PAREN args RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 5 (program -> ID LEFT_PAREN args RIGHT_PAREN SEMICOLON .)


state 60

    (9) args -> args COMMA expr .
    (10) expr -> expr . PLUS expr
    (11) expr -> expr . MINUS expr
    (12) expr -> expr . TIMES expr
    (13) expr -> expr . DIVIDE expr
    (14) expr -> expr . LESS_THAN expr
    (15) expr -> expr . LESS_THAN_EQUAL expr
    (16) expr -> expr . GREATER_THAN expr
    (17) expr -> expr . GREATER_THAN_EQUAL expr
    (18) expr -> expr . AND expr
    (19) expr -> expr . OR expr

    RIGHT_PAREN     reduce using rule 9 (args -> args COMMA expr .)
    COMMA           reduce using rule 9 (args -> args COMMA expr .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14
    TIMES           shift and go to state 15
    DIVIDE          shift and go to state 16
    LESS_THAN       shift and go to state 17
    LESS_THAN_EQUAL shift and go to state 18
    GREATER_THAN    shift and go to state 19
    GREATER_THAN_EQUAL shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22


state 61

    (25) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE
    (26) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (1) program -> . ID EQUALS expr SEMICOLON
    (2) program -> . expr
    (3) program -> . ID EQUALS expr SEMICOLON program
    (4) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (5) program -> . ID LEFT_PAREN args RIGHT_PAREN SEMICOLON
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    ID              shift and go to state 2
    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 3
    program                        shift and go to state 65

state 62

    (27) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE
    (1) program -> . ID EQUALS expr SEMICOLON
    (2) program -> . expr
    (3) program -> . ID EQUALS expr SEMICOLON program
    (4) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (5) program -> . ID LEFT_PAREN args RIGHT_PAREN SEMICOLON
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    ID              shift and go to state 2
    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 3
    program                        shift and go to state 66

state 63

    (28) expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .

    PLUS            reduce using rule 28 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    MINUS           reduce using rule 28 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    TIMES           reduce using rule 28 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    DIVIDE          reduce using rule 28 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    LESS_THAN       reduce using rule 28 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    LESS_THAN_EQUAL reduce using rule 28 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    GREATER_THAN    reduce using rule 28 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    GREATER_THAN_EQUAL reduce using rule 28 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    AND             reduce using rule 28 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    OR              reduce using rule 28 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 28 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    RIGHT_PAREN     reduce using rule 28 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 28 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    COMMA           reduce using rule 28 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 28 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)


state 64

    (4) program -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 67


state 65

    (25) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE
    (26) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 68


state 66

    (27) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 69


state 67

    (4) program -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .

    $end            reduce using rule 4 (program -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 4 (program -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)


state 68

    (25) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .
    (26) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE . ELSE LEFT_BRACE program RIGHT_BRACE

    PLUS            reduce using rule 25 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    MINUS           reduce using rule 25 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    TIMES           reduce using rule 25 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    DIVIDE          reduce using rule 25 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN       reduce using rule 25 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN_EQUAL reduce using rule 25 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN    reduce using rule 25 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 25 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    AND             reduce using rule 25 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    OR              reduce using rule 25 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    $end            reduce using rule 25 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 25 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    SEMICOLON       reduce using rule 25 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    COMMA           reduce using rule 25 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 25 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    ELSE            shift and go to state 70


state 69

    (27) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .

    PLUS            reduce using rule 27 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    MINUS           reduce using rule 27 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    TIMES           reduce using rule 27 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    DIVIDE          reduce using rule 27 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN       reduce using rule 27 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN_EQUAL reduce using rule 27 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN    reduce using rule 27 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 27 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    AND             reduce using rule 27 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    OR              reduce using rule 27 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    $end            reduce using rule 27 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 27 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    SEMICOLON       reduce using rule 27 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    COMMA           reduce using rule 27 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 27 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)


state 70

    (26) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE . LEFT_BRACE program RIGHT_BRACE

    LEFT_BRACE      shift and go to state 71


state 71

    (26) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE . program RIGHT_BRACE
    (1) program -> . ID EQUALS expr SEMICOLON
    (2) program -> . expr
    (3) program -> . ID EQUALS expr SEMICOLON program
    (4) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (5) program -> . ID LEFT_PAREN args RIGHT_PAREN SEMICOLON
    (10) expr -> . expr PLUS expr
    (11) expr -> . expr MINUS expr
    (12) expr -> . expr TIMES expr
    (13) expr -> . expr DIVIDE expr
    (14) expr -> . expr LESS_THAN expr
    (15) expr -> . expr LESS_THAN_EQUAL expr
    (16) expr -> . expr GREATER_THAN expr
    (17) expr -> . expr GREATER_THAN_EQUAL expr
    (18) expr -> . expr AND expr
    (19) expr -> . expr OR expr
    (20) expr -> . NOT expr
    (21) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (22) expr -> . ID
    (23) expr -> . NUMBER
    (24) expr -> . STRING
    (25) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (26) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (27) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (28) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    ID              shift and go to state 2
    NOT             shift and go to state 5
    LEFT_PAREN      shift and go to state 4
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 3
    program                        shift and go to state 72

state 72

    (26) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 73


state 73

    (26) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .

    PLUS            reduce using rule 26 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    MINUS           reduce using rule 26 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    TIMES           reduce using rule 26 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    DIVIDE          reduce using rule 26 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN       reduce using rule 26 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN_EQUAL reduce using rule 26 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN    reduce using rule 26 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 26 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    AND             reduce using rule 26 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    OR              reduce using rule 26 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    $end            reduce using rule 26 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 26 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    SEMICOLON       reduce using rule 26 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    COMMA           reduce using rule 26 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 26 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 25 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 25 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 25 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 25 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 25 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 25 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 25 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 25 resolved as shift
WARNING: shift/reduce conflict for AND in state 25 resolved as shift
WARNING: shift/reduce conflict for OR in state 25 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 34 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 34 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 34 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 34 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 34 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 34 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 34 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 34 resolved as shift
WARNING: shift/reduce conflict for AND in state 34 resolved as shift
WARNING: shift/reduce conflict for OR in state 34 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 35 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 35 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 35 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 35 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 35 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 35 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 35 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 35 resolved as shift
WARNING: shift/reduce conflict for AND in state 35 resolved as shift
WARNING: shift/reduce conflict for OR in state 35 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 36 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 36 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 36 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 36 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 36 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 36 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 36 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 36 resolved as shift
WARNING: shift/reduce conflict for AND in state 36 resolved as shift
WARNING: shift/reduce conflict for OR in state 36 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 37 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 37 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 37 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 37 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 37 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 37 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 37 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 37 resolved as shift
WARNING: shift/reduce conflict for AND in state 37 resolved as shift
WARNING: shift/reduce conflict for OR in state 37 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 38 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 38 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 38 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 38 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 38 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 38 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 38 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 38 resolved as shift
WARNING: shift/reduce conflict for AND in state 38 resolved as shift
WARNING: shift/reduce conflict for OR in state 38 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 39 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 39 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 39 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 39 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 39 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 39 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 39 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 39 resolved as shift
WARNING: shift/reduce conflict for AND in state 39 resolved as shift
WARNING: shift/reduce conflict for OR in state 39 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 40 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 40 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 40 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 40 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 40 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 40 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 40 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 40 resolved as shift
WARNING: shift/reduce conflict for AND in state 40 resolved as shift
WARNING: shift/reduce conflict for OR in state 40 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 41 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 41 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 41 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 41 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 41 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 41 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 41 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 41 resolved as shift
WARNING: shift/reduce conflict for AND in state 41 resolved as shift
WARNING: shift/reduce conflict for OR in state 41 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 42 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 42 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 42 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 42 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 42 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 42 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 42 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 42 resolved as shift
WARNING: shift/reduce conflict for AND in state 42 resolved as shift
WARNING: shift/reduce conflict for OR in state 42 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 43 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 43 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 43 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 43 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 43 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 43 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 43 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 43 resolved as shift
WARNING: shift/reduce conflict for AND in state 43 resolved as shift
WARNING: shift/reduce conflict for OR in state 43 resolved as shift
WARNING: reduce/reduce conflict in state 30 resolved using rule (parameters -> ID)
WARNING: rejected rule (expr -> ID) in state 30
