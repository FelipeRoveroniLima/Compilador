Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> start
Rule 1     start -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
Rule 2     program -> ID EQUALS expr SEMICOLON program
Rule 3     program -> ID EQUALS function_call SEMICOLON program
Rule 4     program -> function_call SEMICOLON program
Rule 5     program -> expr program
Rule 6     program -> lambda
Rule 7     function_call -> ID LEFT_PAREN args RIGHT_PAREN
Rule 8     parameters -> ID
Rule 9     parameters -> parameters COMMA ID
Rule 10    expr -> expr PLUS term
Rule 11    expr -> expr MINUS term
Rule 12    expr -> term
Rule 13    term -> term TIMES factor
Rule 14    term -> term DIVIDE factor
Rule 15    term -> factor
Rule 16    factor -> NUMBER
Rule 17    factor -> ID
Rule 18    factor -> LEFT_PAREN expr RIGHT_PAREN
Rule 19    args -> expr
Rule 20    args -> args COMMA expr
Rule 21    expr -> expr PLUS expr
Rule 22    expr -> expr MINUS expr
Rule 23    expr -> expr TIMES expr
Rule 24    expr -> expr DIVIDE expr
Rule 25    expr -> expr EQUALS_EQUALS expr
Rule 26    expr -> expr LESS_THAN expr
Rule 27    expr -> expr LESS_THAN_EQUAL expr
Rule 28    expr -> expr GREATER_THAN expr
Rule 29    expr -> expr GREATER_THAN_EQUAL expr
Rule 30    expr -> expr AND expr
Rule 31    expr -> expr OR expr
Rule 32    expr -> NOT expr
Rule 33    expr -> LEFT_PAREN expr RIGHT_PAREN
Rule 34    expr -> ID
Rule 35    expr -> NUMBER
Rule 36    expr -> STRING
Rule 37    expr -> TRUE
Rule 38    expr -> FALSE
Rule 39    expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
Rule 40    expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
Rule 41    expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
Rule 42    expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
Rule 43    lambda -> <empty>

Terminals, with rules where they appear

AND                  : 30
COMMA                : 9 20
COMMENT              : 
DIVIDE               : 14 24
ELSE                 : 40
EQUALS               : 2 3
EQUALS_EQUALS        : 25
FALSE                : 38
GREATER_THAN         : 28
GREATER_THAN_EQUAL   : 29
ID                   : 1 2 3 7 8 9 17 34
IF                   : 39 40
LEFT_BRACE           : 1 39 40 40 41
LEFT_PAREN           : 1 7 18 33 39 40 41 42
LESS_THAN            : 26
LESS_THAN_EQUAL      : 27
MINUS                : 11 22
NOT                  : 32
NUMBER               : 16 35
OR                   : 31
PLUS                 : 10 21
PRINTF               : 42
RIGHT_BRACE          : 1 39 40 40 41
RIGHT_PAREN          : 1 7 18 33 39 40 41 42
SEMICOLON            : 2 3 4 42
STRING               : 36
TIMES                : 13 23
TRUE                 : 37
WHILE                : 41
error                : 

Nonterminals, with rules where they appear

args                 : 7 20
expr                 : 2 5 10 11 18 19 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 33 39 40 41 42
factor               : 13 14 15
function_call        : 3 4
lambda               : 6
parameters           : 1 9
program              : 1 1 2 3 4 5 39 40 40 41
start                : 0
term                 : 10 11 12 13 14

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program

    ID              shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> ID . LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program

    LEFT_PAREN      shift and go to state 3


state 3

    (1) start -> ID LEFT_PAREN . parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
    (8) parameters -> . ID
    (9) parameters -> . parameters COMMA ID

    ID              shift and go to state 4

    parameters                     shift and go to state 5

state 4

    (8) parameters -> ID .

    RIGHT_PAREN     reduce using rule 8 (parameters -> ID .)
    COMMA           reduce using rule 8 (parameters -> ID .)


state 5

    (1) start -> ID LEFT_PAREN parameters . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
    (9) parameters -> parameters . COMMA ID

    RIGHT_PAREN     shift and go to state 6
    COMMA           shift and go to state 7


state 6

    (1) start -> ID LEFT_PAREN parameters RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE program

    LEFT_BRACE      shift and go to state 8


state 7

    (9) parameters -> parameters COMMA . ID

    ID              shift and go to state 9


state 8

    (1) start -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE program
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (43) lambda -> .
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    ID              shift and go to state 10
    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24
    RIGHT_BRACE     reduce using rule 43 (lambda -> .)

    program                        shift and go to state 12
    expr                           shift and go to state 13
    function_call                  shift and go to state 14
    lambda                         shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 9

    (9) parameters -> parameters COMMA ID .

    RIGHT_PAREN     reduce using rule 9 (parameters -> parameters COMMA ID .)
    COMMA           reduce using rule 9 (parameters -> parameters COMMA ID .)


state 10

    (2) program -> ID . EQUALS expr SEMICOLON program
    (3) program -> ID . EQUALS function_call SEMICOLON program
    (7) function_call -> ID . LEFT_PAREN args RIGHT_PAREN
    (34) expr -> ID .
    (17) factor -> ID .

  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! reduce/reduce conflict for TIMES resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for LESS_THAN_EQUAL resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for GREATER_THAN_EQUAL resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for NOT resolved using rule 17 (factor -> ID .)
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! reduce/reduce conflict for NUMBER resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for STRING resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for TRUE resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for FALSE resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for PRINTF resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 17 (factor -> ID .)
    EQUALS          shift and go to state 26
    LEFT_PAREN      shift and go to state 27
    TIMES           reduce using rule 17 (factor -> ID .)
    DIVIDE          reduce using rule 17 (factor -> ID .)
    PLUS            reduce using rule 17 (factor -> ID .)
    MINUS           reduce using rule 17 (factor -> ID .)
    EQUALS_EQUALS   reduce using rule 17 (factor -> ID .)
    LESS_THAN       reduce using rule 17 (factor -> ID .)
    LESS_THAN_EQUAL reduce using rule 17 (factor -> ID .)
    GREATER_THAN    reduce using rule 17 (factor -> ID .)
    GREATER_THAN_EQUAL reduce using rule 17 (factor -> ID .)
    AND             reduce using rule 17 (factor -> ID .)
    OR              reduce using rule 17 (factor -> ID .)
    ID              reduce using rule 17 (factor -> ID .)
    NOT             reduce using rule 17 (factor -> ID .)
    NUMBER          reduce using rule 17 (factor -> ID .)
    STRING          reduce using rule 17 (factor -> ID .)
    TRUE            reduce using rule 17 (factor -> ID .)
    FALSE           reduce using rule 17 (factor -> ID .)
    IF              reduce using rule 17 (factor -> ID .)
    WHILE           reduce using rule 17 (factor -> ID .)
    PRINTF          reduce using rule 17 (factor -> ID .)
    RIGHT_BRACE     reduce using rule 17 (factor -> ID .)
    $end            reduce using rule 17 (factor -> ID .)

  ! PLUS            [ reduce using rule 34 (expr -> ID .) ]
  ! MINUS           [ reduce using rule 34 (expr -> ID .) ]
  ! TIMES           [ reduce using rule 34 (expr -> ID .) ]
  ! DIVIDE          [ reduce using rule 34 (expr -> ID .) ]
  ! EQUALS_EQUALS   [ reduce using rule 34 (expr -> ID .) ]
  ! LESS_THAN       [ reduce using rule 34 (expr -> ID .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 34 (expr -> ID .) ]
  ! GREATER_THAN    [ reduce using rule 34 (expr -> ID .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 34 (expr -> ID .) ]
  ! AND             [ reduce using rule 34 (expr -> ID .) ]
  ! OR              [ reduce using rule 34 (expr -> ID .) ]
  ! ID              [ reduce using rule 34 (expr -> ID .) ]
  ! NOT             [ reduce using rule 34 (expr -> ID .) ]
  ! LEFT_PAREN      [ reduce using rule 34 (expr -> ID .) ]
  ! NUMBER          [ reduce using rule 34 (expr -> ID .) ]
  ! STRING          [ reduce using rule 34 (expr -> ID .) ]
  ! TRUE            [ reduce using rule 34 (expr -> ID .) ]
  ! FALSE           [ reduce using rule 34 (expr -> ID .) ]
  ! IF              [ reduce using rule 34 (expr -> ID .) ]
  ! WHILE           [ reduce using rule 34 (expr -> ID .) ]
  ! PRINTF          [ reduce using rule 34 (expr -> ID .) ]
  ! RIGHT_BRACE     [ reduce using rule 34 (expr -> ID .) ]
  ! $end            [ reduce using rule 34 (expr -> ID .) ]
  ! LEFT_PAREN      [ reduce using rule 17 (factor -> ID .) ]


state 11

    (33) expr -> LEFT_PAREN . expr RIGHT_PAREN
    (18) factor -> LEFT_PAREN . expr RIGHT_PAREN
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 28
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 12

    (1) start -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE program

    RIGHT_BRACE     shift and go to state 30


state 13

    (5) program -> expr . program
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (43) lambda -> .
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    ID              shift and go to state 10
    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24
    RIGHT_BRACE     reduce using rule 43 (lambda -> .)
    $end            reduce using rule 43 (lambda -> .)

    expr                           shift and go to state 13
    program                        shift and go to state 31
    term                           shift and go to state 16
    function_call                  shift and go to state 14
    lambda                         shift and go to state 15
    factor                         shift and go to state 25

state 14

    (4) program -> function_call . SEMICOLON program

    SEMICOLON       shift and go to state 43


state 15

    (6) program -> lambda .

    RIGHT_BRACE     reduce using rule 6 (program -> lambda .)
    $end            reduce using rule 6 (program -> lambda .)


state 16

    (12) expr -> term .
    (13) term -> term . TIMES factor
    (14) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 12 (expr -> term .)
    MINUS           reduce using rule 12 (expr -> term .)
    EQUALS_EQUALS   reduce using rule 12 (expr -> term .)
    LESS_THAN       reduce using rule 12 (expr -> term .)
    LESS_THAN_EQUAL reduce using rule 12 (expr -> term .)
    GREATER_THAN    reduce using rule 12 (expr -> term .)
    GREATER_THAN_EQUAL reduce using rule 12 (expr -> term .)
    AND             reduce using rule 12 (expr -> term .)
    OR              reduce using rule 12 (expr -> term .)
    ID              reduce using rule 12 (expr -> term .)
    NOT             reduce using rule 12 (expr -> term .)
    LEFT_PAREN      reduce using rule 12 (expr -> term .)
    NUMBER          reduce using rule 12 (expr -> term .)
    STRING          reduce using rule 12 (expr -> term .)
    TRUE            reduce using rule 12 (expr -> term .)
    FALSE           reduce using rule 12 (expr -> term .)
    IF              reduce using rule 12 (expr -> term .)
    WHILE           reduce using rule 12 (expr -> term .)
    PRINTF          reduce using rule 12 (expr -> term .)
    RIGHT_BRACE     reduce using rule 12 (expr -> term .)
    RIGHT_PAREN     reduce using rule 12 (expr -> term .)
    $end            reduce using rule 12 (expr -> term .)
    SEMICOLON       reduce using rule 12 (expr -> term .)
    COMMA           reduce using rule 12 (expr -> term .)
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45

  ! TIMES           [ reduce using rule 12 (expr -> term .) ]
  ! DIVIDE          [ reduce using rule 12 (expr -> term .) ]


state 17

    (32) expr -> NOT . expr
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 46
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 18

    (35) expr -> NUMBER .
    (16) factor -> NUMBER .

  ! reduce/reduce conflict for TIMES resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for PLUS resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for LESS_THAN_EQUAL resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for GREATER_THAN_EQUAL resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for AND resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for OR resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for ID resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for NOT resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for NUMBER resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for STRING resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for TRUE resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for FALSE resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for WHILE resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for PRINTF resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 16 (factor -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 16 (factor -> NUMBER .)
    TIMES           reduce using rule 16 (factor -> NUMBER .)
    DIVIDE          reduce using rule 16 (factor -> NUMBER .)
    PLUS            reduce using rule 16 (factor -> NUMBER .)
    MINUS           reduce using rule 16 (factor -> NUMBER .)
    EQUALS_EQUALS   reduce using rule 16 (factor -> NUMBER .)
    LESS_THAN       reduce using rule 16 (factor -> NUMBER .)
    LESS_THAN_EQUAL reduce using rule 16 (factor -> NUMBER .)
    GREATER_THAN    reduce using rule 16 (factor -> NUMBER .)
    GREATER_THAN_EQUAL reduce using rule 16 (factor -> NUMBER .)
    AND             reduce using rule 16 (factor -> NUMBER .)
    OR              reduce using rule 16 (factor -> NUMBER .)
    ID              reduce using rule 16 (factor -> NUMBER .)
    NOT             reduce using rule 16 (factor -> NUMBER .)
    LEFT_PAREN      reduce using rule 16 (factor -> NUMBER .)
    NUMBER          reduce using rule 16 (factor -> NUMBER .)
    STRING          reduce using rule 16 (factor -> NUMBER .)
    TRUE            reduce using rule 16 (factor -> NUMBER .)
    FALSE           reduce using rule 16 (factor -> NUMBER .)
    IF              reduce using rule 16 (factor -> NUMBER .)
    WHILE           reduce using rule 16 (factor -> NUMBER .)
    PRINTF          reduce using rule 16 (factor -> NUMBER .)
    RIGHT_BRACE     reduce using rule 16 (factor -> NUMBER .)
    RIGHT_PAREN     reduce using rule 16 (factor -> NUMBER .)
    $end            reduce using rule 16 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 16 (factor -> NUMBER .)
    COMMA           reduce using rule 16 (factor -> NUMBER .)

  ! PLUS            [ reduce using rule 35 (expr -> NUMBER .) ]
  ! MINUS           [ reduce using rule 35 (expr -> NUMBER .) ]
  ! TIMES           [ reduce using rule 35 (expr -> NUMBER .) ]
  ! DIVIDE          [ reduce using rule 35 (expr -> NUMBER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 35 (expr -> NUMBER .) ]
  ! LESS_THAN       [ reduce using rule 35 (expr -> NUMBER .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 35 (expr -> NUMBER .) ]
  ! GREATER_THAN    [ reduce using rule 35 (expr -> NUMBER .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 35 (expr -> NUMBER .) ]
  ! AND             [ reduce using rule 35 (expr -> NUMBER .) ]
  ! OR              [ reduce using rule 35 (expr -> NUMBER .) ]
  ! ID              [ reduce using rule 35 (expr -> NUMBER .) ]
  ! NOT             [ reduce using rule 35 (expr -> NUMBER .) ]
  ! LEFT_PAREN      [ reduce using rule 35 (expr -> NUMBER .) ]
  ! NUMBER          [ reduce using rule 35 (expr -> NUMBER .) ]
  ! STRING          [ reduce using rule 35 (expr -> NUMBER .) ]
  ! TRUE            [ reduce using rule 35 (expr -> NUMBER .) ]
  ! FALSE           [ reduce using rule 35 (expr -> NUMBER .) ]
  ! IF              [ reduce using rule 35 (expr -> NUMBER .) ]
  ! WHILE           [ reduce using rule 35 (expr -> NUMBER .) ]
  ! PRINTF          [ reduce using rule 35 (expr -> NUMBER .) ]
  ! RIGHT_BRACE     [ reduce using rule 35 (expr -> NUMBER .) ]
  ! RIGHT_PAREN     [ reduce using rule 35 (expr -> NUMBER .) ]
  ! $end            [ reduce using rule 35 (expr -> NUMBER .) ]
  ! SEMICOLON       [ reduce using rule 35 (expr -> NUMBER .) ]
  ! COMMA           [ reduce using rule 35 (expr -> NUMBER .) ]


state 19

    (36) expr -> STRING .

    PLUS            reduce using rule 36 (expr -> STRING .)
    MINUS           reduce using rule 36 (expr -> STRING .)
    TIMES           reduce using rule 36 (expr -> STRING .)
    DIVIDE          reduce using rule 36 (expr -> STRING .)
    EQUALS_EQUALS   reduce using rule 36 (expr -> STRING .)
    LESS_THAN       reduce using rule 36 (expr -> STRING .)
    LESS_THAN_EQUAL reduce using rule 36 (expr -> STRING .)
    GREATER_THAN    reduce using rule 36 (expr -> STRING .)
    GREATER_THAN_EQUAL reduce using rule 36 (expr -> STRING .)
    AND             reduce using rule 36 (expr -> STRING .)
    OR              reduce using rule 36 (expr -> STRING .)
    ID              reduce using rule 36 (expr -> STRING .)
    NOT             reduce using rule 36 (expr -> STRING .)
    LEFT_PAREN      reduce using rule 36 (expr -> STRING .)
    NUMBER          reduce using rule 36 (expr -> STRING .)
    STRING          reduce using rule 36 (expr -> STRING .)
    TRUE            reduce using rule 36 (expr -> STRING .)
    FALSE           reduce using rule 36 (expr -> STRING .)
    IF              reduce using rule 36 (expr -> STRING .)
    WHILE           reduce using rule 36 (expr -> STRING .)
    PRINTF          reduce using rule 36 (expr -> STRING .)
    RIGHT_BRACE     reduce using rule 36 (expr -> STRING .)
    RIGHT_PAREN     reduce using rule 36 (expr -> STRING .)
    $end            reduce using rule 36 (expr -> STRING .)
    SEMICOLON       reduce using rule 36 (expr -> STRING .)
    COMMA           reduce using rule 36 (expr -> STRING .)


state 20

    (37) expr -> TRUE .

    PLUS            reduce using rule 37 (expr -> TRUE .)
    MINUS           reduce using rule 37 (expr -> TRUE .)
    TIMES           reduce using rule 37 (expr -> TRUE .)
    DIVIDE          reduce using rule 37 (expr -> TRUE .)
    EQUALS_EQUALS   reduce using rule 37 (expr -> TRUE .)
    LESS_THAN       reduce using rule 37 (expr -> TRUE .)
    LESS_THAN_EQUAL reduce using rule 37 (expr -> TRUE .)
    GREATER_THAN    reduce using rule 37 (expr -> TRUE .)
    GREATER_THAN_EQUAL reduce using rule 37 (expr -> TRUE .)
    AND             reduce using rule 37 (expr -> TRUE .)
    OR              reduce using rule 37 (expr -> TRUE .)
    ID              reduce using rule 37 (expr -> TRUE .)
    NOT             reduce using rule 37 (expr -> TRUE .)
    LEFT_PAREN      reduce using rule 37 (expr -> TRUE .)
    NUMBER          reduce using rule 37 (expr -> TRUE .)
    STRING          reduce using rule 37 (expr -> TRUE .)
    TRUE            reduce using rule 37 (expr -> TRUE .)
    FALSE           reduce using rule 37 (expr -> TRUE .)
    IF              reduce using rule 37 (expr -> TRUE .)
    WHILE           reduce using rule 37 (expr -> TRUE .)
    PRINTF          reduce using rule 37 (expr -> TRUE .)
    RIGHT_BRACE     reduce using rule 37 (expr -> TRUE .)
    RIGHT_PAREN     reduce using rule 37 (expr -> TRUE .)
    $end            reduce using rule 37 (expr -> TRUE .)
    SEMICOLON       reduce using rule 37 (expr -> TRUE .)
    COMMA           reduce using rule 37 (expr -> TRUE .)


state 21

    (38) expr -> FALSE .

    PLUS            reduce using rule 38 (expr -> FALSE .)
    MINUS           reduce using rule 38 (expr -> FALSE .)
    TIMES           reduce using rule 38 (expr -> FALSE .)
    DIVIDE          reduce using rule 38 (expr -> FALSE .)
    EQUALS_EQUALS   reduce using rule 38 (expr -> FALSE .)
    LESS_THAN       reduce using rule 38 (expr -> FALSE .)
    LESS_THAN_EQUAL reduce using rule 38 (expr -> FALSE .)
    GREATER_THAN    reduce using rule 38 (expr -> FALSE .)
    GREATER_THAN_EQUAL reduce using rule 38 (expr -> FALSE .)
    AND             reduce using rule 38 (expr -> FALSE .)
    OR              reduce using rule 38 (expr -> FALSE .)
    ID              reduce using rule 38 (expr -> FALSE .)
    NOT             reduce using rule 38 (expr -> FALSE .)
    LEFT_PAREN      reduce using rule 38 (expr -> FALSE .)
    NUMBER          reduce using rule 38 (expr -> FALSE .)
    STRING          reduce using rule 38 (expr -> FALSE .)
    TRUE            reduce using rule 38 (expr -> FALSE .)
    FALSE           reduce using rule 38 (expr -> FALSE .)
    IF              reduce using rule 38 (expr -> FALSE .)
    WHILE           reduce using rule 38 (expr -> FALSE .)
    PRINTF          reduce using rule 38 (expr -> FALSE .)
    RIGHT_BRACE     reduce using rule 38 (expr -> FALSE .)
    RIGHT_PAREN     reduce using rule 38 (expr -> FALSE .)
    $end            reduce using rule 38 (expr -> FALSE .)
    SEMICOLON       reduce using rule 38 (expr -> FALSE .)
    COMMA           reduce using rule 38 (expr -> FALSE .)


state 22

    (39) expr -> IF . LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> IF . LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE

    LEFT_PAREN      shift and go to state 47


state 23

    (41) expr -> WHILE . LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE

    LEFT_PAREN      shift and go to state 48


state 24

    (42) expr -> PRINTF . LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 49


state 25

    (15) term -> factor .

    TIMES           reduce using rule 15 (term -> factor .)
    DIVIDE          reduce using rule 15 (term -> factor .)
    PLUS            reduce using rule 15 (term -> factor .)
    MINUS           reduce using rule 15 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 15 (term -> factor .)
    LESS_THAN       reduce using rule 15 (term -> factor .)
    LESS_THAN_EQUAL reduce using rule 15 (term -> factor .)
    GREATER_THAN    reduce using rule 15 (term -> factor .)
    GREATER_THAN_EQUAL reduce using rule 15 (term -> factor .)
    AND             reduce using rule 15 (term -> factor .)
    OR              reduce using rule 15 (term -> factor .)
    ID              reduce using rule 15 (term -> factor .)
    NOT             reduce using rule 15 (term -> factor .)
    LEFT_PAREN      reduce using rule 15 (term -> factor .)
    NUMBER          reduce using rule 15 (term -> factor .)
    STRING          reduce using rule 15 (term -> factor .)
    TRUE            reduce using rule 15 (term -> factor .)
    FALSE           reduce using rule 15 (term -> factor .)
    IF              reduce using rule 15 (term -> factor .)
    WHILE           reduce using rule 15 (term -> factor .)
    PRINTF          reduce using rule 15 (term -> factor .)
    RIGHT_BRACE     reduce using rule 15 (term -> factor .)
    RIGHT_PAREN     reduce using rule 15 (term -> factor .)
    $end            reduce using rule 15 (term -> factor .)
    SEMICOLON       reduce using rule 15 (term -> factor .)
    COMMA           reduce using rule 15 (term -> factor .)


state 26

    (2) program -> ID EQUALS . expr SEMICOLON program
    (3) program -> ID EQUALS . function_call SEMICOLON program
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 50
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 51
    function_call                  shift and go to state 52
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 27

    (7) function_call -> ID LEFT_PAREN . args RIGHT_PAREN
    (19) args -> . expr
    (20) args -> . args COMMA expr
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    args                           shift and go to state 53
    expr                           shift and go to state 54
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 28

    (33) expr -> LEFT_PAREN expr . RIGHT_PAREN
    (18) factor -> LEFT_PAREN expr . RIGHT_PAREN
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 55
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42


state 29

    (34) expr -> ID .
    (17) factor -> ID .

  ! reduce/reduce conflict for TIMES resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for LESS_THAN_EQUAL resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for GREATER_THAN_EQUAL resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for NOT resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for NUMBER resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for STRING resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for TRUE resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for FALSE resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for PRINTF resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 17 (factor -> ID .)
    TIMES           reduce using rule 17 (factor -> ID .)
    DIVIDE          reduce using rule 17 (factor -> ID .)
    RIGHT_PAREN     reduce using rule 17 (factor -> ID .)
    PLUS            reduce using rule 17 (factor -> ID .)
    MINUS           reduce using rule 17 (factor -> ID .)
    EQUALS_EQUALS   reduce using rule 17 (factor -> ID .)
    LESS_THAN       reduce using rule 17 (factor -> ID .)
    LESS_THAN_EQUAL reduce using rule 17 (factor -> ID .)
    GREATER_THAN    reduce using rule 17 (factor -> ID .)
    GREATER_THAN_EQUAL reduce using rule 17 (factor -> ID .)
    AND             reduce using rule 17 (factor -> ID .)
    OR              reduce using rule 17 (factor -> ID .)
    ID              reduce using rule 17 (factor -> ID .)
    NOT             reduce using rule 17 (factor -> ID .)
    LEFT_PAREN      reduce using rule 17 (factor -> ID .)
    NUMBER          reduce using rule 17 (factor -> ID .)
    STRING          reduce using rule 17 (factor -> ID .)
    TRUE            reduce using rule 17 (factor -> ID .)
    FALSE           reduce using rule 17 (factor -> ID .)
    IF              reduce using rule 17 (factor -> ID .)
    WHILE           reduce using rule 17 (factor -> ID .)
    PRINTF          reduce using rule 17 (factor -> ID .)
    RIGHT_BRACE     reduce using rule 17 (factor -> ID .)
    $end            reduce using rule 17 (factor -> ID .)
    SEMICOLON       reduce using rule 17 (factor -> ID .)
    COMMA           reduce using rule 17 (factor -> ID .)

  ! RIGHT_PAREN     [ reduce using rule 34 (expr -> ID .) ]
  ! PLUS            [ reduce using rule 34 (expr -> ID .) ]
  ! MINUS           [ reduce using rule 34 (expr -> ID .) ]
  ! TIMES           [ reduce using rule 34 (expr -> ID .) ]
  ! DIVIDE          [ reduce using rule 34 (expr -> ID .) ]
  ! EQUALS_EQUALS   [ reduce using rule 34 (expr -> ID .) ]
  ! LESS_THAN       [ reduce using rule 34 (expr -> ID .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 34 (expr -> ID .) ]
  ! GREATER_THAN    [ reduce using rule 34 (expr -> ID .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 34 (expr -> ID .) ]
  ! AND             [ reduce using rule 34 (expr -> ID .) ]
  ! OR              [ reduce using rule 34 (expr -> ID .) ]
  ! ID              [ reduce using rule 34 (expr -> ID .) ]
  ! NOT             [ reduce using rule 34 (expr -> ID .) ]
  ! LEFT_PAREN      [ reduce using rule 34 (expr -> ID .) ]
  ! NUMBER          [ reduce using rule 34 (expr -> ID .) ]
  ! STRING          [ reduce using rule 34 (expr -> ID .) ]
  ! TRUE            [ reduce using rule 34 (expr -> ID .) ]
  ! FALSE           [ reduce using rule 34 (expr -> ID .) ]
  ! IF              [ reduce using rule 34 (expr -> ID .) ]
  ! WHILE           [ reduce using rule 34 (expr -> ID .) ]
  ! PRINTF          [ reduce using rule 34 (expr -> ID .) ]
  ! RIGHT_BRACE     [ reduce using rule 34 (expr -> ID .) ]
  ! $end            [ reduce using rule 34 (expr -> ID .) ]
  ! SEMICOLON       [ reduce using rule 34 (expr -> ID .) ]
  ! COMMA           [ reduce using rule 34 (expr -> ID .) ]


state 30

    (1) start -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE . program
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (43) lambda -> .
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    ID              shift and go to state 10
    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24
    $end            reduce using rule 43 (lambda -> .)

    program                        shift and go to state 56
    expr                           shift and go to state 13
    function_call                  shift and go to state 14
    lambda                         shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 31

    (5) program -> expr program .

    RIGHT_BRACE     reduce using rule 5 (program -> expr program .)
    $end            reduce using rule 5 (program -> expr program .)


state 32

    (10) expr -> expr PLUS . term
    (21) expr -> expr PLUS . expr
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 57
    term                           shift and go to state 58
    factor                         shift and go to state 25

state 33

    (11) expr -> expr MINUS . term
    (22) expr -> expr MINUS . expr
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 25

state 34

    (23) expr -> expr TIMES . expr
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 61
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 35

    (24) expr -> expr DIVIDE . expr
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 62
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 36

    (25) expr -> expr EQUALS_EQUALS . expr
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 63
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 37

    (26) expr -> expr LESS_THAN . expr
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 64
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 38

    (27) expr -> expr LESS_THAN_EQUAL . expr
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 65
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 39

    (28) expr -> expr GREATER_THAN . expr
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 66
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 40

    (29) expr -> expr GREATER_THAN_EQUAL . expr
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 67
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 41

    (30) expr -> expr AND . expr
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 68
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 42

    (31) expr -> expr OR . expr
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 69
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 43

    (4) program -> function_call SEMICOLON . program
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (43) lambda -> .
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    ID              shift and go to state 10
    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24
    RIGHT_BRACE     reduce using rule 43 (lambda -> .)
    $end            reduce using rule 43 (lambda -> .)

    function_call                  shift and go to state 14
    program                        shift and go to state 70
    expr                           shift and go to state 13
    lambda                         shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 44

    (13) term -> term TIMES . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NUMBER          shift and go to state 72
    ID              shift and go to state 73
    LEFT_PAREN      shift and go to state 74

    factor                         shift and go to state 71

state 45

    (14) term -> term DIVIDE . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NUMBER          shift and go to state 72
    ID              shift and go to state 73
    LEFT_PAREN      shift and go to state 74

    factor                         shift and go to state 75

state 46

    (32) expr -> NOT expr .
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 32 (expr -> NOT expr .)
    NOT             reduce using rule 32 (expr -> NOT expr .)
    LEFT_PAREN      reduce using rule 32 (expr -> NOT expr .)
    NUMBER          reduce using rule 32 (expr -> NOT expr .)
    STRING          reduce using rule 32 (expr -> NOT expr .)
    TRUE            reduce using rule 32 (expr -> NOT expr .)
    FALSE           reduce using rule 32 (expr -> NOT expr .)
    IF              reduce using rule 32 (expr -> NOT expr .)
    WHILE           reduce using rule 32 (expr -> NOT expr .)
    PRINTF          reduce using rule 32 (expr -> NOT expr .)
    RIGHT_BRACE     reduce using rule 32 (expr -> NOT expr .)
    RIGHT_PAREN     reduce using rule 32 (expr -> NOT expr .)
    $end            reduce using rule 32 (expr -> NOT expr .)
    SEMICOLON       reduce using rule 32 (expr -> NOT expr .)
    COMMA           reduce using rule 32 (expr -> NOT expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! PLUS            [ reduce using rule 32 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 32 (expr -> NOT expr .) ]
  ! TIMES           [ reduce using rule 32 (expr -> NOT expr .) ]
  ! DIVIDE          [ reduce using rule 32 (expr -> NOT expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 32 (expr -> NOT expr .) ]
  ! LESS_THAN       [ reduce using rule 32 (expr -> NOT expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 32 (expr -> NOT expr .) ]
  ! GREATER_THAN    [ reduce using rule 32 (expr -> NOT expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 32 (expr -> NOT expr .) ]
  ! AND             [ reduce using rule 32 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 32 (expr -> NOT expr .) ]


state 47

    (39) expr -> IF LEFT_PAREN . expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> IF LEFT_PAREN . expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 76
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 48

    (41) expr -> WHILE LEFT_PAREN . expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 77
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 49

    (42) expr -> PRINTF LEFT_PAREN . expr RIGHT_PAREN SEMICOLON
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 78
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 50

    (34) expr -> ID .
    (7) function_call -> ID . LEFT_PAREN args RIGHT_PAREN
    (17) factor -> ID .

  ! reduce/reduce conflict for TIMES resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for LESS_THAN_EQUAL resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for GREATER_THAN_EQUAL resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 17 (factor -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 17 (factor -> ID .)
    LEFT_PAREN      shift and go to state 27
    TIMES           reduce using rule 17 (factor -> ID .)
    DIVIDE          reduce using rule 17 (factor -> ID .)
    SEMICOLON       reduce using rule 17 (factor -> ID .)
    PLUS            reduce using rule 17 (factor -> ID .)
    MINUS           reduce using rule 17 (factor -> ID .)
    EQUALS_EQUALS   reduce using rule 17 (factor -> ID .)
    LESS_THAN       reduce using rule 17 (factor -> ID .)
    LESS_THAN_EQUAL reduce using rule 17 (factor -> ID .)
    GREATER_THAN    reduce using rule 17 (factor -> ID .)
    GREATER_THAN_EQUAL reduce using rule 17 (factor -> ID .)
    AND             reduce using rule 17 (factor -> ID .)
    OR              reduce using rule 17 (factor -> ID .)

  ! SEMICOLON       [ reduce using rule 34 (expr -> ID .) ]
  ! PLUS            [ reduce using rule 34 (expr -> ID .) ]
  ! MINUS           [ reduce using rule 34 (expr -> ID .) ]
  ! TIMES           [ reduce using rule 34 (expr -> ID .) ]
  ! DIVIDE          [ reduce using rule 34 (expr -> ID .) ]
  ! EQUALS_EQUALS   [ reduce using rule 34 (expr -> ID .) ]
  ! LESS_THAN       [ reduce using rule 34 (expr -> ID .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 34 (expr -> ID .) ]
  ! GREATER_THAN    [ reduce using rule 34 (expr -> ID .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 34 (expr -> ID .) ]
  ! AND             [ reduce using rule 34 (expr -> ID .) ]
  ! OR              [ reduce using rule 34 (expr -> ID .) ]


state 51

    (2) program -> ID EQUALS expr . SEMICOLON program
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

    SEMICOLON       shift and go to state 79
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42


state 52

    (3) program -> ID EQUALS function_call . SEMICOLON program

    SEMICOLON       shift and go to state 80


state 53

    (7) function_call -> ID LEFT_PAREN args . RIGHT_PAREN
    (20) args -> args . COMMA expr

    RIGHT_PAREN     shift and go to state 81
    COMMA           shift and go to state 82


state 54

    (19) args -> expr .
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

    RIGHT_PAREN     reduce using rule 19 (args -> expr .)
    COMMA           reduce using rule 19 (args -> expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42


state 55

    (33) expr -> LEFT_PAREN expr RIGHT_PAREN .
    (18) factor -> LEFT_PAREN expr RIGHT_PAREN .

  ! reduce/reduce conflict for TIMES resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for PLUS resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for LESS_THAN_EQUAL resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for GREATER_THAN_EQUAL resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for AND resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for OR resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for ID resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for NOT resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for NUMBER resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for STRING resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for TRUE resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for FALSE resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for IF resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for WHILE resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for PRINTF resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for $end resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
  ! reduce/reduce conflict for COMMA resolved using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    TIMES           reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    DIVIDE          reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    PLUS            reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    MINUS           reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_THAN       reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_THAN_EQUAL reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    AND             reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    OR              reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    ID              reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    NOT             reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    NUMBER          reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    STRING          reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    TRUE            reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    FALSE           reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    IF              reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    WHILE           reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    PRINTF          reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    $end            reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    SEMICOLON       reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    COMMA           reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)

  ! PLUS            [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! MINUS           [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! TIMES           [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! DIVIDE          [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! EQUALS_EQUALS   [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! LESS_THAN       [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! GREATER_THAN    [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! AND             [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! OR              [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! ID              [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! NOT             [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! LEFT_PAREN      [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! NUMBER          [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! STRING          [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! TRUE            [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! FALSE           [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! IF              [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! WHILE           [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! PRINTF          [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! RIGHT_BRACE     [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! RIGHT_PAREN     [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! $end            [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! SEMICOLON       [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]
  ! COMMA           [ reduce using rule 33 (expr -> LEFT_PAREN expr RIGHT_PAREN .) ]


state 56

    (1) start -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program .

    $end            reduce using rule 1 (start -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program .)


state 57

    (21) expr -> expr PLUS expr .
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 21 (expr -> expr PLUS expr .)
    NOT             reduce using rule 21 (expr -> expr PLUS expr .)
    LEFT_PAREN      reduce using rule 21 (expr -> expr PLUS expr .)
    NUMBER          reduce using rule 21 (expr -> expr PLUS expr .)
    STRING          reduce using rule 21 (expr -> expr PLUS expr .)
    TRUE            reduce using rule 21 (expr -> expr PLUS expr .)
    FALSE           reduce using rule 21 (expr -> expr PLUS expr .)
    IF              reduce using rule 21 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 21 (expr -> expr PLUS expr .)
    PRINTF          reduce using rule 21 (expr -> expr PLUS expr .)
    RIGHT_BRACE     reduce using rule 21 (expr -> expr PLUS expr .)
    RIGHT_PAREN     reduce using rule 21 (expr -> expr PLUS expr .)
    $end            reduce using rule 21 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 21 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 21 (expr -> expr PLUS expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! PLUS            [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! LESS_THAN       [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! AND             [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! OR              [ reduce using rule 21 (expr -> expr PLUS expr .) ]


state 58

    (10) expr -> expr PLUS term .
    (13) term -> term . TIMES factor
    (14) term -> term . DIVIDE factor
    (12) expr -> term .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for MINUS resolved using rule 10 (expr -> expr PLUS term .)
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for LESS_THAN_EQUAL resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for GREATER_THAN_EQUAL resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for AND resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for OR resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for ID resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for NOT resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for NUMBER resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for STRING resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for TRUE resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for FALSE resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for IF resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for WHILE resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for PRINTF resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for $end resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 10 (expr -> expr PLUS term .)
  ! reduce/reduce conflict for COMMA resolved using rule 10 (expr -> expr PLUS term .)
    PLUS            reduce using rule 10 (expr -> expr PLUS term .)
    MINUS           reduce using rule 10 (expr -> expr PLUS term .)
    EQUALS_EQUALS   reduce using rule 10 (expr -> expr PLUS term .)
    LESS_THAN       reduce using rule 10 (expr -> expr PLUS term .)
    LESS_THAN_EQUAL reduce using rule 10 (expr -> expr PLUS term .)
    GREATER_THAN    reduce using rule 10 (expr -> expr PLUS term .)
    GREATER_THAN_EQUAL reduce using rule 10 (expr -> expr PLUS term .)
    AND             reduce using rule 10 (expr -> expr PLUS term .)
    OR              reduce using rule 10 (expr -> expr PLUS term .)
    ID              reduce using rule 10 (expr -> expr PLUS term .)
    NOT             reduce using rule 10 (expr -> expr PLUS term .)
    LEFT_PAREN      reduce using rule 10 (expr -> expr PLUS term .)
    NUMBER          reduce using rule 10 (expr -> expr PLUS term .)
    STRING          reduce using rule 10 (expr -> expr PLUS term .)
    TRUE            reduce using rule 10 (expr -> expr PLUS term .)
    FALSE           reduce using rule 10 (expr -> expr PLUS term .)
    IF              reduce using rule 10 (expr -> expr PLUS term .)
    WHILE           reduce using rule 10 (expr -> expr PLUS term .)
    PRINTF          reduce using rule 10 (expr -> expr PLUS term .)
    RIGHT_BRACE     reduce using rule 10 (expr -> expr PLUS term .)
    RIGHT_PAREN     reduce using rule 10 (expr -> expr PLUS term .)
    $end            reduce using rule 10 (expr -> expr PLUS term .)
    SEMICOLON       reduce using rule 10 (expr -> expr PLUS term .)
    COMMA           reduce using rule 10 (expr -> expr PLUS term .)
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45

  ! TIMES           [ reduce using rule 10 (expr -> expr PLUS term .) ]
  ! DIVIDE          [ reduce using rule 10 (expr -> expr PLUS term .) ]
  ! PLUS            [ reduce using rule 12 (expr -> term .) ]
  ! MINUS           [ reduce using rule 12 (expr -> term .) ]
  ! TIMES           [ reduce using rule 12 (expr -> term .) ]
  ! DIVIDE          [ reduce using rule 12 (expr -> term .) ]
  ! EQUALS_EQUALS   [ reduce using rule 12 (expr -> term .) ]
  ! LESS_THAN       [ reduce using rule 12 (expr -> term .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 12 (expr -> term .) ]
  ! GREATER_THAN    [ reduce using rule 12 (expr -> term .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 12 (expr -> term .) ]
  ! AND             [ reduce using rule 12 (expr -> term .) ]
  ! OR              [ reduce using rule 12 (expr -> term .) ]
  ! ID              [ reduce using rule 12 (expr -> term .) ]
  ! NOT             [ reduce using rule 12 (expr -> term .) ]
  ! LEFT_PAREN      [ reduce using rule 12 (expr -> term .) ]
  ! NUMBER          [ reduce using rule 12 (expr -> term .) ]
  ! STRING          [ reduce using rule 12 (expr -> term .) ]
  ! TRUE            [ reduce using rule 12 (expr -> term .) ]
  ! FALSE           [ reduce using rule 12 (expr -> term .) ]
  ! IF              [ reduce using rule 12 (expr -> term .) ]
  ! WHILE           [ reduce using rule 12 (expr -> term .) ]
  ! PRINTF          [ reduce using rule 12 (expr -> term .) ]
  ! RIGHT_BRACE     [ reduce using rule 12 (expr -> term .) ]
  ! RIGHT_PAREN     [ reduce using rule 12 (expr -> term .) ]
  ! $end            [ reduce using rule 12 (expr -> term .) ]
  ! SEMICOLON       [ reduce using rule 12 (expr -> term .) ]
  ! COMMA           [ reduce using rule 12 (expr -> term .) ]


state 59

    (22) expr -> expr MINUS expr .
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 22 (expr -> expr MINUS expr .)
    NOT             reduce using rule 22 (expr -> expr MINUS expr .)
    LEFT_PAREN      reduce using rule 22 (expr -> expr MINUS expr .)
    NUMBER          reduce using rule 22 (expr -> expr MINUS expr .)
    STRING          reduce using rule 22 (expr -> expr MINUS expr .)
    TRUE            reduce using rule 22 (expr -> expr MINUS expr .)
    FALSE           reduce using rule 22 (expr -> expr MINUS expr .)
    IF              reduce using rule 22 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 22 (expr -> expr MINUS expr .)
    PRINTF          reduce using rule 22 (expr -> expr MINUS expr .)
    RIGHT_BRACE     reduce using rule 22 (expr -> expr MINUS expr .)
    RIGHT_PAREN     reduce using rule 22 (expr -> expr MINUS expr .)
    $end            reduce using rule 22 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 22 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 22 (expr -> expr MINUS expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! PLUS            [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! LESS_THAN       [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! AND             [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! OR              [ reduce using rule 22 (expr -> expr MINUS expr .) ]


state 60

    (11) expr -> expr MINUS term .
    (13) term -> term . TIMES factor
    (14) term -> term . DIVIDE factor
    (12) expr -> term .

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for MINUS resolved using rule 11 (expr -> expr MINUS term .)
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for LESS_THAN_EQUAL resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for GREATER_THAN_EQUAL resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for AND resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for OR resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for ID resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for NOT resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for LEFT_PAREN resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for NUMBER resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for STRING resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for TRUE resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for FALSE resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for IF resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for WHILE resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for PRINTF resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for $end resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 11 (expr -> expr MINUS term .)
  ! reduce/reduce conflict for COMMA resolved using rule 11 (expr -> expr MINUS term .)
    PLUS            reduce using rule 11 (expr -> expr MINUS term .)
    MINUS           reduce using rule 11 (expr -> expr MINUS term .)
    EQUALS_EQUALS   reduce using rule 11 (expr -> expr MINUS term .)
    LESS_THAN       reduce using rule 11 (expr -> expr MINUS term .)
    LESS_THAN_EQUAL reduce using rule 11 (expr -> expr MINUS term .)
    GREATER_THAN    reduce using rule 11 (expr -> expr MINUS term .)
    GREATER_THAN_EQUAL reduce using rule 11 (expr -> expr MINUS term .)
    AND             reduce using rule 11 (expr -> expr MINUS term .)
    OR              reduce using rule 11 (expr -> expr MINUS term .)
    ID              reduce using rule 11 (expr -> expr MINUS term .)
    NOT             reduce using rule 11 (expr -> expr MINUS term .)
    LEFT_PAREN      reduce using rule 11 (expr -> expr MINUS term .)
    NUMBER          reduce using rule 11 (expr -> expr MINUS term .)
    STRING          reduce using rule 11 (expr -> expr MINUS term .)
    TRUE            reduce using rule 11 (expr -> expr MINUS term .)
    FALSE           reduce using rule 11 (expr -> expr MINUS term .)
    IF              reduce using rule 11 (expr -> expr MINUS term .)
    WHILE           reduce using rule 11 (expr -> expr MINUS term .)
    PRINTF          reduce using rule 11 (expr -> expr MINUS term .)
    RIGHT_BRACE     reduce using rule 11 (expr -> expr MINUS term .)
    RIGHT_PAREN     reduce using rule 11 (expr -> expr MINUS term .)
    $end            reduce using rule 11 (expr -> expr MINUS term .)
    SEMICOLON       reduce using rule 11 (expr -> expr MINUS term .)
    COMMA           reduce using rule 11 (expr -> expr MINUS term .)
    TIMES           shift and go to state 44
    DIVIDE          shift and go to state 45

  ! TIMES           [ reduce using rule 11 (expr -> expr MINUS term .) ]
  ! DIVIDE          [ reduce using rule 11 (expr -> expr MINUS term .) ]
  ! PLUS            [ reduce using rule 12 (expr -> term .) ]
  ! MINUS           [ reduce using rule 12 (expr -> term .) ]
  ! TIMES           [ reduce using rule 12 (expr -> term .) ]
  ! DIVIDE          [ reduce using rule 12 (expr -> term .) ]
  ! EQUALS_EQUALS   [ reduce using rule 12 (expr -> term .) ]
  ! LESS_THAN       [ reduce using rule 12 (expr -> term .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 12 (expr -> term .) ]
  ! GREATER_THAN    [ reduce using rule 12 (expr -> term .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 12 (expr -> term .) ]
  ! AND             [ reduce using rule 12 (expr -> term .) ]
  ! OR              [ reduce using rule 12 (expr -> term .) ]
  ! ID              [ reduce using rule 12 (expr -> term .) ]
  ! NOT             [ reduce using rule 12 (expr -> term .) ]
  ! LEFT_PAREN      [ reduce using rule 12 (expr -> term .) ]
  ! NUMBER          [ reduce using rule 12 (expr -> term .) ]
  ! STRING          [ reduce using rule 12 (expr -> term .) ]
  ! TRUE            [ reduce using rule 12 (expr -> term .) ]
  ! FALSE           [ reduce using rule 12 (expr -> term .) ]
  ! IF              [ reduce using rule 12 (expr -> term .) ]
  ! WHILE           [ reduce using rule 12 (expr -> term .) ]
  ! PRINTF          [ reduce using rule 12 (expr -> term .) ]
  ! RIGHT_BRACE     [ reduce using rule 12 (expr -> term .) ]
  ! RIGHT_PAREN     [ reduce using rule 12 (expr -> term .) ]
  ! $end            [ reduce using rule 12 (expr -> term .) ]
  ! SEMICOLON       [ reduce using rule 12 (expr -> term .) ]
  ! COMMA           [ reduce using rule 12 (expr -> term .) ]


state 61

    (23) expr -> expr TIMES expr .
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 23 (expr -> expr TIMES expr .)
    NOT             reduce using rule 23 (expr -> expr TIMES expr .)
    LEFT_PAREN      reduce using rule 23 (expr -> expr TIMES expr .)
    NUMBER          reduce using rule 23 (expr -> expr TIMES expr .)
    STRING          reduce using rule 23 (expr -> expr TIMES expr .)
    TRUE            reduce using rule 23 (expr -> expr TIMES expr .)
    FALSE           reduce using rule 23 (expr -> expr TIMES expr .)
    IF              reduce using rule 23 (expr -> expr TIMES expr .)
    WHILE           reduce using rule 23 (expr -> expr TIMES expr .)
    PRINTF          reduce using rule 23 (expr -> expr TIMES expr .)
    RIGHT_BRACE     reduce using rule 23 (expr -> expr TIMES expr .)
    RIGHT_PAREN     reduce using rule 23 (expr -> expr TIMES expr .)
    $end            reduce using rule 23 (expr -> expr TIMES expr .)
    SEMICOLON       reduce using rule 23 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 23 (expr -> expr TIMES expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! PLUS            [ reduce using rule 23 (expr -> expr TIMES expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> expr TIMES expr .) ]
  ! TIMES           [ reduce using rule 23 (expr -> expr TIMES expr .) ]
  ! DIVIDE          [ reduce using rule 23 (expr -> expr TIMES expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 23 (expr -> expr TIMES expr .) ]
  ! LESS_THAN       [ reduce using rule 23 (expr -> expr TIMES expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 23 (expr -> expr TIMES expr .) ]
  ! GREATER_THAN    [ reduce using rule 23 (expr -> expr TIMES expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 23 (expr -> expr TIMES expr .) ]
  ! AND             [ reduce using rule 23 (expr -> expr TIMES expr .) ]
  ! OR              [ reduce using rule 23 (expr -> expr TIMES expr .) ]


state 62

    (24) expr -> expr DIVIDE expr .
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 24 (expr -> expr DIVIDE expr .)
    NOT             reduce using rule 24 (expr -> expr DIVIDE expr .)
    LEFT_PAREN      reduce using rule 24 (expr -> expr DIVIDE expr .)
    NUMBER          reduce using rule 24 (expr -> expr DIVIDE expr .)
    STRING          reduce using rule 24 (expr -> expr DIVIDE expr .)
    TRUE            reduce using rule 24 (expr -> expr DIVIDE expr .)
    FALSE           reduce using rule 24 (expr -> expr DIVIDE expr .)
    IF              reduce using rule 24 (expr -> expr DIVIDE expr .)
    WHILE           reduce using rule 24 (expr -> expr DIVIDE expr .)
    PRINTF          reduce using rule 24 (expr -> expr DIVIDE expr .)
    RIGHT_BRACE     reduce using rule 24 (expr -> expr DIVIDE expr .)
    RIGHT_PAREN     reduce using rule 24 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 24 (expr -> expr DIVIDE expr .)
    SEMICOLON       reduce using rule 24 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 24 (expr -> expr DIVIDE expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! PLUS            [ reduce using rule 24 (expr -> expr DIVIDE expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr DIVIDE expr .) ]
  ! TIMES           [ reduce using rule 24 (expr -> expr DIVIDE expr .) ]
  ! DIVIDE          [ reduce using rule 24 (expr -> expr DIVIDE expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 24 (expr -> expr DIVIDE expr .) ]
  ! LESS_THAN       [ reduce using rule 24 (expr -> expr DIVIDE expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 24 (expr -> expr DIVIDE expr .) ]
  ! GREATER_THAN    [ reduce using rule 24 (expr -> expr DIVIDE expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 24 (expr -> expr DIVIDE expr .) ]
  ! AND             [ reduce using rule 24 (expr -> expr DIVIDE expr .) ]
  ! OR              [ reduce using rule 24 (expr -> expr DIVIDE expr .) ]


state 63

    (25) expr -> expr EQUALS_EQUALS expr .
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .)
    NOT             reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .)
    LEFT_PAREN      reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .)
    NUMBER          reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .)
    STRING          reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .)
    TRUE            reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .)
    FALSE           reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .)
    IF              reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .)
    WHILE           reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .)
    PRINTF          reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .)
    RIGHT_BRACE     reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .)
    RIGHT_PAREN     reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .)
    $end            reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .)
    SEMICOLON       reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .)
    COMMA           reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! PLUS            [ reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .) ]
  ! TIMES           [ reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .) ]
  ! LESS_THAN       [ reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .) ]
  ! GREATER_THAN    [ reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .) ]
  ! AND             [ reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .) ]
  ! OR              [ reduce using rule 25 (expr -> expr EQUALS_EQUALS expr .) ]


state 64

    (26) expr -> expr LESS_THAN expr .
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 26 (expr -> expr LESS_THAN expr .)
    NOT             reduce using rule 26 (expr -> expr LESS_THAN expr .)
    LEFT_PAREN      reduce using rule 26 (expr -> expr LESS_THAN expr .)
    NUMBER          reduce using rule 26 (expr -> expr LESS_THAN expr .)
    STRING          reduce using rule 26 (expr -> expr LESS_THAN expr .)
    TRUE            reduce using rule 26 (expr -> expr LESS_THAN expr .)
    FALSE           reduce using rule 26 (expr -> expr LESS_THAN expr .)
    IF              reduce using rule 26 (expr -> expr LESS_THAN expr .)
    WHILE           reduce using rule 26 (expr -> expr LESS_THAN expr .)
    PRINTF          reduce using rule 26 (expr -> expr LESS_THAN expr .)
    RIGHT_BRACE     reduce using rule 26 (expr -> expr LESS_THAN expr .)
    RIGHT_PAREN     reduce using rule 26 (expr -> expr LESS_THAN expr .)
    $end            reduce using rule 26 (expr -> expr LESS_THAN expr .)
    SEMICOLON       reduce using rule 26 (expr -> expr LESS_THAN expr .)
    COMMA           reduce using rule 26 (expr -> expr LESS_THAN expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! PLUS            [ reduce using rule 26 (expr -> expr LESS_THAN expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr LESS_THAN expr .) ]
  ! TIMES           [ reduce using rule 26 (expr -> expr LESS_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 26 (expr -> expr LESS_THAN expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 26 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 26 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 26 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 26 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 26 (expr -> expr LESS_THAN expr .) ]
  ! AND             [ reduce using rule 26 (expr -> expr LESS_THAN expr .) ]
  ! OR              [ reduce using rule 26 (expr -> expr LESS_THAN expr .) ]


state 65

    (27) expr -> expr LESS_THAN_EQUAL expr .
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .)
    NOT             reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .)
    LEFT_PAREN      reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .)
    NUMBER          reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .)
    STRING          reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .)
    TRUE            reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .)
    FALSE           reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .)
    IF              reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .)
    WHILE           reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .)
    PRINTF          reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .)
    $end            reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .)
    SEMICOLON       reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .)
    COMMA           reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! PLUS            [ reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! AND             [ reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! OR              [ reduce using rule 27 (expr -> expr LESS_THAN_EQUAL expr .) ]


state 66

    (28) expr -> expr GREATER_THAN expr .
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 28 (expr -> expr GREATER_THAN expr .)
    NOT             reduce using rule 28 (expr -> expr GREATER_THAN expr .)
    LEFT_PAREN      reduce using rule 28 (expr -> expr GREATER_THAN expr .)
    NUMBER          reduce using rule 28 (expr -> expr GREATER_THAN expr .)
    STRING          reduce using rule 28 (expr -> expr GREATER_THAN expr .)
    TRUE            reduce using rule 28 (expr -> expr GREATER_THAN expr .)
    FALSE           reduce using rule 28 (expr -> expr GREATER_THAN expr .)
    IF              reduce using rule 28 (expr -> expr GREATER_THAN expr .)
    WHILE           reduce using rule 28 (expr -> expr GREATER_THAN expr .)
    PRINTF          reduce using rule 28 (expr -> expr GREATER_THAN expr .)
    RIGHT_BRACE     reduce using rule 28 (expr -> expr GREATER_THAN expr .)
    RIGHT_PAREN     reduce using rule 28 (expr -> expr GREATER_THAN expr .)
    $end            reduce using rule 28 (expr -> expr GREATER_THAN expr .)
    SEMICOLON       reduce using rule 28 (expr -> expr GREATER_THAN expr .)
    COMMA           reduce using rule 28 (expr -> expr GREATER_THAN expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! PLUS            [ reduce using rule 28 (expr -> expr GREATER_THAN expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> expr GREATER_THAN expr .) ]
  ! TIMES           [ reduce using rule 28 (expr -> expr GREATER_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> expr GREATER_THAN expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 28 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 28 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 28 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 28 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 28 (expr -> expr GREATER_THAN expr .) ]
  ! AND             [ reduce using rule 28 (expr -> expr GREATER_THAN expr .) ]
  ! OR              [ reduce using rule 28 (expr -> expr GREATER_THAN expr .) ]


state 67

    (29) expr -> expr GREATER_THAN_EQUAL expr .
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .)
    NOT             reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .)
    LEFT_PAREN      reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .)
    NUMBER          reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .)
    STRING          reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .)
    TRUE            reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .)
    FALSE           reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .)
    IF              reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .)
    WHILE           reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .)
    PRINTF          reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .)
    $end            reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .)
    SEMICOLON       reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .)
    COMMA           reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! PLUS            [ reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! AND             [ reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! OR              [ reduce using rule 29 (expr -> expr GREATER_THAN_EQUAL expr .) ]


state 68

    (30) expr -> expr AND expr .
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 30 (expr -> expr AND expr .)
    NOT             reduce using rule 30 (expr -> expr AND expr .)
    LEFT_PAREN      reduce using rule 30 (expr -> expr AND expr .)
    NUMBER          reduce using rule 30 (expr -> expr AND expr .)
    STRING          reduce using rule 30 (expr -> expr AND expr .)
    TRUE            reduce using rule 30 (expr -> expr AND expr .)
    FALSE           reduce using rule 30 (expr -> expr AND expr .)
    IF              reduce using rule 30 (expr -> expr AND expr .)
    WHILE           reduce using rule 30 (expr -> expr AND expr .)
    PRINTF          reduce using rule 30 (expr -> expr AND expr .)
    RIGHT_BRACE     reduce using rule 30 (expr -> expr AND expr .)
    RIGHT_PAREN     reduce using rule 30 (expr -> expr AND expr .)
    $end            reduce using rule 30 (expr -> expr AND expr .)
    SEMICOLON       reduce using rule 30 (expr -> expr AND expr .)
    COMMA           reduce using rule 30 (expr -> expr AND expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! PLUS            [ reduce using rule 30 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 30 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 30 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 30 (expr -> expr AND expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 30 (expr -> expr AND expr .) ]
  ! LESS_THAN       [ reduce using rule 30 (expr -> expr AND expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 30 (expr -> expr AND expr .) ]
  ! GREATER_THAN    [ reduce using rule 30 (expr -> expr AND expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 30 (expr -> expr AND expr .) ]
  ! AND             [ reduce using rule 30 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 30 (expr -> expr AND expr .) ]


state 69

    (31) expr -> expr OR expr .
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 31 (expr -> expr OR expr .)
    NOT             reduce using rule 31 (expr -> expr OR expr .)
    LEFT_PAREN      reduce using rule 31 (expr -> expr OR expr .)
    NUMBER          reduce using rule 31 (expr -> expr OR expr .)
    STRING          reduce using rule 31 (expr -> expr OR expr .)
    TRUE            reduce using rule 31 (expr -> expr OR expr .)
    FALSE           reduce using rule 31 (expr -> expr OR expr .)
    IF              reduce using rule 31 (expr -> expr OR expr .)
    WHILE           reduce using rule 31 (expr -> expr OR expr .)
    PRINTF          reduce using rule 31 (expr -> expr OR expr .)
    RIGHT_BRACE     reduce using rule 31 (expr -> expr OR expr .)
    RIGHT_PAREN     reduce using rule 31 (expr -> expr OR expr .)
    $end            reduce using rule 31 (expr -> expr OR expr .)
    SEMICOLON       reduce using rule 31 (expr -> expr OR expr .)
    COMMA           reduce using rule 31 (expr -> expr OR expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! PLUS            [ reduce using rule 31 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 31 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 31 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 31 (expr -> expr OR expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 31 (expr -> expr OR expr .) ]
  ! LESS_THAN       [ reduce using rule 31 (expr -> expr OR expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 31 (expr -> expr OR expr .) ]
  ! GREATER_THAN    [ reduce using rule 31 (expr -> expr OR expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 31 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 31 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 31 (expr -> expr OR expr .) ]


state 70

    (4) program -> function_call SEMICOLON program .

    RIGHT_BRACE     reduce using rule 4 (program -> function_call SEMICOLON program .)
    $end            reduce using rule 4 (program -> function_call SEMICOLON program .)


state 71

    (13) term -> term TIMES factor .

    TIMES           reduce using rule 13 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 13 (term -> term TIMES factor .)
    PLUS            reduce using rule 13 (term -> term TIMES factor .)
    MINUS           reduce using rule 13 (term -> term TIMES factor .)
    EQUALS_EQUALS   reduce using rule 13 (term -> term TIMES factor .)
    LESS_THAN       reduce using rule 13 (term -> term TIMES factor .)
    LESS_THAN_EQUAL reduce using rule 13 (term -> term TIMES factor .)
    GREATER_THAN    reduce using rule 13 (term -> term TIMES factor .)
    GREATER_THAN_EQUAL reduce using rule 13 (term -> term TIMES factor .)
    AND             reduce using rule 13 (term -> term TIMES factor .)
    OR              reduce using rule 13 (term -> term TIMES factor .)
    ID              reduce using rule 13 (term -> term TIMES factor .)
    NOT             reduce using rule 13 (term -> term TIMES factor .)
    LEFT_PAREN      reduce using rule 13 (term -> term TIMES factor .)
    NUMBER          reduce using rule 13 (term -> term TIMES factor .)
    STRING          reduce using rule 13 (term -> term TIMES factor .)
    TRUE            reduce using rule 13 (term -> term TIMES factor .)
    FALSE           reduce using rule 13 (term -> term TIMES factor .)
    IF              reduce using rule 13 (term -> term TIMES factor .)
    WHILE           reduce using rule 13 (term -> term TIMES factor .)
    PRINTF          reduce using rule 13 (term -> term TIMES factor .)
    RIGHT_BRACE     reduce using rule 13 (term -> term TIMES factor .)
    RIGHT_PAREN     reduce using rule 13 (term -> term TIMES factor .)
    $end            reduce using rule 13 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 13 (term -> term TIMES factor .)
    COMMA           reduce using rule 13 (term -> term TIMES factor .)


state 72

    (16) factor -> NUMBER .

    TIMES           reduce using rule 16 (factor -> NUMBER .)
    DIVIDE          reduce using rule 16 (factor -> NUMBER .)
    PLUS            reduce using rule 16 (factor -> NUMBER .)
    MINUS           reduce using rule 16 (factor -> NUMBER .)
    EQUALS_EQUALS   reduce using rule 16 (factor -> NUMBER .)
    LESS_THAN       reduce using rule 16 (factor -> NUMBER .)
    LESS_THAN_EQUAL reduce using rule 16 (factor -> NUMBER .)
    GREATER_THAN    reduce using rule 16 (factor -> NUMBER .)
    GREATER_THAN_EQUAL reduce using rule 16 (factor -> NUMBER .)
    AND             reduce using rule 16 (factor -> NUMBER .)
    OR              reduce using rule 16 (factor -> NUMBER .)
    ID              reduce using rule 16 (factor -> NUMBER .)
    NOT             reduce using rule 16 (factor -> NUMBER .)
    LEFT_PAREN      reduce using rule 16 (factor -> NUMBER .)
    NUMBER          reduce using rule 16 (factor -> NUMBER .)
    STRING          reduce using rule 16 (factor -> NUMBER .)
    TRUE            reduce using rule 16 (factor -> NUMBER .)
    FALSE           reduce using rule 16 (factor -> NUMBER .)
    IF              reduce using rule 16 (factor -> NUMBER .)
    WHILE           reduce using rule 16 (factor -> NUMBER .)
    PRINTF          reduce using rule 16 (factor -> NUMBER .)
    RIGHT_BRACE     reduce using rule 16 (factor -> NUMBER .)
    RIGHT_PAREN     reduce using rule 16 (factor -> NUMBER .)
    $end            reduce using rule 16 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 16 (factor -> NUMBER .)
    COMMA           reduce using rule 16 (factor -> NUMBER .)


state 73

    (17) factor -> ID .

    TIMES           reduce using rule 17 (factor -> ID .)
    DIVIDE          reduce using rule 17 (factor -> ID .)
    PLUS            reduce using rule 17 (factor -> ID .)
    MINUS           reduce using rule 17 (factor -> ID .)
    EQUALS_EQUALS   reduce using rule 17 (factor -> ID .)
    LESS_THAN       reduce using rule 17 (factor -> ID .)
    LESS_THAN_EQUAL reduce using rule 17 (factor -> ID .)
    GREATER_THAN    reduce using rule 17 (factor -> ID .)
    GREATER_THAN_EQUAL reduce using rule 17 (factor -> ID .)
    AND             reduce using rule 17 (factor -> ID .)
    OR              reduce using rule 17 (factor -> ID .)
    ID              reduce using rule 17 (factor -> ID .)
    NOT             reduce using rule 17 (factor -> ID .)
    LEFT_PAREN      reduce using rule 17 (factor -> ID .)
    NUMBER          reduce using rule 17 (factor -> ID .)
    STRING          reduce using rule 17 (factor -> ID .)
    TRUE            reduce using rule 17 (factor -> ID .)
    FALSE           reduce using rule 17 (factor -> ID .)
    IF              reduce using rule 17 (factor -> ID .)
    WHILE           reduce using rule 17 (factor -> ID .)
    PRINTF          reduce using rule 17 (factor -> ID .)
    RIGHT_BRACE     reduce using rule 17 (factor -> ID .)
    RIGHT_PAREN     reduce using rule 17 (factor -> ID .)
    $end            reduce using rule 17 (factor -> ID .)
    SEMICOLON       reduce using rule 17 (factor -> ID .)
    COMMA           reduce using rule 17 (factor -> ID .)


state 74

    (18) factor -> LEFT_PAREN . expr RIGHT_PAREN
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 83
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 75

    (14) term -> term DIVIDE factor .

    TIMES           reduce using rule 14 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 14 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 14 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 14 (term -> term DIVIDE factor .)
    EQUALS_EQUALS   reduce using rule 14 (term -> term DIVIDE factor .)
    LESS_THAN       reduce using rule 14 (term -> term DIVIDE factor .)
    LESS_THAN_EQUAL reduce using rule 14 (term -> term DIVIDE factor .)
    GREATER_THAN    reduce using rule 14 (term -> term DIVIDE factor .)
    GREATER_THAN_EQUAL reduce using rule 14 (term -> term DIVIDE factor .)
    AND             reduce using rule 14 (term -> term DIVIDE factor .)
    OR              reduce using rule 14 (term -> term DIVIDE factor .)
    ID              reduce using rule 14 (term -> term DIVIDE factor .)
    NOT             reduce using rule 14 (term -> term DIVIDE factor .)
    LEFT_PAREN      reduce using rule 14 (term -> term DIVIDE factor .)
    NUMBER          reduce using rule 14 (term -> term DIVIDE factor .)
    STRING          reduce using rule 14 (term -> term DIVIDE factor .)
    TRUE            reduce using rule 14 (term -> term DIVIDE factor .)
    FALSE           reduce using rule 14 (term -> term DIVIDE factor .)
    IF              reduce using rule 14 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 14 (term -> term DIVIDE factor .)
    PRINTF          reduce using rule 14 (term -> term DIVIDE factor .)
    RIGHT_BRACE     reduce using rule 14 (term -> term DIVIDE factor .)
    RIGHT_PAREN     reduce using rule 14 (term -> term DIVIDE factor .)
    $end            reduce using rule 14 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 14 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 14 (term -> term DIVIDE factor .)


state 76

    (39) expr -> IF LEFT_PAREN expr . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> IF LEFT_PAREN expr . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 84
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42


state 77

    (41) expr -> WHILE LEFT_PAREN expr . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 85
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42


state 78

    (42) expr -> PRINTF LEFT_PAREN expr . RIGHT_PAREN SEMICOLON
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 86
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42


state 79

    (2) program -> ID EQUALS expr SEMICOLON . program
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (43) lambda -> .
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    ID              shift and go to state 10
    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24
    RIGHT_BRACE     reduce using rule 43 (lambda -> .)
    $end            reduce using rule 43 (lambda -> .)

    expr                           shift and go to state 13
    program                        shift and go to state 87
    function_call                  shift and go to state 14
    lambda                         shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 80

    (3) program -> ID EQUALS function_call SEMICOLON . program
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (43) lambda -> .
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    ID              shift and go to state 10
    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24
    RIGHT_BRACE     reduce using rule 43 (lambda -> .)
    $end            reduce using rule 43 (lambda -> .)

    function_call                  shift and go to state 14
    program                        shift and go to state 88
    expr                           shift and go to state 13
    lambda                         shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 81

    (7) function_call -> ID LEFT_PAREN args RIGHT_PAREN .

    SEMICOLON       reduce using rule 7 (function_call -> ID LEFT_PAREN args RIGHT_PAREN .)


state 82

    (20) args -> args COMMA . expr
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    ID              shift and go to state 29
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24

    expr                           shift and go to state 89
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 83

    (18) factor -> LEFT_PAREN expr . RIGHT_PAREN
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 90
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42


state 84

    (39) expr -> IF LEFT_PAREN expr RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE
    (40) expr -> IF LEFT_PAREN expr RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE

    LEFT_BRACE      shift and go to state 91


state 85

    (41) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE

    LEFT_BRACE      shift and go to state 92


state 86

    (42) expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 93


state 87

    (2) program -> ID EQUALS expr SEMICOLON program .

    RIGHT_BRACE     reduce using rule 2 (program -> ID EQUALS expr SEMICOLON program .)
    $end            reduce using rule 2 (program -> ID EQUALS expr SEMICOLON program .)


state 88

    (3) program -> ID EQUALS function_call SEMICOLON program .

    RIGHT_BRACE     reduce using rule 3 (program -> ID EQUALS function_call SEMICOLON program .)
    $end            reduce using rule 3 (program -> ID EQUALS function_call SEMICOLON program .)


state 89

    (20) args -> args COMMA expr .
    (10) expr -> expr . PLUS term
    (11) expr -> expr . MINUS term
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . TIMES expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . EQUALS_EQUALS expr
    (26) expr -> expr . LESS_THAN expr
    (27) expr -> expr . LESS_THAN_EQUAL expr
    (28) expr -> expr . GREATER_THAN expr
    (29) expr -> expr . GREATER_THAN_EQUAL expr
    (30) expr -> expr . AND expr
    (31) expr -> expr . OR expr

    RIGHT_PAREN     reduce using rule 20 (args -> args COMMA expr .)
    COMMA           reduce using rule 20 (args -> args COMMA expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    EQUALS_EQUALS   shift and go to state 36
    LESS_THAN       shift and go to state 37
    LESS_THAN_EQUAL shift and go to state 38
    GREATER_THAN    shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42


state 90

    (18) factor -> LEFT_PAREN expr RIGHT_PAREN .

    TIMES           reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    DIVIDE          reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    PLUS            reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    MINUS           reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_THAN       reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_THAN_EQUAL reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    AND             reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    OR              reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    ID              reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    NOT             reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    NUMBER          reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    STRING          reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    TRUE            reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    FALSE           reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    IF              reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    WHILE           reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    PRINTF          reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    $end            reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    SEMICOLON       reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    COMMA           reduce using rule 18 (factor -> LEFT_PAREN expr RIGHT_PAREN .)


state 91

    (39) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE
    (40) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (43) lambda -> .
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    ID              shift and go to state 10
    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24
    RIGHT_BRACE     reduce using rule 43 (lambda -> .)

    expr                           shift and go to state 13
    program                        shift and go to state 94
    function_call                  shift and go to state 14
    lambda                         shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 92

    (41) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (43) lambda -> .
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    ID              shift and go to state 10
    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24
    RIGHT_BRACE     reduce using rule 43 (lambda -> .)

    expr                           shift and go to state 13
    program                        shift and go to state 95
    function_call                  shift and go to state 14
    lambda                         shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 93

    (42) expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .

    PLUS            reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    MINUS           reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    TIMES           reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    DIVIDE          reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    EQUALS_EQUALS   reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    LESS_THAN       reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    LESS_THAN_EQUAL reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    GREATER_THAN    reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    GREATER_THAN_EQUAL reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    AND             reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    OR              reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    ID              reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    NOT             reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    LEFT_PAREN      reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    NUMBER          reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    STRING          reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    TRUE            reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    FALSE           reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    PRINTF          reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    RIGHT_PAREN     reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    COMMA           reduce using rule 42 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)


state 94

    (39) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE
    (40) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 96


state 95

    (41) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 97


state 96

    (39) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .
    (40) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE . ELSE LEFT_BRACE program RIGHT_BRACE

    PLUS            reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    MINUS           reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    TIMES           reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    DIVIDE          reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    EQUALS_EQUALS   reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN       reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN_EQUAL reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN    reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    AND             reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    OR              reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    ID              reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    NOT             reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    NUMBER          reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    STRING          reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    TRUE            reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    FALSE           reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    IF              reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    WHILE           reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    PRINTF          reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    $end            reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    SEMICOLON       reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    COMMA           reduce using rule 39 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    ELSE            shift and go to state 98


state 97

    (41) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .

    PLUS            reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    MINUS           reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    TIMES           reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    DIVIDE          reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    EQUALS_EQUALS   reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN       reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN_EQUAL reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN    reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    AND             reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    OR              reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    ID              reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    NOT             reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    NUMBER          reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    STRING          reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    TRUE            reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    FALSE           reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    IF              reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    WHILE           reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    PRINTF          reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    $end            reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    SEMICOLON       reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    COMMA           reduce using rule 41 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)


state 98

    (40) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE . LEFT_BRACE program RIGHT_BRACE

    LEFT_BRACE      shift and go to state 99


state 99

    (40) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE . program RIGHT_BRACE
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (10) expr -> . expr PLUS term
    (11) expr -> . expr MINUS term
    (12) expr -> . term
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr TIMES expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr EQUALS_EQUALS expr
    (26) expr -> . expr LESS_THAN expr
    (27) expr -> . expr LESS_THAN_EQUAL expr
    (28) expr -> . expr GREATER_THAN expr
    (29) expr -> . expr GREATER_THAN_EQUAL expr
    (30) expr -> . expr AND expr
    (31) expr -> . expr OR expr
    (32) expr -> . NOT expr
    (33) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (34) expr -> . ID
    (35) expr -> . NUMBER
    (36) expr -> . STRING
    (37) expr -> . TRUE
    (38) expr -> . FALSE
    (39) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (40) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (41) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (42) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (43) lambda -> .
    (13) term -> . term TIMES factor
    (14) term -> . term DIVIDE factor
    (15) term -> . factor
    (16) factor -> . NUMBER
    (17) factor -> . ID
    (18) factor -> . LEFT_PAREN expr RIGHT_PAREN

    ID              shift and go to state 10
    NOT             shift and go to state 17
    LEFT_PAREN      shift and go to state 11
    NUMBER          shift and go to state 18
    STRING          shift and go to state 19
    TRUE            shift and go to state 20
    FALSE           shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    PRINTF          shift and go to state 24
    RIGHT_BRACE     reduce using rule 43 (lambda -> .)

    expr                           shift and go to state 13
    program                        shift and go to state 100
    function_call                  shift and go to state 14
    lambda                         shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 25

state 100

    (40) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 101


state 101

    (40) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .

    PLUS            reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    MINUS           reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    TIMES           reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    DIVIDE          reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    EQUALS_EQUALS   reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN       reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN_EQUAL reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN    reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    AND             reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    OR              reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    ID              reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    NOT             reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    NUMBER          reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    STRING          reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    TRUE            reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    FALSE           reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    IF              reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    WHILE           reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    PRINTF          reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    $end            reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    SEMICOLON       reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    COMMA           reduce using rule 40 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFT_PAREN in state 10 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 10 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 16 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 16 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 46 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 46 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 46 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 46 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 46 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 46 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 46 resolved as shift
WARNING: shift/reduce conflict for AND in state 46 resolved as shift
WARNING: shift/reduce conflict for OR in state 46 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 57 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 57 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 57 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 57 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 57 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 57 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 57 resolved as shift
WARNING: shift/reduce conflict for AND in state 57 resolved as shift
WARNING: shift/reduce conflict for OR in state 57 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 58 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 58 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 58 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 58 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 59 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 59 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 59 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 59 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for AND in state 59 resolved as shift
WARNING: shift/reduce conflict for OR in state 59 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 60 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 60 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 60 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 60 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 61 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 61 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 61 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 61 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 61 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 61 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 61 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 61 resolved as shift
WARNING: shift/reduce conflict for AND in state 61 resolved as shift
WARNING: shift/reduce conflict for OR in state 61 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 62 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 62 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 62 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 62 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 62 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for AND in state 62 resolved as shift
WARNING: shift/reduce conflict for OR in state 62 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 63 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 63 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 63 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 63 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 63 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 63 resolved as shift
WARNING: shift/reduce conflict for AND in state 63 resolved as shift
WARNING: shift/reduce conflict for OR in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 64 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 64 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 64 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 64 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 64 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for AND in state 64 resolved as shift
WARNING: shift/reduce conflict for OR in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 65 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 65 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 65 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 65 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 65 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for AND in state 65 resolved as shift
WARNING: shift/reduce conflict for OR in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 66 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 66 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 66 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 66 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 66 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 67 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 67 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 67 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 67 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 68 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 68 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for AND in state 68 resolved as shift
WARNING: shift/reduce conflict for OR in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 69 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 69 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for AND in state 69 resolved as shift
WARNING: shift/reduce conflict for OR in state 69 resolved as shift
WARNING: reduce/reduce conflict in state 10 resolved using rule (factor -> ID)
WARNING: rejected rule (expr -> ID) in state 10
WARNING: reduce/reduce conflict in state 18 resolved using rule (factor -> NUMBER)
WARNING: rejected rule (expr -> NUMBER) in state 18
WARNING: reduce/reduce conflict in state 29 resolved using rule (factor -> ID)
WARNING: rejected rule (expr -> ID) in state 29
WARNING: reduce/reduce conflict in state 50 resolved using rule (factor -> ID)
WARNING: rejected rule (expr -> ID) in state 50
WARNING: reduce/reduce conflict in state 55 resolved using rule (factor -> LEFT_PAREN expr RIGHT_PAREN)
WARNING: rejected rule (expr -> LEFT_PAREN expr RIGHT_PAREN) in state 55
WARNING: reduce/reduce conflict in state 58 resolved using rule (expr -> expr PLUS term)
WARNING: rejected rule (expr -> term) in state 58
WARNING: reduce/reduce conflict in state 60 resolved using rule (expr -> expr MINUS term)
WARNING: rejected rule (expr -> term) in state 60
WARNING: Rule (expr -> ID) is never reduced
WARNING: Rule (expr -> NUMBER) is never reduced
WARNING: Rule (expr -> LEFT_PAREN expr RIGHT_PAREN) is never reduced
