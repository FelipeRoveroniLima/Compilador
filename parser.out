Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMA
    ELSE
    FALSE
    LEFT_BRACKET
    RIGHT_BRACKET
    TRUE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> ID EQUALS expr SEMICOLON
Rule 2     statement -> expr
Rule 3     statement -> ID EQUALS expr SEMICOLON statement
Rule 4     expr -> expr PLUS expr
Rule 5     expr -> expr MINUS expr
Rule 6     expr -> expr TIMES expr
Rule 7     expr -> expr DIVIDE expr
Rule 8     expr -> expr LESS_THAN expr
Rule 9     expr -> expr LESS_THAN_EQUAL expr
Rule 10    expr -> expr GREATER_THAN expr
Rule 11    expr -> expr GREATER_THAN_EQUAL expr
Rule 12    expr -> expr AND expr
Rule 13    expr -> expr OR expr
Rule 14    expr -> NOT expr
Rule 15    expr -> LEFT_PAREN expr RIGHT_PAREN
Rule 16    expr -> ID
Rule 17    expr -> NUMBER
Rule 18    expr -> STRING
Rule 19    expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
Rule 20    expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
Rule 21    expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

Terminals, with rules where they appear

AND                  : 12
COMMA                : 
DIVIDE               : 7
ELSE                 : 
EQUALS               : 1 3
FALSE                : 
GREATER_THAN         : 10
GREATER_THAN_EQUAL   : 11
ID                   : 1 3 16
IF                   : 19
LEFT_BRACE           : 19 20
LEFT_BRACKET         : 
LEFT_PAREN           : 15 19 20 21
LESS_THAN            : 8
LESS_THAN_EQUAL      : 9
MINUS                : 5
NOT                  : 14
NUMBER               : 17
OR                   : 13
PLUS                 : 4
PRINTF               : 21
RIGHT_BRACE          : 19 20
RIGHT_BRACKET        : 
RIGHT_PAREN          : 15 19 20 21
SEMICOLON            : 1 3 21
STRING               : 18
TIMES                : 6
TRUE                 : 
WHILE                : 20
error                : 

Nonterminals, with rules where they appear

expr                 : 1 2 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 15 19 20 21
statement            : 3 19 20 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . ID EQUALS expr SEMICOLON
    (2) statement -> . expr
    (3) statement -> . ID EQUALS expr SEMICOLON statement
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    ID              shift and go to state 2
    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    statement                      shift and go to state 1
    expr                           shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> ID . EQUALS expr SEMICOLON
    (3) statement -> ID . EQUALS expr SEMICOLON statement
    (16) expr -> ID .

    EQUALS          shift and go to state 11
    PLUS            reduce using rule 16 (expr -> ID .)
    MINUS           reduce using rule 16 (expr -> ID .)
    TIMES           reduce using rule 16 (expr -> ID .)
    DIVIDE          reduce using rule 16 (expr -> ID .)
    LESS_THAN       reduce using rule 16 (expr -> ID .)
    LESS_THAN_EQUAL reduce using rule 16 (expr -> ID .)
    GREATER_THAN    reduce using rule 16 (expr -> ID .)
    GREATER_THAN_EQUAL reduce using rule 16 (expr -> ID .)
    AND             reduce using rule 16 (expr -> ID .)
    OR              reduce using rule 16 (expr -> ID .)
    $end            reduce using rule 16 (expr -> ID .)
    RIGHT_BRACE     reduce using rule 16 (expr -> ID .)


state 3

    (2) statement -> expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

    $end            reduce using rule 2 (statement -> expr .)
    RIGHT_BRACE     reduce using rule 2 (statement -> expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21


state 4

    (14) expr -> NOT . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 22

state 5

    (15) expr -> LEFT_PAREN . expr RIGHT_PAREN
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 24

state 6

    (17) expr -> NUMBER .

    PLUS            reduce using rule 17 (expr -> NUMBER .)
    MINUS           reduce using rule 17 (expr -> NUMBER .)
    TIMES           reduce using rule 17 (expr -> NUMBER .)
    DIVIDE          reduce using rule 17 (expr -> NUMBER .)
    LESS_THAN       reduce using rule 17 (expr -> NUMBER .)
    LESS_THAN_EQUAL reduce using rule 17 (expr -> NUMBER .)
    GREATER_THAN    reduce using rule 17 (expr -> NUMBER .)
    GREATER_THAN_EQUAL reduce using rule 17 (expr -> NUMBER .)
    AND             reduce using rule 17 (expr -> NUMBER .)
    OR              reduce using rule 17 (expr -> NUMBER .)
    $end            reduce using rule 17 (expr -> NUMBER .)
    RIGHT_PAREN     reduce using rule 17 (expr -> NUMBER .)
    SEMICOLON       reduce using rule 17 (expr -> NUMBER .)
    RIGHT_BRACE     reduce using rule 17 (expr -> NUMBER .)


state 7

    (18) expr -> STRING .

    PLUS            reduce using rule 18 (expr -> STRING .)
    MINUS           reduce using rule 18 (expr -> STRING .)
    TIMES           reduce using rule 18 (expr -> STRING .)
    DIVIDE          reduce using rule 18 (expr -> STRING .)
    LESS_THAN       reduce using rule 18 (expr -> STRING .)
    LESS_THAN_EQUAL reduce using rule 18 (expr -> STRING .)
    GREATER_THAN    reduce using rule 18 (expr -> STRING .)
    GREATER_THAN_EQUAL reduce using rule 18 (expr -> STRING .)
    AND             reduce using rule 18 (expr -> STRING .)
    OR              reduce using rule 18 (expr -> STRING .)
    $end            reduce using rule 18 (expr -> STRING .)
    RIGHT_PAREN     reduce using rule 18 (expr -> STRING .)
    SEMICOLON       reduce using rule 18 (expr -> STRING .)
    RIGHT_BRACE     reduce using rule 18 (expr -> STRING .)


state 8

    (19) expr -> IF . LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 25


state 9

    (20) expr -> WHILE . LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 26


state 10

    (21) expr -> PRINTF . LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 27


state 11

    (1) statement -> ID EQUALS . expr SEMICOLON
    (3) statement -> ID EQUALS . expr SEMICOLON statement
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 28

state 12

    (4) expr -> expr PLUS . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 29

state 13

    (5) expr -> expr MINUS . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 30

state 14

    (6) expr -> expr TIMES . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 31

state 15

    (7) expr -> expr DIVIDE . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 32

state 16

    (8) expr -> expr LESS_THAN . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 33

state 17

    (9) expr -> expr LESS_THAN_EQUAL . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 34

state 18

    (10) expr -> expr GREATER_THAN . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 35

state 19

    (11) expr -> expr GREATER_THAN_EQUAL . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 36

state 20

    (12) expr -> expr AND . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 37

state 21

    (13) expr -> expr OR . expr
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 38

state 22

    (14) expr -> NOT expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 14 (expr -> NOT expr .)
    RIGHT_PAREN     reduce using rule 14 (expr -> NOT expr .)
    SEMICOLON       reduce using rule 14 (expr -> NOT expr .)
    RIGHT_BRACE     reduce using rule 14 (expr -> NOT expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21

  ! PLUS            [ reduce using rule 14 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 14 (expr -> NOT expr .) ]
  ! TIMES           [ reduce using rule 14 (expr -> NOT expr .) ]
  ! DIVIDE          [ reduce using rule 14 (expr -> NOT expr .) ]
  ! LESS_THAN       [ reduce using rule 14 (expr -> NOT expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 14 (expr -> NOT expr .) ]
  ! GREATER_THAN    [ reduce using rule 14 (expr -> NOT expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 14 (expr -> NOT expr .) ]
  ! AND             [ reduce using rule 14 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 14 (expr -> NOT expr .) ]


state 23

    (16) expr -> ID .

    PLUS            reduce using rule 16 (expr -> ID .)
    MINUS           reduce using rule 16 (expr -> ID .)
    TIMES           reduce using rule 16 (expr -> ID .)
    DIVIDE          reduce using rule 16 (expr -> ID .)
    LESS_THAN       reduce using rule 16 (expr -> ID .)
    LESS_THAN_EQUAL reduce using rule 16 (expr -> ID .)
    GREATER_THAN    reduce using rule 16 (expr -> ID .)
    GREATER_THAN_EQUAL reduce using rule 16 (expr -> ID .)
    AND             reduce using rule 16 (expr -> ID .)
    OR              reduce using rule 16 (expr -> ID .)
    $end            reduce using rule 16 (expr -> ID .)
    RIGHT_PAREN     reduce using rule 16 (expr -> ID .)
    SEMICOLON       reduce using rule 16 (expr -> ID .)
    RIGHT_BRACE     reduce using rule 16 (expr -> ID .)


state 24

    (15) expr -> LEFT_PAREN expr . RIGHT_PAREN
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 39
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21


state 25

    (19) expr -> IF LEFT_PAREN . expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 40

state 26

    (20) expr -> WHILE LEFT_PAREN . expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 41

state 27

    (21) expr -> PRINTF LEFT_PAREN . expr RIGHT_PAREN SEMICOLON
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    ID              shift and go to state 23
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 42

state 28

    (1) statement -> ID EQUALS expr . SEMICOLON
    (3) statement -> ID EQUALS expr . SEMICOLON statement
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

    SEMICOLON       shift and go to state 43
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21


state 29

    (4) expr -> expr PLUS expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 4 (expr -> expr PLUS expr .)
    RIGHT_PAREN     reduce using rule 4 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 4 (expr -> expr PLUS expr .)
    RIGHT_BRACE     reduce using rule 4 (expr -> expr PLUS expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21

  ! PLUS            [ reduce using rule 4 (expr -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 4 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 4 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 4 (expr -> expr PLUS expr .) ]
  ! LESS_THAN       [ reduce using rule 4 (expr -> expr PLUS expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 4 (expr -> expr PLUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 4 (expr -> expr PLUS expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 4 (expr -> expr PLUS expr .) ]
  ! AND             [ reduce using rule 4 (expr -> expr PLUS expr .) ]
  ! OR              [ reduce using rule 4 (expr -> expr PLUS expr .) ]


state 30

    (5) expr -> expr MINUS expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 5 (expr -> expr MINUS expr .)
    RIGHT_PAREN     reduce using rule 5 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 5 (expr -> expr MINUS expr .)
    RIGHT_BRACE     reduce using rule 5 (expr -> expr MINUS expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21

  ! PLUS            [ reduce using rule 5 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 5 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 5 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 5 (expr -> expr MINUS expr .) ]
  ! LESS_THAN       [ reduce using rule 5 (expr -> expr MINUS expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 5 (expr -> expr MINUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 5 (expr -> expr MINUS expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 5 (expr -> expr MINUS expr .) ]
  ! AND             [ reduce using rule 5 (expr -> expr MINUS expr .) ]
  ! OR              [ reduce using rule 5 (expr -> expr MINUS expr .) ]


state 31

    (6) expr -> expr TIMES expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 6 (expr -> expr TIMES expr .)
    RIGHT_PAREN     reduce using rule 6 (expr -> expr TIMES expr .)
    SEMICOLON       reduce using rule 6 (expr -> expr TIMES expr .)
    RIGHT_BRACE     reduce using rule 6 (expr -> expr TIMES expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21

  ! PLUS            [ reduce using rule 6 (expr -> expr TIMES expr .) ]
  ! MINUS           [ reduce using rule 6 (expr -> expr TIMES expr .) ]
  ! TIMES           [ reduce using rule 6 (expr -> expr TIMES expr .) ]
  ! DIVIDE          [ reduce using rule 6 (expr -> expr TIMES expr .) ]
  ! LESS_THAN       [ reduce using rule 6 (expr -> expr TIMES expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 6 (expr -> expr TIMES expr .) ]
  ! GREATER_THAN    [ reduce using rule 6 (expr -> expr TIMES expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 6 (expr -> expr TIMES expr .) ]
  ! AND             [ reduce using rule 6 (expr -> expr TIMES expr .) ]
  ! OR              [ reduce using rule 6 (expr -> expr TIMES expr .) ]


state 32

    (7) expr -> expr DIVIDE expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 7 (expr -> expr DIVIDE expr .)
    RIGHT_PAREN     reduce using rule 7 (expr -> expr DIVIDE expr .)
    SEMICOLON       reduce using rule 7 (expr -> expr DIVIDE expr .)
    RIGHT_BRACE     reduce using rule 7 (expr -> expr DIVIDE expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21

  ! PLUS            [ reduce using rule 7 (expr -> expr DIVIDE expr .) ]
  ! MINUS           [ reduce using rule 7 (expr -> expr DIVIDE expr .) ]
  ! TIMES           [ reduce using rule 7 (expr -> expr DIVIDE expr .) ]
  ! DIVIDE          [ reduce using rule 7 (expr -> expr DIVIDE expr .) ]
  ! LESS_THAN       [ reduce using rule 7 (expr -> expr DIVIDE expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 7 (expr -> expr DIVIDE expr .) ]
  ! GREATER_THAN    [ reduce using rule 7 (expr -> expr DIVIDE expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 7 (expr -> expr DIVIDE expr .) ]
  ! AND             [ reduce using rule 7 (expr -> expr DIVIDE expr .) ]
  ! OR              [ reduce using rule 7 (expr -> expr DIVIDE expr .) ]


state 33

    (8) expr -> expr LESS_THAN expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 8 (expr -> expr LESS_THAN expr .)
    RIGHT_PAREN     reduce using rule 8 (expr -> expr LESS_THAN expr .)
    SEMICOLON       reduce using rule 8 (expr -> expr LESS_THAN expr .)
    RIGHT_BRACE     reduce using rule 8 (expr -> expr LESS_THAN expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21

  ! PLUS            [ reduce using rule 8 (expr -> expr LESS_THAN expr .) ]
  ! MINUS           [ reduce using rule 8 (expr -> expr LESS_THAN expr .) ]
  ! TIMES           [ reduce using rule 8 (expr -> expr LESS_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 8 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 8 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 8 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 8 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 8 (expr -> expr LESS_THAN expr .) ]
  ! AND             [ reduce using rule 8 (expr -> expr LESS_THAN expr .) ]
  ! OR              [ reduce using rule 8 (expr -> expr LESS_THAN expr .) ]


state 34

    (9) expr -> expr LESS_THAN_EQUAL expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 9 (expr -> expr LESS_THAN_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 9 (expr -> expr LESS_THAN_EQUAL expr .)
    SEMICOLON       reduce using rule 9 (expr -> expr LESS_THAN_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 9 (expr -> expr LESS_THAN_EQUAL expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21

  ! PLUS            [ reduce using rule 9 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 9 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 9 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 9 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 9 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 9 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 9 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 9 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! AND             [ reduce using rule 9 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! OR              [ reduce using rule 9 (expr -> expr LESS_THAN_EQUAL expr .) ]


state 35

    (10) expr -> expr GREATER_THAN expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 10 (expr -> expr GREATER_THAN expr .)
    RIGHT_PAREN     reduce using rule 10 (expr -> expr GREATER_THAN expr .)
    SEMICOLON       reduce using rule 10 (expr -> expr GREATER_THAN expr .)
    RIGHT_BRACE     reduce using rule 10 (expr -> expr GREATER_THAN expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21

  ! PLUS            [ reduce using rule 10 (expr -> expr GREATER_THAN expr .) ]
  ! MINUS           [ reduce using rule 10 (expr -> expr GREATER_THAN expr .) ]
  ! TIMES           [ reduce using rule 10 (expr -> expr GREATER_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 10 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 10 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 10 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 10 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 10 (expr -> expr GREATER_THAN expr .) ]
  ! AND             [ reduce using rule 10 (expr -> expr GREATER_THAN expr .) ]
  ! OR              [ reduce using rule 10 (expr -> expr GREATER_THAN expr .) ]


state 36

    (11) expr -> expr GREATER_THAN_EQUAL expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 11 (expr -> expr GREATER_THAN_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 11 (expr -> expr GREATER_THAN_EQUAL expr .)
    SEMICOLON       reduce using rule 11 (expr -> expr GREATER_THAN_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 11 (expr -> expr GREATER_THAN_EQUAL expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21

  ! PLUS            [ reduce using rule 11 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 11 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 11 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 11 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 11 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 11 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 11 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 11 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! AND             [ reduce using rule 11 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! OR              [ reduce using rule 11 (expr -> expr GREATER_THAN_EQUAL expr .) ]


state 37

    (12) expr -> expr AND expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 12 (expr -> expr AND expr .)
    RIGHT_PAREN     reduce using rule 12 (expr -> expr AND expr .)
    SEMICOLON       reduce using rule 12 (expr -> expr AND expr .)
    RIGHT_BRACE     reduce using rule 12 (expr -> expr AND expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21

  ! PLUS            [ reduce using rule 12 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 12 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 12 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 12 (expr -> expr AND expr .) ]
  ! LESS_THAN       [ reduce using rule 12 (expr -> expr AND expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 12 (expr -> expr AND expr .) ]
  ! GREATER_THAN    [ reduce using rule 12 (expr -> expr AND expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 12 (expr -> expr AND expr .) ]
  ! AND             [ reduce using rule 12 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 12 (expr -> expr AND expr .) ]


state 38

    (13) expr -> expr OR expr .
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    $end            reduce using rule 13 (expr -> expr OR expr .)
    RIGHT_PAREN     reduce using rule 13 (expr -> expr OR expr .)
    SEMICOLON       reduce using rule 13 (expr -> expr OR expr .)
    RIGHT_BRACE     reduce using rule 13 (expr -> expr OR expr .)
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21

  ! PLUS            [ reduce using rule 13 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 13 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 13 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 13 (expr -> expr OR expr .) ]
  ! LESS_THAN       [ reduce using rule 13 (expr -> expr OR expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 13 (expr -> expr OR expr .) ]
  ! GREATER_THAN    [ reduce using rule 13 (expr -> expr OR expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 13 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 13 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 13 (expr -> expr OR expr .) ]


state 39

    (15) expr -> LEFT_PAREN expr RIGHT_PAREN .

    PLUS            reduce using rule 15 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    MINUS           reduce using rule 15 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    TIMES           reduce using rule 15 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    DIVIDE          reduce using rule 15 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_THAN       reduce using rule 15 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_THAN_EQUAL reduce using rule 15 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 15 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 15 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    AND             reduce using rule 15 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    OR              reduce using rule 15 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    $end            reduce using rule 15 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 15 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    SEMICOLON       reduce using rule 15 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 15 (expr -> LEFT_PAREN expr RIGHT_PAREN .)


state 40

    (19) expr -> IF LEFT_PAREN expr . RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 44
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21


state 41

    (20) expr -> WHILE LEFT_PAREN expr . RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 45
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21


state 42

    (21) expr -> PRINTF LEFT_PAREN expr . RIGHT_PAREN SEMICOLON
    (4) expr -> expr . PLUS expr
    (5) expr -> expr . MINUS expr
    (6) expr -> expr . TIMES expr
    (7) expr -> expr . DIVIDE expr
    (8) expr -> expr . LESS_THAN expr
    (9) expr -> expr . LESS_THAN_EQUAL expr
    (10) expr -> expr . GREATER_THAN expr
    (11) expr -> expr . GREATER_THAN_EQUAL expr
    (12) expr -> expr . AND expr
    (13) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 46
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15
    LESS_THAN       shift and go to state 16
    LESS_THAN_EQUAL shift and go to state 17
    GREATER_THAN    shift and go to state 18
    GREATER_THAN_EQUAL shift and go to state 19
    AND             shift and go to state 20
    OR              shift and go to state 21


state 43

    (1) statement -> ID EQUALS expr SEMICOLON .
    (3) statement -> ID EQUALS expr SEMICOLON . statement
    (1) statement -> . ID EQUALS expr SEMICOLON
    (2) statement -> . expr
    (3) statement -> . ID EQUALS expr SEMICOLON statement
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    $end            reduce using rule 1 (statement -> ID EQUALS expr SEMICOLON .)
    RIGHT_BRACE     reduce using rule 1 (statement -> ID EQUALS expr SEMICOLON .)
    ID              shift and go to state 2
    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 3
    statement                      shift and go to state 47

state 44

    (19) expr -> IF LEFT_PAREN expr RIGHT_PAREN . LEFT_BRACE statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 48


state 45

    (20) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN . LEFT_BRACE statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 49


state 46

    (21) expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 50


state 47

    (3) statement -> ID EQUALS expr SEMICOLON statement .

    $end            reduce using rule 3 (statement -> ID EQUALS expr SEMICOLON statement .)
    RIGHT_BRACE     reduce using rule 3 (statement -> ID EQUALS expr SEMICOLON statement .)


state 48

    (19) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE . statement RIGHT_BRACE
    (1) statement -> . ID EQUALS expr SEMICOLON
    (2) statement -> . expr
    (3) statement -> . ID EQUALS expr SEMICOLON statement
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    ID              shift and go to state 2
    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 3
    statement                      shift and go to state 51

state 49

    (20) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE . statement RIGHT_BRACE
    (1) statement -> . ID EQUALS expr SEMICOLON
    (2) statement -> . expr
    (3) statement -> . ID EQUALS expr SEMICOLON statement
    (4) expr -> . expr PLUS expr
    (5) expr -> . expr MINUS expr
    (6) expr -> . expr TIMES expr
    (7) expr -> . expr DIVIDE expr
    (8) expr -> . expr LESS_THAN expr
    (9) expr -> . expr LESS_THAN_EQUAL expr
    (10) expr -> . expr GREATER_THAN expr
    (11) expr -> . expr GREATER_THAN_EQUAL expr
    (12) expr -> . expr AND expr
    (13) expr -> . expr OR expr
    (14) expr -> . NOT expr
    (15) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (16) expr -> . ID
    (17) expr -> . NUMBER
    (18) expr -> . STRING
    (19) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (20) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE
    (21) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    ID              shift and go to state 2
    NOT             shift and go to state 4
    LEFT_PAREN      shift and go to state 5
    NUMBER          shift and go to state 6
    STRING          shift and go to state 7
    IF              shift and go to state 8
    WHILE           shift and go to state 9
    PRINTF          shift and go to state 10

    expr                           shift and go to state 3
    statement                      shift and go to state 52

state 50

    (21) expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .

    PLUS            reduce using rule 21 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    MINUS           reduce using rule 21 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    TIMES           reduce using rule 21 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    DIVIDE          reduce using rule 21 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    LESS_THAN       reduce using rule 21 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    LESS_THAN_EQUAL reduce using rule 21 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    GREATER_THAN    reduce using rule 21 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    GREATER_THAN_EQUAL reduce using rule 21 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    AND             reduce using rule 21 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    OR              reduce using rule 21 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 21 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    RIGHT_PAREN     reduce using rule 21 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 21 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 21 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)


state 51

    (19) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 53


state 52

    (20) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 54


state 53

    (19) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .

    PLUS            reduce using rule 19 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    MINUS           reduce using rule 19 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    TIMES           reduce using rule 19 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    DIVIDE          reduce using rule 19 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    LESS_THAN       reduce using rule 19 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    LESS_THAN_EQUAL reduce using rule 19 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    GREATER_THAN    reduce using rule 19 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 19 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    AND             reduce using rule 19 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    OR              reduce using rule 19 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    $end            reduce using rule 19 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 19 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    SEMICOLON       reduce using rule 19 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 19 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)


state 54

    (20) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .

    PLUS            reduce using rule 20 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    MINUS           reduce using rule 20 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    TIMES           reduce using rule 20 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    DIVIDE          reduce using rule 20 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    LESS_THAN       reduce using rule 20 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    LESS_THAN_EQUAL reduce using rule 20 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    GREATER_THAN    reduce using rule 20 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 20 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    AND             reduce using rule 20 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    OR              reduce using rule 20 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    $end            reduce using rule 20 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 20 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    SEMICOLON       reduce using rule 20 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 20 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE statement RIGHT_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 22 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 22 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 22 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 22 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 22 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 22 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 22 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 22 resolved as shift
WARNING: shift/reduce conflict for AND in state 22 resolved as shift
WARNING: shift/reduce conflict for OR in state 22 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 29 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 29 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 29 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 29 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 29 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 29 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 29 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 29 resolved as shift
WARNING: shift/reduce conflict for AND in state 29 resolved as shift
WARNING: shift/reduce conflict for OR in state 29 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 30 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 30 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 30 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 30 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 30 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 30 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 30 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 30 resolved as shift
WARNING: shift/reduce conflict for AND in state 30 resolved as shift
WARNING: shift/reduce conflict for OR in state 30 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 31 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 31 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 31 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 31 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 31 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 31 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 31 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 31 resolved as shift
WARNING: shift/reduce conflict for AND in state 31 resolved as shift
WARNING: shift/reduce conflict for OR in state 31 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 32 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 32 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 32 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 32 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 32 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 32 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 32 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 32 resolved as shift
WARNING: shift/reduce conflict for AND in state 32 resolved as shift
WARNING: shift/reduce conflict for OR in state 32 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 33 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 33 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 33 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 33 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 33 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 33 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 33 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 33 resolved as shift
WARNING: shift/reduce conflict for AND in state 33 resolved as shift
WARNING: shift/reduce conflict for OR in state 33 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 34 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 34 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 34 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 34 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 34 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 34 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 34 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 34 resolved as shift
WARNING: shift/reduce conflict for AND in state 34 resolved as shift
WARNING: shift/reduce conflict for OR in state 34 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 35 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 35 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 35 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 35 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 35 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 35 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 35 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 35 resolved as shift
WARNING: shift/reduce conflict for AND in state 35 resolved as shift
WARNING: shift/reduce conflict for OR in state 35 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 36 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 36 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 36 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 36 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 36 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 36 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 36 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 36 resolved as shift
WARNING: shift/reduce conflict for AND in state 36 resolved as shift
WARNING: shift/reduce conflict for OR in state 36 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 37 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 37 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 37 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 37 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 37 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 37 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 37 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 37 resolved as shift
WARNING: shift/reduce conflict for AND in state 37 resolved as shift
WARNING: shift/reduce conflict for OR in state 37 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 38 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 38 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 38 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 38 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 38 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 38 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 38 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 38 resolved as shift
WARNING: shift/reduce conflict for AND in state 38 resolved as shift
WARNING: shift/reduce conflict for OR in state 38 resolved as shift
