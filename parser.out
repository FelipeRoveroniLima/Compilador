Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> ID EQUALS expr SEMICOLON program
Rule 2     program -> ID EQUALS function_call SEMICOLON program
Rule 3     program -> function_call SEMICOLON program
Rule 4     program -> expr program
Rule 5     program -> lambda
Rule 6     program -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
Rule 7     function_call -> ID LEFT_PAREN args RIGHT_PAREN
Rule 8     parameters -> ID
Rule 9     parameters -> parameters COMMA ID
Rule 10    args -> expr
Rule 11    args -> args COMMA expr
Rule 12    expr -> expr PLUS expr
Rule 13    expr -> expr MINUS expr
Rule 14    expr -> expr TIMES expr
Rule 15    expr -> expr DIVIDE expr
Rule 16    expr -> expr EQUALS_EQUALS expr
Rule 17    expr -> expr LESS_THAN expr
Rule 18    expr -> expr LESS_THAN_EQUAL expr
Rule 19    expr -> expr GREATER_THAN expr
Rule 20    expr -> expr GREATER_THAN_EQUAL expr
Rule 21    expr -> expr AND expr
Rule 22    expr -> expr OR expr
Rule 23    expr -> NOT expr
Rule 24    expr -> LEFT_PAREN expr RIGHT_PAREN
Rule 25    expr -> ID
Rule 26    expr -> NUMBER
Rule 27    expr -> STRING
Rule 28    expr -> TRUE
Rule 29    expr -> FALSE
Rule 30    expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
Rule 31    expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
Rule 32    expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
Rule 33    expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
Rule 34    lambda -> <empty>

Terminals, with rules where they appear

AND                  : 21
COMMA                : 9 11
COMMENT              : 
DIVIDE               : 15
ELSE                 : 31
EQUALS               : 1 2
EQUALS_EQUALS        : 16
FALSE                : 29
GREATER_THAN         : 19
GREATER_THAN_EQUAL   : 20
ID                   : 1 2 6 7 8 9 25
IF                   : 30 31
LEFT_BRACE           : 6 30 31 31 32
LEFT_PAREN           : 6 7 24 30 31 32 33
LESS_THAN            : 17
LESS_THAN_EQUAL      : 18
MINUS                : 13
NOT                  : 23
NUMBER               : 26
OR                   : 22
PLUS                 : 12
PRINTF               : 33
RIGHT_BRACE          : 6 30 31 31 32
RIGHT_PAREN          : 6 7 24 30 31 32 33
SEMICOLON            : 1 2 3 33
STRING               : 27
TIMES                : 14
TRUE                 : 28
WHILE                : 32
error                : 

Nonterminals, with rules where they appear

args                 : 7 11
expr                 : 1 4 10 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 24 30 31 32 33
function_call        : 2 3
lambda               : 5
parameters           : 6 9
program              : 1 2 3 4 6 6 30 31 31 32 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . ID EQUALS expr SEMICOLON program
    (2) program -> . ID EQUALS function_call SEMICOLON program
    (3) program -> . function_call SEMICOLON program
    (4) program -> . expr program
    (5) program -> . lambda
    (6) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (34) lambda -> .

    ID              shift and go to state 2
    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14
    $end            reduce using rule 34 (lambda -> .)

    program                        shift and go to state 1
    expr                           shift and go to state 3
    function_call                  shift and go to state 4
    lambda                         shift and go to state 5

state 1

    (0) S' -> program .



state 2

    (1) program -> ID . EQUALS expr SEMICOLON program
    (2) program -> ID . EQUALS function_call SEMICOLON program
    (6) program -> ID . LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
    (7) function_call -> ID . LEFT_PAREN args RIGHT_PAREN
    (25) expr -> ID .

  ! shift/reduce conflict for LEFT_PAREN resolved as shift
    EQUALS          shift and go to state 15
    LEFT_PAREN      shift and go to state 16
    PLUS            reduce using rule 25 (expr -> ID .)
    MINUS           reduce using rule 25 (expr -> ID .)
    TIMES           reduce using rule 25 (expr -> ID .)
    DIVIDE          reduce using rule 25 (expr -> ID .)
    EQUALS_EQUALS   reduce using rule 25 (expr -> ID .)
    LESS_THAN       reduce using rule 25 (expr -> ID .)
    LESS_THAN_EQUAL reduce using rule 25 (expr -> ID .)
    GREATER_THAN    reduce using rule 25 (expr -> ID .)
    GREATER_THAN_EQUAL reduce using rule 25 (expr -> ID .)
    AND             reduce using rule 25 (expr -> ID .)
    OR              reduce using rule 25 (expr -> ID .)
    ID              reduce using rule 25 (expr -> ID .)
    NOT             reduce using rule 25 (expr -> ID .)
    NUMBER          reduce using rule 25 (expr -> ID .)
    STRING          reduce using rule 25 (expr -> ID .)
    TRUE            reduce using rule 25 (expr -> ID .)
    FALSE           reduce using rule 25 (expr -> ID .)
    IF              reduce using rule 25 (expr -> ID .)
    WHILE           reduce using rule 25 (expr -> ID .)
    PRINTF          reduce using rule 25 (expr -> ID .)
    $end            reduce using rule 25 (expr -> ID .)
    RIGHT_BRACE     reduce using rule 25 (expr -> ID .)

  ! LEFT_PAREN      [ reduce using rule 25 (expr -> ID .) ]


state 3

    (4) program -> expr . program
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr
    (1) program -> . ID EQUALS expr SEMICOLON program
    (2) program -> . ID EQUALS function_call SEMICOLON program
    (3) program -> . function_call SEMICOLON program
    (4) program -> . expr program
    (5) program -> . lambda
    (6) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (34) lambda -> .

    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28
    ID              shift and go to state 2
    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14
    $end            reduce using rule 34 (lambda -> .)
    RIGHT_BRACE     reduce using rule 34 (lambda -> .)

    expr                           shift and go to state 3
    program                        shift and go to state 17
    function_call                  shift and go to state 4
    lambda                         shift and go to state 5

state 4

    (3) program -> function_call . SEMICOLON program

    SEMICOLON       shift and go to state 29


state 5

    (5) program -> lambda .

    $end            reduce using rule 5 (program -> lambda .)
    RIGHT_BRACE     reduce using rule 5 (program -> lambda .)


state 6

    (24) expr -> LEFT_PAREN . expr RIGHT_PAREN
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 30

state 7

    (23) expr -> NOT . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 32

state 8

    (26) expr -> NUMBER .

    PLUS            reduce using rule 26 (expr -> NUMBER .)
    MINUS           reduce using rule 26 (expr -> NUMBER .)
    TIMES           reduce using rule 26 (expr -> NUMBER .)
    DIVIDE          reduce using rule 26 (expr -> NUMBER .)
    EQUALS_EQUALS   reduce using rule 26 (expr -> NUMBER .)
    LESS_THAN       reduce using rule 26 (expr -> NUMBER .)
    LESS_THAN_EQUAL reduce using rule 26 (expr -> NUMBER .)
    GREATER_THAN    reduce using rule 26 (expr -> NUMBER .)
    GREATER_THAN_EQUAL reduce using rule 26 (expr -> NUMBER .)
    AND             reduce using rule 26 (expr -> NUMBER .)
    OR              reduce using rule 26 (expr -> NUMBER .)
    ID              reduce using rule 26 (expr -> NUMBER .)
    NOT             reduce using rule 26 (expr -> NUMBER .)
    LEFT_PAREN      reduce using rule 26 (expr -> NUMBER .)
    NUMBER          reduce using rule 26 (expr -> NUMBER .)
    STRING          reduce using rule 26 (expr -> NUMBER .)
    TRUE            reduce using rule 26 (expr -> NUMBER .)
    FALSE           reduce using rule 26 (expr -> NUMBER .)
    IF              reduce using rule 26 (expr -> NUMBER .)
    WHILE           reduce using rule 26 (expr -> NUMBER .)
    PRINTF          reduce using rule 26 (expr -> NUMBER .)
    $end            reduce using rule 26 (expr -> NUMBER .)
    RIGHT_BRACE     reduce using rule 26 (expr -> NUMBER .)
    RIGHT_PAREN     reduce using rule 26 (expr -> NUMBER .)
    SEMICOLON       reduce using rule 26 (expr -> NUMBER .)
    COMMA           reduce using rule 26 (expr -> NUMBER .)


state 9

    (27) expr -> STRING .

    PLUS            reduce using rule 27 (expr -> STRING .)
    MINUS           reduce using rule 27 (expr -> STRING .)
    TIMES           reduce using rule 27 (expr -> STRING .)
    DIVIDE          reduce using rule 27 (expr -> STRING .)
    EQUALS_EQUALS   reduce using rule 27 (expr -> STRING .)
    LESS_THAN       reduce using rule 27 (expr -> STRING .)
    LESS_THAN_EQUAL reduce using rule 27 (expr -> STRING .)
    GREATER_THAN    reduce using rule 27 (expr -> STRING .)
    GREATER_THAN_EQUAL reduce using rule 27 (expr -> STRING .)
    AND             reduce using rule 27 (expr -> STRING .)
    OR              reduce using rule 27 (expr -> STRING .)
    ID              reduce using rule 27 (expr -> STRING .)
    NOT             reduce using rule 27 (expr -> STRING .)
    LEFT_PAREN      reduce using rule 27 (expr -> STRING .)
    NUMBER          reduce using rule 27 (expr -> STRING .)
    STRING          reduce using rule 27 (expr -> STRING .)
    TRUE            reduce using rule 27 (expr -> STRING .)
    FALSE           reduce using rule 27 (expr -> STRING .)
    IF              reduce using rule 27 (expr -> STRING .)
    WHILE           reduce using rule 27 (expr -> STRING .)
    PRINTF          reduce using rule 27 (expr -> STRING .)
    $end            reduce using rule 27 (expr -> STRING .)
    RIGHT_BRACE     reduce using rule 27 (expr -> STRING .)
    RIGHT_PAREN     reduce using rule 27 (expr -> STRING .)
    SEMICOLON       reduce using rule 27 (expr -> STRING .)
    COMMA           reduce using rule 27 (expr -> STRING .)


state 10

    (28) expr -> TRUE .

    PLUS            reduce using rule 28 (expr -> TRUE .)
    MINUS           reduce using rule 28 (expr -> TRUE .)
    TIMES           reduce using rule 28 (expr -> TRUE .)
    DIVIDE          reduce using rule 28 (expr -> TRUE .)
    EQUALS_EQUALS   reduce using rule 28 (expr -> TRUE .)
    LESS_THAN       reduce using rule 28 (expr -> TRUE .)
    LESS_THAN_EQUAL reduce using rule 28 (expr -> TRUE .)
    GREATER_THAN    reduce using rule 28 (expr -> TRUE .)
    GREATER_THAN_EQUAL reduce using rule 28 (expr -> TRUE .)
    AND             reduce using rule 28 (expr -> TRUE .)
    OR              reduce using rule 28 (expr -> TRUE .)
    ID              reduce using rule 28 (expr -> TRUE .)
    NOT             reduce using rule 28 (expr -> TRUE .)
    LEFT_PAREN      reduce using rule 28 (expr -> TRUE .)
    NUMBER          reduce using rule 28 (expr -> TRUE .)
    STRING          reduce using rule 28 (expr -> TRUE .)
    TRUE            reduce using rule 28 (expr -> TRUE .)
    FALSE           reduce using rule 28 (expr -> TRUE .)
    IF              reduce using rule 28 (expr -> TRUE .)
    WHILE           reduce using rule 28 (expr -> TRUE .)
    PRINTF          reduce using rule 28 (expr -> TRUE .)
    $end            reduce using rule 28 (expr -> TRUE .)
    RIGHT_BRACE     reduce using rule 28 (expr -> TRUE .)
    RIGHT_PAREN     reduce using rule 28 (expr -> TRUE .)
    SEMICOLON       reduce using rule 28 (expr -> TRUE .)
    COMMA           reduce using rule 28 (expr -> TRUE .)


state 11

    (29) expr -> FALSE .

    PLUS            reduce using rule 29 (expr -> FALSE .)
    MINUS           reduce using rule 29 (expr -> FALSE .)
    TIMES           reduce using rule 29 (expr -> FALSE .)
    DIVIDE          reduce using rule 29 (expr -> FALSE .)
    EQUALS_EQUALS   reduce using rule 29 (expr -> FALSE .)
    LESS_THAN       reduce using rule 29 (expr -> FALSE .)
    LESS_THAN_EQUAL reduce using rule 29 (expr -> FALSE .)
    GREATER_THAN    reduce using rule 29 (expr -> FALSE .)
    GREATER_THAN_EQUAL reduce using rule 29 (expr -> FALSE .)
    AND             reduce using rule 29 (expr -> FALSE .)
    OR              reduce using rule 29 (expr -> FALSE .)
    ID              reduce using rule 29 (expr -> FALSE .)
    NOT             reduce using rule 29 (expr -> FALSE .)
    LEFT_PAREN      reduce using rule 29 (expr -> FALSE .)
    NUMBER          reduce using rule 29 (expr -> FALSE .)
    STRING          reduce using rule 29 (expr -> FALSE .)
    TRUE            reduce using rule 29 (expr -> FALSE .)
    FALSE           reduce using rule 29 (expr -> FALSE .)
    IF              reduce using rule 29 (expr -> FALSE .)
    WHILE           reduce using rule 29 (expr -> FALSE .)
    PRINTF          reduce using rule 29 (expr -> FALSE .)
    $end            reduce using rule 29 (expr -> FALSE .)
    RIGHT_BRACE     reduce using rule 29 (expr -> FALSE .)
    RIGHT_PAREN     reduce using rule 29 (expr -> FALSE .)
    SEMICOLON       reduce using rule 29 (expr -> FALSE .)
    COMMA           reduce using rule 29 (expr -> FALSE .)


state 12

    (30) expr -> IF . LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> IF . LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE

    LEFT_PAREN      shift and go to state 33


state 13

    (32) expr -> WHILE . LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE

    LEFT_PAREN      shift and go to state 34


state 14

    (33) expr -> PRINTF . LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 35


state 15

    (1) program -> ID EQUALS . expr SEMICOLON program
    (2) program -> ID EQUALS . function_call SEMICOLON program
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 36
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 37
    function_call                  shift and go to state 38

state 16

    (6) program -> ID LEFT_PAREN . parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
    (7) function_call -> ID LEFT_PAREN . args RIGHT_PAREN
    (8) parameters -> . ID
    (9) parameters -> . parameters COMMA ID
    (10) args -> . expr
    (11) args -> . args COMMA expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    ID              shift and go to state 39
    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    parameters                     shift and go to state 40
    args                           shift and go to state 41
    expr                           shift and go to state 42

state 17

    (4) program -> expr program .

    $end            reduce using rule 4 (program -> expr program .)
    RIGHT_BRACE     reduce using rule 4 (program -> expr program .)


state 18

    (12) expr -> expr PLUS . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 43

state 19

    (13) expr -> expr MINUS . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 44

state 20

    (14) expr -> expr TIMES . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 45

state 21

    (15) expr -> expr DIVIDE . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 46

state 22

    (16) expr -> expr EQUALS_EQUALS . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 47

state 23

    (17) expr -> expr LESS_THAN . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 48

state 24

    (18) expr -> expr LESS_THAN_EQUAL . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 49

state 25

    (19) expr -> expr GREATER_THAN . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 50

state 26

    (20) expr -> expr GREATER_THAN_EQUAL . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 51

state 27

    (21) expr -> expr AND . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 52

state 28

    (22) expr -> expr OR . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 53

state 29

    (3) program -> function_call SEMICOLON . program
    (1) program -> . ID EQUALS expr SEMICOLON program
    (2) program -> . ID EQUALS function_call SEMICOLON program
    (3) program -> . function_call SEMICOLON program
    (4) program -> . expr program
    (5) program -> . lambda
    (6) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (34) lambda -> .

    ID              shift and go to state 2
    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14
    $end            reduce using rule 34 (lambda -> .)
    RIGHT_BRACE     reduce using rule 34 (lambda -> .)

    function_call                  shift and go to state 4
    program                        shift and go to state 54
    expr                           shift and go to state 3
    lambda                         shift and go to state 5

state 30

    (24) expr -> LEFT_PAREN expr . RIGHT_PAREN
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 55
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28


state 31

    (25) expr -> ID .

    RIGHT_PAREN     reduce using rule 25 (expr -> ID .)
    PLUS            reduce using rule 25 (expr -> ID .)
    MINUS           reduce using rule 25 (expr -> ID .)
    TIMES           reduce using rule 25 (expr -> ID .)
    DIVIDE          reduce using rule 25 (expr -> ID .)
    EQUALS_EQUALS   reduce using rule 25 (expr -> ID .)
    LESS_THAN       reduce using rule 25 (expr -> ID .)
    LESS_THAN_EQUAL reduce using rule 25 (expr -> ID .)
    GREATER_THAN    reduce using rule 25 (expr -> ID .)
    GREATER_THAN_EQUAL reduce using rule 25 (expr -> ID .)
    AND             reduce using rule 25 (expr -> ID .)
    OR              reduce using rule 25 (expr -> ID .)
    ID              reduce using rule 25 (expr -> ID .)
    NOT             reduce using rule 25 (expr -> ID .)
    LEFT_PAREN      reduce using rule 25 (expr -> ID .)
    NUMBER          reduce using rule 25 (expr -> ID .)
    STRING          reduce using rule 25 (expr -> ID .)
    TRUE            reduce using rule 25 (expr -> ID .)
    FALSE           reduce using rule 25 (expr -> ID .)
    IF              reduce using rule 25 (expr -> ID .)
    WHILE           reduce using rule 25 (expr -> ID .)
    PRINTF          reduce using rule 25 (expr -> ID .)
    $end            reduce using rule 25 (expr -> ID .)
    RIGHT_BRACE     reduce using rule 25 (expr -> ID .)
    SEMICOLON       reduce using rule 25 (expr -> ID .)
    COMMA           reduce using rule 25 (expr -> ID .)


state 32

    (23) expr -> NOT expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 23 (expr -> NOT expr .)
    NOT             reduce using rule 23 (expr -> NOT expr .)
    LEFT_PAREN      reduce using rule 23 (expr -> NOT expr .)
    NUMBER          reduce using rule 23 (expr -> NOT expr .)
    STRING          reduce using rule 23 (expr -> NOT expr .)
    TRUE            reduce using rule 23 (expr -> NOT expr .)
    FALSE           reduce using rule 23 (expr -> NOT expr .)
    IF              reduce using rule 23 (expr -> NOT expr .)
    WHILE           reduce using rule 23 (expr -> NOT expr .)
    PRINTF          reduce using rule 23 (expr -> NOT expr .)
    $end            reduce using rule 23 (expr -> NOT expr .)
    RIGHT_BRACE     reduce using rule 23 (expr -> NOT expr .)
    RIGHT_PAREN     reduce using rule 23 (expr -> NOT expr .)
    SEMICOLON       reduce using rule 23 (expr -> NOT expr .)
    COMMA           reduce using rule 23 (expr -> NOT expr .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! PLUS            [ reduce using rule 23 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> NOT expr .) ]
  ! TIMES           [ reduce using rule 23 (expr -> NOT expr .) ]
  ! DIVIDE          [ reduce using rule 23 (expr -> NOT expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 23 (expr -> NOT expr .) ]
  ! LESS_THAN       [ reduce using rule 23 (expr -> NOT expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 23 (expr -> NOT expr .) ]
  ! GREATER_THAN    [ reduce using rule 23 (expr -> NOT expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 23 (expr -> NOT expr .) ]
  ! AND             [ reduce using rule 23 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 23 (expr -> NOT expr .) ]


state 33

    (30) expr -> IF LEFT_PAREN . expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> IF LEFT_PAREN . expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 56

state 34

    (32) expr -> WHILE LEFT_PAREN . expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 57

state 35

    (33) expr -> PRINTF LEFT_PAREN . expr RIGHT_PAREN SEMICOLON
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 58

state 36

    (25) expr -> ID .
    (7) function_call -> ID . LEFT_PAREN args RIGHT_PAREN

    SEMICOLON       reduce using rule 25 (expr -> ID .)
    PLUS            reduce using rule 25 (expr -> ID .)
    MINUS           reduce using rule 25 (expr -> ID .)
    TIMES           reduce using rule 25 (expr -> ID .)
    DIVIDE          reduce using rule 25 (expr -> ID .)
    EQUALS_EQUALS   reduce using rule 25 (expr -> ID .)
    LESS_THAN       reduce using rule 25 (expr -> ID .)
    LESS_THAN_EQUAL reduce using rule 25 (expr -> ID .)
    GREATER_THAN    reduce using rule 25 (expr -> ID .)
    GREATER_THAN_EQUAL reduce using rule 25 (expr -> ID .)
    AND             reduce using rule 25 (expr -> ID .)
    OR              reduce using rule 25 (expr -> ID .)
    LEFT_PAREN      shift and go to state 59


state 37

    (1) program -> ID EQUALS expr . SEMICOLON program
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

    SEMICOLON       shift and go to state 60
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28


state 38

    (2) program -> ID EQUALS function_call . SEMICOLON program

    SEMICOLON       shift and go to state 61


state 39

    (8) parameters -> ID .
    (25) expr -> ID .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 8 (parameters -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 8 (parameters -> ID .)
    RIGHT_PAREN     reduce using rule 8 (parameters -> ID .)
    COMMA           reduce using rule 8 (parameters -> ID .)
    PLUS            reduce using rule 25 (expr -> ID .)
    MINUS           reduce using rule 25 (expr -> ID .)
    TIMES           reduce using rule 25 (expr -> ID .)
    DIVIDE          reduce using rule 25 (expr -> ID .)
    EQUALS_EQUALS   reduce using rule 25 (expr -> ID .)
    LESS_THAN       reduce using rule 25 (expr -> ID .)
    LESS_THAN_EQUAL reduce using rule 25 (expr -> ID .)
    GREATER_THAN    reduce using rule 25 (expr -> ID .)
    GREATER_THAN_EQUAL reduce using rule 25 (expr -> ID .)
    AND             reduce using rule 25 (expr -> ID .)
    OR              reduce using rule 25 (expr -> ID .)

  ! RIGHT_PAREN     [ reduce using rule 25 (expr -> ID .) ]
  ! COMMA           [ reduce using rule 25 (expr -> ID .) ]


state 40

    (6) program -> ID LEFT_PAREN parameters . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
    (9) parameters -> parameters . COMMA ID

    RIGHT_PAREN     shift and go to state 62
    COMMA           shift and go to state 63


state 41

    (7) function_call -> ID LEFT_PAREN args . RIGHT_PAREN
    (11) args -> args . COMMA expr

    RIGHT_PAREN     shift and go to state 64
    COMMA           shift and go to state 65


state 42

    (10) args -> expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

    RIGHT_PAREN     reduce using rule 10 (args -> expr .)
    COMMA           reduce using rule 10 (args -> expr .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28


state 43

    (12) expr -> expr PLUS expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 12 (expr -> expr PLUS expr .)
    NOT             reduce using rule 12 (expr -> expr PLUS expr .)
    LEFT_PAREN      reduce using rule 12 (expr -> expr PLUS expr .)
    NUMBER          reduce using rule 12 (expr -> expr PLUS expr .)
    STRING          reduce using rule 12 (expr -> expr PLUS expr .)
    TRUE            reduce using rule 12 (expr -> expr PLUS expr .)
    FALSE           reduce using rule 12 (expr -> expr PLUS expr .)
    IF              reduce using rule 12 (expr -> expr PLUS expr .)
    WHILE           reduce using rule 12 (expr -> expr PLUS expr .)
    PRINTF          reduce using rule 12 (expr -> expr PLUS expr .)
    $end            reduce using rule 12 (expr -> expr PLUS expr .)
    RIGHT_BRACE     reduce using rule 12 (expr -> expr PLUS expr .)
    RIGHT_PAREN     reduce using rule 12 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 12 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 12 (expr -> expr PLUS expr .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! PLUS            [ reduce using rule 12 (expr -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 12 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 12 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 12 (expr -> expr PLUS expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 12 (expr -> expr PLUS expr .) ]
  ! LESS_THAN       [ reduce using rule 12 (expr -> expr PLUS expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 12 (expr -> expr PLUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 12 (expr -> expr PLUS expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 12 (expr -> expr PLUS expr .) ]
  ! AND             [ reduce using rule 12 (expr -> expr PLUS expr .) ]
  ! OR              [ reduce using rule 12 (expr -> expr PLUS expr .) ]


state 44

    (13) expr -> expr MINUS expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 13 (expr -> expr MINUS expr .)
    NOT             reduce using rule 13 (expr -> expr MINUS expr .)
    LEFT_PAREN      reduce using rule 13 (expr -> expr MINUS expr .)
    NUMBER          reduce using rule 13 (expr -> expr MINUS expr .)
    STRING          reduce using rule 13 (expr -> expr MINUS expr .)
    TRUE            reduce using rule 13 (expr -> expr MINUS expr .)
    FALSE           reduce using rule 13 (expr -> expr MINUS expr .)
    IF              reduce using rule 13 (expr -> expr MINUS expr .)
    WHILE           reduce using rule 13 (expr -> expr MINUS expr .)
    PRINTF          reduce using rule 13 (expr -> expr MINUS expr .)
    $end            reduce using rule 13 (expr -> expr MINUS expr .)
    RIGHT_BRACE     reduce using rule 13 (expr -> expr MINUS expr .)
    RIGHT_PAREN     reduce using rule 13 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 13 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 13 (expr -> expr MINUS expr .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! PLUS            [ reduce using rule 13 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 13 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 13 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 13 (expr -> expr MINUS expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 13 (expr -> expr MINUS expr .) ]
  ! LESS_THAN       [ reduce using rule 13 (expr -> expr MINUS expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 13 (expr -> expr MINUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 13 (expr -> expr MINUS expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 13 (expr -> expr MINUS expr .) ]
  ! AND             [ reduce using rule 13 (expr -> expr MINUS expr .) ]
  ! OR              [ reduce using rule 13 (expr -> expr MINUS expr .) ]


state 45

    (14) expr -> expr TIMES expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 14 (expr -> expr TIMES expr .)
    NOT             reduce using rule 14 (expr -> expr TIMES expr .)
    LEFT_PAREN      reduce using rule 14 (expr -> expr TIMES expr .)
    NUMBER          reduce using rule 14 (expr -> expr TIMES expr .)
    STRING          reduce using rule 14 (expr -> expr TIMES expr .)
    TRUE            reduce using rule 14 (expr -> expr TIMES expr .)
    FALSE           reduce using rule 14 (expr -> expr TIMES expr .)
    IF              reduce using rule 14 (expr -> expr TIMES expr .)
    WHILE           reduce using rule 14 (expr -> expr TIMES expr .)
    PRINTF          reduce using rule 14 (expr -> expr TIMES expr .)
    $end            reduce using rule 14 (expr -> expr TIMES expr .)
    RIGHT_BRACE     reduce using rule 14 (expr -> expr TIMES expr .)
    RIGHT_PAREN     reduce using rule 14 (expr -> expr TIMES expr .)
    SEMICOLON       reduce using rule 14 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 14 (expr -> expr TIMES expr .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! PLUS            [ reduce using rule 14 (expr -> expr TIMES expr .) ]
  ! MINUS           [ reduce using rule 14 (expr -> expr TIMES expr .) ]
  ! TIMES           [ reduce using rule 14 (expr -> expr TIMES expr .) ]
  ! DIVIDE          [ reduce using rule 14 (expr -> expr TIMES expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 14 (expr -> expr TIMES expr .) ]
  ! LESS_THAN       [ reduce using rule 14 (expr -> expr TIMES expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 14 (expr -> expr TIMES expr .) ]
  ! GREATER_THAN    [ reduce using rule 14 (expr -> expr TIMES expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 14 (expr -> expr TIMES expr .) ]
  ! AND             [ reduce using rule 14 (expr -> expr TIMES expr .) ]
  ! OR              [ reduce using rule 14 (expr -> expr TIMES expr .) ]


state 46

    (15) expr -> expr DIVIDE expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 15 (expr -> expr DIVIDE expr .)
    NOT             reduce using rule 15 (expr -> expr DIVIDE expr .)
    LEFT_PAREN      reduce using rule 15 (expr -> expr DIVIDE expr .)
    NUMBER          reduce using rule 15 (expr -> expr DIVIDE expr .)
    STRING          reduce using rule 15 (expr -> expr DIVIDE expr .)
    TRUE            reduce using rule 15 (expr -> expr DIVIDE expr .)
    FALSE           reduce using rule 15 (expr -> expr DIVIDE expr .)
    IF              reduce using rule 15 (expr -> expr DIVIDE expr .)
    WHILE           reduce using rule 15 (expr -> expr DIVIDE expr .)
    PRINTF          reduce using rule 15 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 15 (expr -> expr DIVIDE expr .)
    RIGHT_BRACE     reduce using rule 15 (expr -> expr DIVIDE expr .)
    RIGHT_PAREN     reduce using rule 15 (expr -> expr DIVIDE expr .)
    SEMICOLON       reduce using rule 15 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 15 (expr -> expr DIVIDE expr .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! PLUS            [ reduce using rule 15 (expr -> expr DIVIDE expr .) ]
  ! MINUS           [ reduce using rule 15 (expr -> expr DIVIDE expr .) ]
  ! TIMES           [ reduce using rule 15 (expr -> expr DIVIDE expr .) ]
  ! DIVIDE          [ reduce using rule 15 (expr -> expr DIVIDE expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 15 (expr -> expr DIVIDE expr .) ]
  ! LESS_THAN       [ reduce using rule 15 (expr -> expr DIVIDE expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 15 (expr -> expr DIVIDE expr .) ]
  ! GREATER_THAN    [ reduce using rule 15 (expr -> expr DIVIDE expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 15 (expr -> expr DIVIDE expr .) ]
  ! AND             [ reduce using rule 15 (expr -> expr DIVIDE expr .) ]
  ! OR              [ reduce using rule 15 (expr -> expr DIVIDE expr .) ]


state 47

    (16) expr -> expr EQUALS_EQUALS expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .)
    NOT             reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .)
    LEFT_PAREN      reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .)
    NUMBER          reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .)
    STRING          reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .)
    TRUE            reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .)
    FALSE           reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .)
    IF              reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .)
    WHILE           reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .)
    PRINTF          reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .)
    $end            reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .)
    RIGHT_BRACE     reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .)
    RIGHT_PAREN     reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .)
    SEMICOLON       reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .)
    COMMA           reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! PLUS            [ reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .) ]
  ! MINUS           [ reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .) ]
  ! TIMES           [ reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .) ]
  ! LESS_THAN       [ reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .) ]
  ! GREATER_THAN    [ reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .) ]
  ! AND             [ reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .) ]
  ! OR              [ reduce using rule 16 (expr -> expr EQUALS_EQUALS expr .) ]


state 48

    (17) expr -> expr LESS_THAN expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 17 (expr -> expr LESS_THAN expr .)
    NOT             reduce using rule 17 (expr -> expr LESS_THAN expr .)
    LEFT_PAREN      reduce using rule 17 (expr -> expr LESS_THAN expr .)
    NUMBER          reduce using rule 17 (expr -> expr LESS_THAN expr .)
    STRING          reduce using rule 17 (expr -> expr LESS_THAN expr .)
    TRUE            reduce using rule 17 (expr -> expr LESS_THAN expr .)
    FALSE           reduce using rule 17 (expr -> expr LESS_THAN expr .)
    IF              reduce using rule 17 (expr -> expr LESS_THAN expr .)
    WHILE           reduce using rule 17 (expr -> expr LESS_THAN expr .)
    PRINTF          reduce using rule 17 (expr -> expr LESS_THAN expr .)
    $end            reduce using rule 17 (expr -> expr LESS_THAN expr .)
    RIGHT_BRACE     reduce using rule 17 (expr -> expr LESS_THAN expr .)
    RIGHT_PAREN     reduce using rule 17 (expr -> expr LESS_THAN expr .)
    SEMICOLON       reduce using rule 17 (expr -> expr LESS_THAN expr .)
    COMMA           reduce using rule 17 (expr -> expr LESS_THAN expr .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! PLUS            [ reduce using rule 17 (expr -> expr LESS_THAN expr .) ]
  ! MINUS           [ reduce using rule 17 (expr -> expr LESS_THAN expr .) ]
  ! TIMES           [ reduce using rule 17 (expr -> expr LESS_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 17 (expr -> expr LESS_THAN expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 17 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 17 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 17 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 17 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 17 (expr -> expr LESS_THAN expr .) ]
  ! AND             [ reduce using rule 17 (expr -> expr LESS_THAN expr .) ]
  ! OR              [ reduce using rule 17 (expr -> expr LESS_THAN expr .) ]


state 49

    (18) expr -> expr LESS_THAN_EQUAL expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .)
    NOT             reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .)
    LEFT_PAREN      reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .)
    NUMBER          reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .)
    STRING          reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .)
    TRUE            reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .)
    FALSE           reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .)
    IF              reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .)
    WHILE           reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .)
    PRINTF          reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .)
    $end            reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .)
    SEMICOLON       reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .)
    COMMA           reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! PLUS            [ reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! AND             [ reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! OR              [ reduce using rule 18 (expr -> expr LESS_THAN_EQUAL expr .) ]


state 50

    (19) expr -> expr GREATER_THAN expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 19 (expr -> expr GREATER_THAN expr .)
    NOT             reduce using rule 19 (expr -> expr GREATER_THAN expr .)
    LEFT_PAREN      reduce using rule 19 (expr -> expr GREATER_THAN expr .)
    NUMBER          reduce using rule 19 (expr -> expr GREATER_THAN expr .)
    STRING          reduce using rule 19 (expr -> expr GREATER_THAN expr .)
    TRUE            reduce using rule 19 (expr -> expr GREATER_THAN expr .)
    FALSE           reduce using rule 19 (expr -> expr GREATER_THAN expr .)
    IF              reduce using rule 19 (expr -> expr GREATER_THAN expr .)
    WHILE           reduce using rule 19 (expr -> expr GREATER_THAN expr .)
    PRINTF          reduce using rule 19 (expr -> expr GREATER_THAN expr .)
    $end            reduce using rule 19 (expr -> expr GREATER_THAN expr .)
    RIGHT_BRACE     reduce using rule 19 (expr -> expr GREATER_THAN expr .)
    RIGHT_PAREN     reduce using rule 19 (expr -> expr GREATER_THAN expr .)
    SEMICOLON       reduce using rule 19 (expr -> expr GREATER_THAN expr .)
    COMMA           reduce using rule 19 (expr -> expr GREATER_THAN expr .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! PLUS            [ reduce using rule 19 (expr -> expr GREATER_THAN expr .) ]
  ! MINUS           [ reduce using rule 19 (expr -> expr GREATER_THAN expr .) ]
  ! TIMES           [ reduce using rule 19 (expr -> expr GREATER_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 19 (expr -> expr GREATER_THAN expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 19 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 19 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 19 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 19 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 19 (expr -> expr GREATER_THAN expr .) ]
  ! AND             [ reduce using rule 19 (expr -> expr GREATER_THAN expr .) ]
  ! OR              [ reduce using rule 19 (expr -> expr GREATER_THAN expr .) ]


state 51

    (20) expr -> expr GREATER_THAN_EQUAL expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .)
    NOT             reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .)
    LEFT_PAREN      reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .)
    NUMBER          reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .)
    STRING          reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .)
    TRUE            reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .)
    FALSE           reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .)
    IF              reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .)
    WHILE           reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .)
    PRINTF          reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .)
    $end            reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .)
    SEMICOLON       reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .)
    COMMA           reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! PLUS            [ reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! AND             [ reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! OR              [ reduce using rule 20 (expr -> expr GREATER_THAN_EQUAL expr .) ]


state 52

    (21) expr -> expr AND expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 21 (expr -> expr AND expr .)
    NOT             reduce using rule 21 (expr -> expr AND expr .)
    LEFT_PAREN      reduce using rule 21 (expr -> expr AND expr .)
    NUMBER          reduce using rule 21 (expr -> expr AND expr .)
    STRING          reduce using rule 21 (expr -> expr AND expr .)
    TRUE            reduce using rule 21 (expr -> expr AND expr .)
    FALSE           reduce using rule 21 (expr -> expr AND expr .)
    IF              reduce using rule 21 (expr -> expr AND expr .)
    WHILE           reduce using rule 21 (expr -> expr AND expr .)
    PRINTF          reduce using rule 21 (expr -> expr AND expr .)
    $end            reduce using rule 21 (expr -> expr AND expr .)
    RIGHT_BRACE     reduce using rule 21 (expr -> expr AND expr .)
    RIGHT_PAREN     reduce using rule 21 (expr -> expr AND expr .)
    SEMICOLON       reduce using rule 21 (expr -> expr AND expr .)
    COMMA           reduce using rule 21 (expr -> expr AND expr .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! PLUS            [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! LESS_THAN       [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! GREATER_THAN    [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! AND             [ reduce using rule 21 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 21 (expr -> expr AND expr .) ]


state 53

    (22) expr -> expr OR expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 22 (expr -> expr OR expr .)
    NOT             reduce using rule 22 (expr -> expr OR expr .)
    LEFT_PAREN      reduce using rule 22 (expr -> expr OR expr .)
    NUMBER          reduce using rule 22 (expr -> expr OR expr .)
    STRING          reduce using rule 22 (expr -> expr OR expr .)
    TRUE            reduce using rule 22 (expr -> expr OR expr .)
    FALSE           reduce using rule 22 (expr -> expr OR expr .)
    IF              reduce using rule 22 (expr -> expr OR expr .)
    WHILE           reduce using rule 22 (expr -> expr OR expr .)
    PRINTF          reduce using rule 22 (expr -> expr OR expr .)
    $end            reduce using rule 22 (expr -> expr OR expr .)
    RIGHT_BRACE     reduce using rule 22 (expr -> expr OR expr .)
    RIGHT_PAREN     reduce using rule 22 (expr -> expr OR expr .)
    SEMICOLON       reduce using rule 22 (expr -> expr OR expr .)
    COMMA           reduce using rule 22 (expr -> expr OR expr .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28

  ! PLUS            [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! LESS_THAN       [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! GREATER_THAN    [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 22 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 22 (expr -> expr OR expr .) ]


state 54

    (3) program -> function_call SEMICOLON program .

    $end            reduce using rule 3 (program -> function_call SEMICOLON program .)
    RIGHT_BRACE     reduce using rule 3 (program -> function_call SEMICOLON program .)


state 55

    (24) expr -> LEFT_PAREN expr RIGHT_PAREN .

    PLUS            reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    MINUS           reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    TIMES           reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    DIVIDE          reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_THAN       reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_THAN_EQUAL reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    AND             reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    OR              reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    ID              reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    NOT             reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    NUMBER          reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    STRING          reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    TRUE            reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    FALSE           reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    IF              reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    WHILE           reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    PRINTF          reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    $end            reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    SEMICOLON       reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)
    COMMA           reduce using rule 24 (expr -> LEFT_PAREN expr RIGHT_PAREN .)


state 56

    (30) expr -> IF LEFT_PAREN expr . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> IF LEFT_PAREN expr . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 66
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28


state 57

    (32) expr -> WHILE LEFT_PAREN expr . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 67
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28


state 58

    (33) expr -> PRINTF LEFT_PAREN expr . RIGHT_PAREN SEMICOLON
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 68
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28


state 59

    (7) function_call -> ID LEFT_PAREN . args RIGHT_PAREN
    (10) args -> . expr
    (11) args -> . args COMMA expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    args                           shift and go to state 41
    expr                           shift and go to state 42

state 60

    (1) program -> ID EQUALS expr SEMICOLON . program
    (1) program -> . ID EQUALS expr SEMICOLON program
    (2) program -> . ID EQUALS function_call SEMICOLON program
    (3) program -> . function_call SEMICOLON program
    (4) program -> . expr program
    (5) program -> . lambda
    (6) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (34) lambda -> .

    ID              shift and go to state 2
    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14
    $end            reduce using rule 34 (lambda -> .)
    RIGHT_BRACE     reduce using rule 34 (lambda -> .)

    expr                           shift and go to state 3
    program                        shift and go to state 69
    function_call                  shift and go to state 4
    lambda                         shift and go to state 5

state 61

    (2) program -> ID EQUALS function_call SEMICOLON . program
    (1) program -> . ID EQUALS expr SEMICOLON program
    (2) program -> . ID EQUALS function_call SEMICOLON program
    (3) program -> . function_call SEMICOLON program
    (4) program -> . expr program
    (5) program -> . lambda
    (6) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (34) lambda -> .

    ID              shift and go to state 2
    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14
    $end            reduce using rule 34 (lambda -> .)
    RIGHT_BRACE     reduce using rule 34 (lambda -> .)

    function_call                  shift and go to state 4
    program                        shift and go to state 70
    expr                           shift and go to state 3
    lambda                         shift and go to state 5

state 62

    (6) program -> ID LEFT_PAREN parameters RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE program

    LEFT_BRACE      shift and go to state 71


state 63

    (9) parameters -> parameters COMMA . ID

    ID              shift and go to state 72


state 64

    (7) function_call -> ID LEFT_PAREN args RIGHT_PAREN .

    SEMICOLON       reduce using rule 7 (function_call -> ID LEFT_PAREN args RIGHT_PAREN .)


state 65

    (11) args -> args COMMA . expr
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    ID              shift and go to state 31
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14

    expr                           shift and go to state 73

state 66

    (30) expr -> IF LEFT_PAREN expr RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE
    (31) expr -> IF LEFT_PAREN expr RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE

    LEFT_BRACE      shift and go to state 74


state 67

    (32) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE

    LEFT_BRACE      shift and go to state 75


state 68

    (33) expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 76


state 69

    (1) program -> ID EQUALS expr SEMICOLON program .

    $end            reduce using rule 1 (program -> ID EQUALS expr SEMICOLON program .)
    RIGHT_BRACE     reduce using rule 1 (program -> ID EQUALS expr SEMICOLON program .)


state 70

    (2) program -> ID EQUALS function_call SEMICOLON program .

    $end            reduce using rule 2 (program -> ID EQUALS function_call SEMICOLON program .)
    RIGHT_BRACE     reduce using rule 2 (program -> ID EQUALS function_call SEMICOLON program .)


state 71

    (6) program -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE program
    (1) program -> . ID EQUALS expr SEMICOLON program
    (2) program -> . ID EQUALS function_call SEMICOLON program
    (3) program -> . function_call SEMICOLON program
    (4) program -> . expr program
    (5) program -> . lambda
    (6) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (34) lambda -> .

    ID              shift and go to state 2
    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14
    RIGHT_BRACE     reduce using rule 34 (lambda -> .)

    program                        shift and go to state 77
    expr                           shift and go to state 3
    function_call                  shift and go to state 4
    lambda                         shift and go to state 5

state 72

    (9) parameters -> parameters COMMA ID .

    RIGHT_PAREN     reduce using rule 9 (parameters -> parameters COMMA ID .)
    COMMA           reduce using rule 9 (parameters -> parameters COMMA ID .)


state 73

    (11) args -> args COMMA expr .
    (12) expr -> expr . PLUS expr
    (13) expr -> expr . MINUS expr
    (14) expr -> expr . TIMES expr
    (15) expr -> expr . DIVIDE expr
    (16) expr -> expr . EQUALS_EQUALS expr
    (17) expr -> expr . LESS_THAN expr
    (18) expr -> expr . LESS_THAN_EQUAL expr
    (19) expr -> expr . GREATER_THAN expr
    (20) expr -> expr . GREATER_THAN_EQUAL expr
    (21) expr -> expr . AND expr
    (22) expr -> expr . OR expr

    RIGHT_PAREN     reduce using rule 11 (args -> args COMMA expr .)
    COMMA           reduce using rule 11 (args -> args COMMA expr .)
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    TIMES           shift and go to state 20
    DIVIDE          shift and go to state 21
    EQUALS_EQUALS   shift and go to state 22
    LESS_THAN       shift and go to state 23
    LESS_THAN_EQUAL shift and go to state 24
    GREATER_THAN    shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    AND             shift and go to state 27
    OR              shift and go to state 28


state 74

    (30) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE
    (31) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (1) program -> . ID EQUALS expr SEMICOLON program
    (2) program -> . ID EQUALS function_call SEMICOLON program
    (3) program -> . function_call SEMICOLON program
    (4) program -> . expr program
    (5) program -> . lambda
    (6) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (34) lambda -> .

    ID              shift and go to state 2
    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14
    RIGHT_BRACE     reduce using rule 34 (lambda -> .)

    expr                           shift and go to state 3
    program                        shift and go to state 78
    function_call                  shift and go to state 4
    lambda                         shift and go to state 5

state 75

    (32) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE
    (1) program -> . ID EQUALS expr SEMICOLON program
    (2) program -> . ID EQUALS function_call SEMICOLON program
    (3) program -> . function_call SEMICOLON program
    (4) program -> . expr program
    (5) program -> . lambda
    (6) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (34) lambda -> .

    ID              shift and go to state 2
    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14
    RIGHT_BRACE     reduce using rule 34 (lambda -> .)

    expr                           shift and go to state 3
    program                        shift and go to state 79
    function_call                  shift and go to state 4
    lambda                         shift and go to state 5

state 76

    (33) expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .

    PLUS            reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    MINUS           reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    TIMES           reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    DIVIDE          reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    EQUALS_EQUALS   reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    LESS_THAN       reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    LESS_THAN_EQUAL reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    GREATER_THAN    reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    GREATER_THAN_EQUAL reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    AND             reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    OR              reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    ID              reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    NOT             reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    LEFT_PAREN      reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    NUMBER          reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    STRING          reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    TRUE            reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    FALSE           reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    PRINTF          reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    RIGHT_PAREN     reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    COMMA           reduce using rule 33 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)


state 77

    (6) program -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE program

    RIGHT_BRACE     shift and go to state 80


state 78

    (30) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE
    (31) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 81


state 79

    (32) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 82


state 80

    (6) program -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE . program
    (1) program -> . ID EQUALS expr SEMICOLON program
    (2) program -> . ID EQUALS function_call SEMICOLON program
    (3) program -> . function_call SEMICOLON program
    (4) program -> . expr program
    (5) program -> . lambda
    (6) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (34) lambda -> .

    ID              shift and go to state 2
    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14
    $end            reduce using rule 34 (lambda -> .)
    RIGHT_BRACE     reduce using rule 34 (lambda -> .)

    program                        shift and go to state 83
    expr                           shift and go to state 3
    function_call                  shift and go to state 4
    lambda                         shift and go to state 5

state 81

    (30) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .
    (31) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE . ELSE LEFT_BRACE program RIGHT_BRACE

    PLUS            reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    MINUS           reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    TIMES           reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    DIVIDE          reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    EQUALS_EQUALS   reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN       reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN_EQUAL reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN    reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    AND             reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    OR              reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    ID              reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    NOT             reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    NUMBER          reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    STRING          reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    TRUE            reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    FALSE           reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    IF              reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    WHILE           reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    PRINTF          reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    $end            reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    SEMICOLON       reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    COMMA           reduce using rule 30 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    ELSE            shift and go to state 84


state 82

    (32) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .

    PLUS            reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    MINUS           reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    TIMES           reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    DIVIDE          reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    EQUALS_EQUALS   reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN       reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN_EQUAL reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN    reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    AND             reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    OR              reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    ID              reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    NOT             reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    NUMBER          reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    STRING          reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    TRUE            reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    FALSE           reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    IF              reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    WHILE           reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    PRINTF          reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    $end            reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    SEMICOLON       reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    COMMA           reduce using rule 32 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)


state 83

    (6) program -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program .

    $end            reduce using rule 6 (program -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program .)
    RIGHT_BRACE     reduce using rule 6 (program -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program .)


state 84

    (31) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE . LEFT_BRACE program RIGHT_BRACE

    LEFT_BRACE      shift and go to state 85


state 85

    (31) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE . program RIGHT_BRACE
    (1) program -> . ID EQUALS expr SEMICOLON program
    (2) program -> . ID EQUALS function_call SEMICOLON program
    (3) program -> . function_call SEMICOLON program
    (4) program -> . expr program
    (5) program -> . lambda
    (6) program -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE program
    (7) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (12) expr -> . expr PLUS expr
    (13) expr -> . expr MINUS expr
    (14) expr -> . expr TIMES expr
    (15) expr -> . expr DIVIDE expr
    (16) expr -> . expr EQUALS_EQUALS expr
    (17) expr -> . expr LESS_THAN expr
    (18) expr -> . expr LESS_THAN_EQUAL expr
    (19) expr -> . expr GREATER_THAN expr
    (20) expr -> . expr GREATER_THAN_EQUAL expr
    (21) expr -> . expr AND expr
    (22) expr -> . expr OR expr
    (23) expr -> . NOT expr
    (24) expr -> . LEFT_PAREN expr RIGHT_PAREN
    (25) expr -> . ID
    (26) expr -> . NUMBER
    (27) expr -> . STRING
    (28) expr -> . TRUE
    (29) expr -> . FALSE
    (30) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (31) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (32) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (34) lambda -> .

    ID              shift and go to state 2
    NOT             shift and go to state 7
    LEFT_PAREN      shift and go to state 6
    NUMBER          shift and go to state 8
    STRING          shift and go to state 9
    TRUE            shift and go to state 10
    FALSE           shift and go to state 11
    IF              shift and go to state 12
    WHILE           shift and go to state 13
    PRINTF          shift and go to state 14
    RIGHT_BRACE     reduce using rule 34 (lambda -> .)

    expr                           shift and go to state 3
    program                        shift and go to state 86
    function_call                  shift and go to state 4
    lambda                         shift and go to state 5

state 86

    (31) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 87


state 87

    (31) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .

    PLUS            reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    MINUS           reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    TIMES           reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    DIVIDE          reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    EQUALS_EQUALS   reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN       reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN_EQUAL reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN    reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    AND             reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    OR              reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    ID              reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    NOT             reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    NUMBER          reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    STRING          reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    TRUE            reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    FALSE           reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    IF              reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    WHILE           reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    PRINTF          reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    $end            reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    SEMICOLON       reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    COMMA           reduce using rule 31 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFT_PAREN in state 2 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 32 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 32 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 32 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 32 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 32 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 32 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 32 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 32 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 32 resolved as shift
WARNING: shift/reduce conflict for AND in state 32 resolved as shift
WARNING: shift/reduce conflict for OR in state 32 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 43 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 43 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 43 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 43 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 43 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 43 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 43 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 43 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 43 resolved as shift
WARNING: shift/reduce conflict for AND in state 43 resolved as shift
WARNING: shift/reduce conflict for OR in state 43 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 44 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 44 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 44 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 44 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 44 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 44 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 44 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 44 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 44 resolved as shift
WARNING: shift/reduce conflict for AND in state 44 resolved as shift
WARNING: shift/reduce conflict for OR in state 44 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 45 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 45 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 45 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 45 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 45 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 45 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 45 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 45 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 45 resolved as shift
WARNING: shift/reduce conflict for AND in state 45 resolved as shift
WARNING: shift/reduce conflict for OR in state 45 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 46 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 46 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 46 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 46 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 46 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 46 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 46 resolved as shift
WARNING: shift/reduce conflict for AND in state 46 resolved as shift
WARNING: shift/reduce conflict for OR in state 46 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 47 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 47 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 47 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 47 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 47 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 47 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 47 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 47 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 47 resolved as shift
WARNING: shift/reduce conflict for AND in state 47 resolved as shift
WARNING: shift/reduce conflict for OR in state 47 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 48 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 48 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 48 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 48 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 48 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 48 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 48 resolved as shift
WARNING: shift/reduce conflict for AND in state 48 resolved as shift
WARNING: shift/reduce conflict for OR in state 48 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 49 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 49 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 49 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 49 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 49 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 49 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 49 resolved as shift
WARNING: shift/reduce conflict for AND in state 49 resolved as shift
WARNING: shift/reduce conflict for OR in state 49 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 50 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 50 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 50 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 50 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 50 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 50 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 50 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 50 resolved as shift
WARNING: shift/reduce conflict for AND in state 50 resolved as shift
WARNING: shift/reduce conflict for OR in state 50 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 51 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 51 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 51 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 51 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 51 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 51 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 51 resolved as shift
WARNING: shift/reduce conflict for AND in state 51 resolved as shift
WARNING: shift/reduce conflict for OR in state 51 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 52 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 52 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 52 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 52 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 52 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 52 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 52 resolved as shift
WARNING: shift/reduce conflict for AND in state 52 resolved as shift
WARNING: shift/reduce conflict for OR in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 53 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 53 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 53 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 53 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 53 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 53 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 53 resolved as shift
WARNING: shift/reduce conflict for AND in state 53 resolved as shift
WARNING: shift/reduce conflict for OR in state 53 resolved as shift
WARNING: reduce/reduce conflict in state 39 resolved using rule (parameters -> ID)
WARNING: rejected rule (expr -> ID) in state 39
