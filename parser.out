Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> start
Rule 1     start -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
Rule 2     program -> ID EQUALS expr SEMICOLON program
Rule 3     program -> ID EQUALS function_call SEMICOLON program
Rule 4     program -> function_call SEMICOLON program
Rule 5     program -> expr program
Rule 6     program -> lambda
Rule 7     expr -> term
Rule 8     function_call -> ID LEFT_PAREN args RIGHT_PAREN
Rule 9     parameters -> ID
Rule 10    parameters -> parameters COMMA ID
Rule 11    args -> expr
Rule 12    args -> args COMMA expr
Rule 13    factor -> NUMBER
Rule 14    factor -> ID
Rule 15    factor -> LEFT_PAREN expr RIGHT_PAREN
Rule 16    term -> term TIMES factor
Rule 17    term -> term DIVIDE factor
Rule 18    term -> factor
Rule 19    expr -> expr PLUS term
Rule 20    expr -> expr MINUS term
Rule 21    expr -> expr EQUALS_EQUALS expr
Rule 22    expr -> expr LESS_THAN expr
Rule 23    expr -> expr LESS_THAN_EQUAL expr
Rule 24    expr -> expr GREATER_THAN expr
Rule 25    expr -> expr GREATER_THAN_EQUAL expr
Rule 26    expr -> expr AND expr
Rule 27    expr -> expr OR expr
Rule 28    expr -> NOT expr
Rule 29    expr -> STRING
Rule 30    expr -> TRUE
Rule 31    expr -> FALSE
Rule 32    expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
Rule 33    expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
Rule 34    expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
Rule 35    expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
Rule 36    lambda -> <empty>

Terminals, with rules where they appear

AND                  : 26
COMMA                : 10 12
COMMENT              : 
DIVIDE               : 17
ELSE                 : 33
EQUALS               : 2 3
EQUALS_EQUALS        : 21
FALSE                : 31
GREATER_THAN         : 24
GREATER_THAN_EQUAL   : 25
ID                   : 1 2 3 8 9 10 14
IF                   : 32 33
LEFT_BRACE           : 1 32 33 33 34
LEFT_PAREN           : 1 8 15 32 33 34 35
LESS_THAN            : 22
LESS_THAN_EQUAL      : 23
MINUS                : 20
NOT                  : 28
NUMBER               : 13
OR                   : 27
PLUS                 : 19
PRINTF               : 35
RIGHT_BRACE          : 1 32 33 33 34
RIGHT_PAREN          : 1 8 15 32 33 34 35
SEMICOLON            : 2 3 4 35
STRING               : 29
TIMES                : 16
TRUE                 : 30
WHILE                : 34
error                : 

Nonterminals, with rules where they appear

args                 : 8 12
expr                 : 2 5 11 12 15 19 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 32 33 34 35
factor               : 16 17 18
function_call        : 3 4
lambda               : 6
parameters           : 1 10
program              : 1 2 3 4 5 32 33 33 34
start                : 0
term                 : 7 16 17 19 20

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE

    ID              shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> ID . LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE

    LEFT_PAREN      shift and go to state 3


state 3

    (1) start -> ID LEFT_PAREN . parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (9) parameters -> . ID
    (10) parameters -> . parameters COMMA ID

    ID              shift and go to state 4

    parameters                     shift and go to state 5

state 4

    (9) parameters -> ID .

    RIGHT_PAREN     reduce using rule 9 (parameters -> ID .)
    COMMA           reduce using rule 9 (parameters -> ID .)


state 5

    (1) start -> ID LEFT_PAREN parameters . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (10) parameters -> parameters . COMMA ID

    RIGHT_PAREN     shift and go to state 6
    COMMA           shift and go to state 7


state 6

    (1) start -> ID LEFT_PAREN parameters RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE

    LEFT_BRACE      shift and go to state 8


state 7

    (10) parameters -> parameters COMMA . ID

    ID              shift and go to state 9


state 8

    (1) start -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (8) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (36) lambda -> .
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    ID              shift and go to state 10
    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    RIGHT_BRACE     reduce using rule 36 (lambda -> .)
    NUMBER          shift and go to state 25
    LEFT_PAREN      shift and go to state 11

    program                        shift and go to state 12
    expr                           shift and go to state 13
    function_call                  shift and go to state 14
    lambda                         shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 9

    (10) parameters -> parameters COMMA ID .

    RIGHT_PAREN     reduce using rule 10 (parameters -> parameters COMMA ID .)
    COMMA           reduce using rule 10 (parameters -> parameters COMMA ID .)


state 10

    (2) program -> ID . EQUALS expr SEMICOLON program
    (3) program -> ID . EQUALS function_call SEMICOLON program
    (8) function_call -> ID . LEFT_PAREN args RIGHT_PAREN
    (14) factor -> ID .

  ! shift/reduce conflict for LEFT_PAREN resolved as shift
    EQUALS          shift and go to state 26
    LEFT_PAREN      shift and go to state 27
    TIMES           reduce using rule 14 (factor -> ID .)
    DIVIDE          reduce using rule 14 (factor -> ID .)
    PLUS            reduce using rule 14 (factor -> ID .)
    MINUS           reduce using rule 14 (factor -> ID .)
    EQUALS_EQUALS   reduce using rule 14 (factor -> ID .)
    LESS_THAN       reduce using rule 14 (factor -> ID .)
    LESS_THAN_EQUAL reduce using rule 14 (factor -> ID .)
    GREATER_THAN    reduce using rule 14 (factor -> ID .)
    GREATER_THAN_EQUAL reduce using rule 14 (factor -> ID .)
    AND             reduce using rule 14 (factor -> ID .)
    OR              reduce using rule 14 (factor -> ID .)
    ID              reduce using rule 14 (factor -> ID .)
    NOT             reduce using rule 14 (factor -> ID .)
    STRING          reduce using rule 14 (factor -> ID .)
    TRUE            reduce using rule 14 (factor -> ID .)
    FALSE           reduce using rule 14 (factor -> ID .)
    IF              reduce using rule 14 (factor -> ID .)
    WHILE           reduce using rule 14 (factor -> ID .)
    PRINTF          reduce using rule 14 (factor -> ID .)
    NUMBER          reduce using rule 14 (factor -> ID .)
    RIGHT_BRACE     reduce using rule 14 (factor -> ID .)

  ! LEFT_PAREN      [ reduce using rule 14 (factor -> ID .) ]


state 11

    (15) factor -> LEFT_PAREN . expr RIGHT_PAREN
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 28
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 12

    (1) start -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 30


state 13

    (5) program -> expr . program
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (8) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (36) lambda -> .
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40
    ID              shift and go to state 10
    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    RIGHT_BRACE     reduce using rule 36 (lambda -> .)
    NUMBER          shift and go to state 25
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 13
    program                        shift and go to state 31
    term                           shift and go to state 16
    function_call                  shift and go to state 14
    lambda                         shift and go to state 15
    factor                         shift and go to state 24

state 14

    (4) program -> function_call . SEMICOLON program

    SEMICOLON       shift and go to state 41


state 15

    (6) program -> lambda .

    RIGHT_BRACE     reduce using rule 6 (program -> lambda .)


state 16

    (7) expr -> term .
    (16) term -> term . TIMES factor
    (17) term -> term . DIVIDE factor

    PLUS            reduce using rule 7 (expr -> term .)
    MINUS           reduce using rule 7 (expr -> term .)
    EQUALS_EQUALS   reduce using rule 7 (expr -> term .)
    LESS_THAN       reduce using rule 7 (expr -> term .)
    LESS_THAN_EQUAL reduce using rule 7 (expr -> term .)
    GREATER_THAN    reduce using rule 7 (expr -> term .)
    GREATER_THAN_EQUAL reduce using rule 7 (expr -> term .)
    AND             reduce using rule 7 (expr -> term .)
    OR              reduce using rule 7 (expr -> term .)
    ID              reduce using rule 7 (expr -> term .)
    NOT             reduce using rule 7 (expr -> term .)
    STRING          reduce using rule 7 (expr -> term .)
    TRUE            reduce using rule 7 (expr -> term .)
    FALSE           reduce using rule 7 (expr -> term .)
    IF              reduce using rule 7 (expr -> term .)
    WHILE           reduce using rule 7 (expr -> term .)
    PRINTF          reduce using rule 7 (expr -> term .)
    NUMBER          reduce using rule 7 (expr -> term .)
    LEFT_PAREN      reduce using rule 7 (expr -> term .)
    RIGHT_BRACE     reduce using rule 7 (expr -> term .)
    RIGHT_PAREN     reduce using rule 7 (expr -> term .)
    SEMICOLON       reduce using rule 7 (expr -> term .)
    COMMA           reduce using rule 7 (expr -> term .)
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43


state 17

    (28) expr -> NOT . expr
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 44
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 18

    (29) expr -> STRING .

    PLUS            reduce using rule 29 (expr -> STRING .)
    MINUS           reduce using rule 29 (expr -> STRING .)
    EQUALS_EQUALS   reduce using rule 29 (expr -> STRING .)
    LESS_THAN       reduce using rule 29 (expr -> STRING .)
    LESS_THAN_EQUAL reduce using rule 29 (expr -> STRING .)
    GREATER_THAN    reduce using rule 29 (expr -> STRING .)
    GREATER_THAN_EQUAL reduce using rule 29 (expr -> STRING .)
    AND             reduce using rule 29 (expr -> STRING .)
    OR              reduce using rule 29 (expr -> STRING .)
    ID              reduce using rule 29 (expr -> STRING .)
    NOT             reduce using rule 29 (expr -> STRING .)
    STRING          reduce using rule 29 (expr -> STRING .)
    TRUE            reduce using rule 29 (expr -> STRING .)
    FALSE           reduce using rule 29 (expr -> STRING .)
    IF              reduce using rule 29 (expr -> STRING .)
    WHILE           reduce using rule 29 (expr -> STRING .)
    PRINTF          reduce using rule 29 (expr -> STRING .)
    NUMBER          reduce using rule 29 (expr -> STRING .)
    LEFT_PAREN      reduce using rule 29 (expr -> STRING .)
    RIGHT_BRACE     reduce using rule 29 (expr -> STRING .)
    RIGHT_PAREN     reduce using rule 29 (expr -> STRING .)
    SEMICOLON       reduce using rule 29 (expr -> STRING .)
    COMMA           reduce using rule 29 (expr -> STRING .)


state 19

    (30) expr -> TRUE .

    PLUS            reduce using rule 30 (expr -> TRUE .)
    MINUS           reduce using rule 30 (expr -> TRUE .)
    EQUALS_EQUALS   reduce using rule 30 (expr -> TRUE .)
    LESS_THAN       reduce using rule 30 (expr -> TRUE .)
    LESS_THAN_EQUAL reduce using rule 30 (expr -> TRUE .)
    GREATER_THAN    reduce using rule 30 (expr -> TRUE .)
    GREATER_THAN_EQUAL reduce using rule 30 (expr -> TRUE .)
    AND             reduce using rule 30 (expr -> TRUE .)
    OR              reduce using rule 30 (expr -> TRUE .)
    ID              reduce using rule 30 (expr -> TRUE .)
    NOT             reduce using rule 30 (expr -> TRUE .)
    STRING          reduce using rule 30 (expr -> TRUE .)
    TRUE            reduce using rule 30 (expr -> TRUE .)
    FALSE           reduce using rule 30 (expr -> TRUE .)
    IF              reduce using rule 30 (expr -> TRUE .)
    WHILE           reduce using rule 30 (expr -> TRUE .)
    PRINTF          reduce using rule 30 (expr -> TRUE .)
    NUMBER          reduce using rule 30 (expr -> TRUE .)
    LEFT_PAREN      reduce using rule 30 (expr -> TRUE .)
    RIGHT_BRACE     reduce using rule 30 (expr -> TRUE .)
    RIGHT_PAREN     reduce using rule 30 (expr -> TRUE .)
    SEMICOLON       reduce using rule 30 (expr -> TRUE .)
    COMMA           reduce using rule 30 (expr -> TRUE .)


state 20

    (31) expr -> FALSE .

    PLUS            reduce using rule 31 (expr -> FALSE .)
    MINUS           reduce using rule 31 (expr -> FALSE .)
    EQUALS_EQUALS   reduce using rule 31 (expr -> FALSE .)
    LESS_THAN       reduce using rule 31 (expr -> FALSE .)
    LESS_THAN_EQUAL reduce using rule 31 (expr -> FALSE .)
    GREATER_THAN    reduce using rule 31 (expr -> FALSE .)
    GREATER_THAN_EQUAL reduce using rule 31 (expr -> FALSE .)
    AND             reduce using rule 31 (expr -> FALSE .)
    OR              reduce using rule 31 (expr -> FALSE .)
    ID              reduce using rule 31 (expr -> FALSE .)
    NOT             reduce using rule 31 (expr -> FALSE .)
    STRING          reduce using rule 31 (expr -> FALSE .)
    TRUE            reduce using rule 31 (expr -> FALSE .)
    FALSE           reduce using rule 31 (expr -> FALSE .)
    IF              reduce using rule 31 (expr -> FALSE .)
    WHILE           reduce using rule 31 (expr -> FALSE .)
    PRINTF          reduce using rule 31 (expr -> FALSE .)
    NUMBER          reduce using rule 31 (expr -> FALSE .)
    LEFT_PAREN      reduce using rule 31 (expr -> FALSE .)
    RIGHT_BRACE     reduce using rule 31 (expr -> FALSE .)
    RIGHT_PAREN     reduce using rule 31 (expr -> FALSE .)
    SEMICOLON       reduce using rule 31 (expr -> FALSE .)
    COMMA           reduce using rule 31 (expr -> FALSE .)


state 21

    (32) expr -> IF . LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> IF . LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE

    LEFT_PAREN      shift and go to state 45


state 22

    (34) expr -> WHILE . LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE

    LEFT_PAREN      shift and go to state 46


state 23

    (35) expr -> PRINTF . LEFT_PAREN expr RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 47


state 24

    (18) term -> factor .

    TIMES           reduce using rule 18 (term -> factor .)
    DIVIDE          reduce using rule 18 (term -> factor .)
    PLUS            reduce using rule 18 (term -> factor .)
    MINUS           reduce using rule 18 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 18 (term -> factor .)
    LESS_THAN       reduce using rule 18 (term -> factor .)
    LESS_THAN_EQUAL reduce using rule 18 (term -> factor .)
    GREATER_THAN    reduce using rule 18 (term -> factor .)
    GREATER_THAN_EQUAL reduce using rule 18 (term -> factor .)
    AND             reduce using rule 18 (term -> factor .)
    OR              reduce using rule 18 (term -> factor .)
    ID              reduce using rule 18 (term -> factor .)
    NOT             reduce using rule 18 (term -> factor .)
    STRING          reduce using rule 18 (term -> factor .)
    TRUE            reduce using rule 18 (term -> factor .)
    FALSE           reduce using rule 18 (term -> factor .)
    IF              reduce using rule 18 (term -> factor .)
    WHILE           reduce using rule 18 (term -> factor .)
    PRINTF          reduce using rule 18 (term -> factor .)
    NUMBER          reduce using rule 18 (term -> factor .)
    LEFT_PAREN      reduce using rule 18 (term -> factor .)
    RIGHT_BRACE     reduce using rule 18 (term -> factor .)
    RIGHT_PAREN     reduce using rule 18 (term -> factor .)
    SEMICOLON       reduce using rule 18 (term -> factor .)
    COMMA           reduce using rule 18 (term -> factor .)


state 25

    (13) factor -> NUMBER .

    TIMES           reduce using rule 13 (factor -> NUMBER .)
    DIVIDE          reduce using rule 13 (factor -> NUMBER .)
    PLUS            reduce using rule 13 (factor -> NUMBER .)
    MINUS           reduce using rule 13 (factor -> NUMBER .)
    EQUALS_EQUALS   reduce using rule 13 (factor -> NUMBER .)
    LESS_THAN       reduce using rule 13 (factor -> NUMBER .)
    LESS_THAN_EQUAL reduce using rule 13 (factor -> NUMBER .)
    GREATER_THAN    reduce using rule 13 (factor -> NUMBER .)
    GREATER_THAN_EQUAL reduce using rule 13 (factor -> NUMBER .)
    AND             reduce using rule 13 (factor -> NUMBER .)
    OR              reduce using rule 13 (factor -> NUMBER .)
    ID              reduce using rule 13 (factor -> NUMBER .)
    NOT             reduce using rule 13 (factor -> NUMBER .)
    STRING          reduce using rule 13 (factor -> NUMBER .)
    TRUE            reduce using rule 13 (factor -> NUMBER .)
    FALSE           reduce using rule 13 (factor -> NUMBER .)
    IF              reduce using rule 13 (factor -> NUMBER .)
    WHILE           reduce using rule 13 (factor -> NUMBER .)
    PRINTF          reduce using rule 13 (factor -> NUMBER .)
    NUMBER          reduce using rule 13 (factor -> NUMBER .)
    LEFT_PAREN      reduce using rule 13 (factor -> NUMBER .)
    RIGHT_BRACE     reduce using rule 13 (factor -> NUMBER .)
    RIGHT_PAREN     reduce using rule 13 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 13 (factor -> NUMBER .)
    COMMA           reduce using rule 13 (factor -> NUMBER .)


state 26

    (2) program -> ID EQUALS . expr SEMICOLON program
    (3) program -> ID EQUALS . function_call SEMICOLON program
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (8) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    ID              shift and go to state 48
    NUMBER          shift and go to state 25
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 49
    function_call                  shift and go to state 50
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 27

    (8) function_call -> ID LEFT_PAREN . args RIGHT_PAREN
    (11) args -> . expr
    (12) args -> . args COMMA expr
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    args                           shift and go to state 51
    expr                           shift and go to state 52
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 28

    (15) factor -> LEFT_PAREN expr . RIGHT_PAREN
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 53
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 29

    (14) factor -> ID .

    TIMES           reduce using rule 14 (factor -> ID .)
    DIVIDE          reduce using rule 14 (factor -> ID .)
    RIGHT_PAREN     reduce using rule 14 (factor -> ID .)
    PLUS            reduce using rule 14 (factor -> ID .)
    MINUS           reduce using rule 14 (factor -> ID .)
    EQUALS_EQUALS   reduce using rule 14 (factor -> ID .)
    LESS_THAN       reduce using rule 14 (factor -> ID .)
    LESS_THAN_EQUAL reduce using rule 14 (factor -> ID .)
    GREATER_THAN    reduce using rule 14 (factor -> ID .)
    GREATER_THAN_EQUAL reduce using rule 14 (factor -> ID .)
    AND             reduce using rule 14 (factor -> ID .)
    OR              reduce using rule 14 (factor -> ID .)
    ID              reduce using rule 14 (factor -> ID .)
    NOT             reduce using rule 14 (factor -> ID .)
    STRING          reduce using rule 14 (factor -> ID .)
    TRUE            reduce using rule 14 (factor -> ID .)
    FALSE           reduce using rule 14 (factor -> ID .)
    IF              reduce using rule 14 (factor -> ID .)
    WHILE           reduce using rule 14 (factor -> ID .)
    PRINTF          reduce using rule 14 (factor -> ID .)
    NUMBER          reduce using rule 14 (factor -> ID .)
    LEFT_PAREN      reduce using rule 14 (factor -> ID .)
    RIGHT_BRACE     reduce using rule 14 (factor -> ID .)
    SEMICOLON       reduce using rule 14 (factor -> ID .)
    COMMA           reduce using rule 14 (factor -> ID .)


state 30

    (1) start -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .

    $end            reduce using rule 1 (start -> ID LEFT_PAREN parameters RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)


state 31

    (5) program -> expr program .

    RIGHT_BRACE     reduce using rule 5 (program -> expr program .)


state 32

    (19) expr -> expr PLUS . term
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    term                           shift and go to state 54
    factor                         shift and go to state 24

state 33

    (20) expr -> expr MINUS . term
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    term                           shift and go to state 55
    factor                         shift and go to state 24

state 34

    (21) expr -> expr EQUALS_EQUALS . expr
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 56
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 35

    (22) expr -> expr LESS_THAN . expr
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 57
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 36

    (23) expr -> expr LESS_THAN_EQUAL . expr
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 58
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 37

    (24) expr -> expr GREATER_THAN . expr
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 59
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 38

    (25) expr -> expr GREATER_THAN_EQUAL . expr
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 60
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 39

    (26) expr -> expr AND . expr
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 61
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 40

    (27) expr -> expr OR . expr
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 62
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 41

    (4) program -> function_call SEMICOLON . program
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (8) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (36) lambda -> .
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    ID              shift and go to state 10
    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    RIGHT_BRACE     reduce using rule 36 (lambda -> .)
    NUMBER          shift and go to state 25
    LEFT_PAREN      shift and go to state 11

    function_call                  shift and go to state 14
    program                        shift and go to state 63
    expr                           shift and go to state 13
    lambda                         shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 42

    (16) term -> term TIMES . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    factor                         shift and go to state 64

state 43

    (17) term -> term DIVIDE . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    factor                         shift and go to state 65

state 44

    (28) expr -> NOT expr .
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 28 (expr -> NOT expr .)
    NOT             reduce using rule 28 (expr -> NOT expr .)
    STRING          reduce using rule 28 (expr -> NOT expr .)
    TRUE            reduce using rule 28 (expr -> NOT expr .)
    FALSE           reduce using rule 28 (expr -> NOT expr .)
    IF              reduce using rule 28 (expr -> NOT expr .)
    WHILE           reduce using rule 28 (expr -> NOT expr .)
    PRINTF          reduce using rule 28 (expr -> NOT expr .)
    NUMBER          reduce using rule 28 (expr -> NOT expr .)
    LEFT_PAREN      reduce using rule 28 (expr -> NOT expr .)
    RIGHT_BRACE     reduce using rule 28 (expr -> NOT expr .)
    RIGHT_PAREN     reduce using rule 28 (expr -> NOT expr .)
    SEMICOLON       reduce using rule 28 (expr -> NOT expr .)
    COMMA           reduce using rule 28 (expr -> NOT expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! PLUS            [ reduce using rule 28 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> NOT expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 28 (expr -> NOT expr .) ]
  ! LESS_THAN       [ reduce using rule 28 (expr -> NOT expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 28 (expr -> NOT expr .) ]
  ! GREATER_THAN    [ reduce using rule 28 (expr -> NOT expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 28 (expr -> NOT expr .) ]
  ! AND             [ reduce using rule 28 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 28 (expr -> NOT expr .) ]


state 45

    (32) expr -> IF LEFT_PAREN . expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> IF LEFT_PAREN . expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 66
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 46

    (34) expr -> WHILE LEFT_PAREN . expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 67
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 47

    (35) expr -> PRINTF LEFT_PAREN . expr RIGHT_PAREN SEMICOLON
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 68
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 48

    (8) function_call -> ID . LEFT_PAREN args RIGHT_PAREN
    (14) factor -> ID .

    LEFT_PAREN      shift and go to state 27
    TIMES           reduce using rule 14 (factor -> ID .)
    DIVIDE          reduce using rule 14 (factor -> ID .)
    SEMICOLON       reduce using rule 14 (factor -> ID .)
    PLUS            reduce using rule 14 (factor -> ID .)
    MINUS           reduce using rule 14 (factor -> ID .)
    EQUALS_EQUALS   reduce using rule 14 (factor -> ID .)
    LESS_THAN       reduce using rule 14 (factor -> ID .)
    LESS_THAN_EQUAL reduce using rule 14 (factor -> ID .)
    GREATER_THAN    reduce using rule 14 (factor -> ID .)
    GREATER_THAN_EQUAL reduce using rule 14 (factor -> ID .)
    AND             reduce using rule 14 (factor -> ID .)
    OR              reduce using rule 14 (factor -> ID .)


state 49

    (2) program -> ID EQUALS expr . SEMICOLON program
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr

    SEMICOLON       shift and go to state 69
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 50

    (3) program -> ID EQUALS function_call . SEMICOLON program

    SEMICOLON       shift and go to state 70


state 51

    (8) function_call -> ID LEFT_PAREN args . RIGHT_PAREN
    (12) args -> args . COMMA expr

    RIGHT_PAREN     shift and go to state 71
    COMMA           shift and go to state 72


state 52

    (11) args -> expr .
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr

    RIGHT_PAREN     reduce using rule 11 (args -> expr .)
    COMMA           reduce using rule 11 (args -> expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 53

    (15) factor -> LEFT_PAREN expr RIGHT_PAREN .

    TIMES           reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    DIVIDE          reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    PLUS            reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    MINUS           reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_THAN       reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    LESS_THAN_EQUAL reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    GREATER_THAN_EQUAL reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    AND             reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    OR              reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    ID              reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    NOT             reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    STRING          reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    TRUE            reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    FALSE           reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    IF              reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    WHILE           reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    PRINTF          reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    NUMBER          reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    LEFT_PAREN      reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    SEMICOLON       reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)
    COMMA           reduce using rule 15 (factor -> LEFT_PAREN expr RIGHT_PAREN .)


state 54

    (19) expr -> expr PLUS term .
    (16) term -> term . TIMES factor
    (17) term -> term . DIVIDE factor

    PLUS            reduce using rule 19 (expr -> expr PLUS term .)
    MINUS           reduce using rule 19 (expr -> expr PLUS term .)
    EQUALS_EQUALS   reduce using rule 19 (expr -> expr PLUS term .)
    LESS_THAN       reduce using rule 19 (expr -> expr PLUS term .)
    LESS_THAN_EQUAL reduce using rule 19 (expr -> expr PLUS term .)
    GREATER_THAN    reduce using rule 19 (expr -> expr PLUS term .)
    GREATER_THAN_EQUAL reduce using rule 19 (expr -> expr PLUS term .)
    AND             reduce using rule 19 (expr -> expr PLUS term .)
    OR              reduce using rule 19 (expr -> expr PLUS term .)
    ID              reduce using rule 19 (expr -> expr PLUS term .)
    NOT             reduce using rule 19 (expr -> expr PLUS term .)
    STRING          reduce using rule 19 (expr -> expr PLUS term .)
    TRUE            reduce using rule 19 (expr -> expr PLUS term .)
    FALSE           reduce using rule 19 (expr -> expr PLUS term .)
    IF              reduce using rule 19 (expr -> expr PLUS term .)
    WHILE           reduce using rule 19 (expr -> expr PLUS term .)
    PRINTF          reduce using rule 19 (expr -> expr PLUS term .)
    NUMBER          reduce using rule 19 (expr -> expr PLUS term .)
    LEFT_PAREN      reduce using rule 19 (expr -> expr PLUS term .)
    RIGHT_BRACE     reduce using rule 19 (expr -> expr PLUS term .)
    RIGHT_PAREN     reduce using rule 19 (expr -> expr PLUS term .)
    SEMICOLON       reduce using rule 19 (expr -> expr PLUS term .)
    COMMA           reduce using rule 19 (expr -> expr PLUS term .)
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43


state 55

    (20) expr -> expr MINUS term .
    (16) term -> term . TIMES factor
    (17) term -> term . DIVIDE factor

    PLUS            reduce using rule 20 (expr -> expr MINUS term .)
    MINUS           reduce using rule 20 (expr -> expr MINUS term .)
    EQUALS_EQUALS   reduce using rule 20 (expr -> expr MINUS term .)
    LESS_THAN       reduce using rule 20 (expr -> expr MINUS term .)
    LESS_THAN_EQUAL reduce using rule 20 (expr -> expr MINUS term .)
    GREATER_THAN    reduce using rule 20 (expr -> expr MINUS term .)
    GREATER_THAN_EQUAL reduce using rule 20 (expr -> expr MINUS term .)
    AND             reduce using rule 20 (expr -> expr MINUS term .)
    OR              reduce using rule 20 (expr -> expr MINUS term .)
    ID              reduce using rule 20 (expr -> expr MINUS term .)
    NOT             reduce using rule 20 (expr -> expr MINUS term .)
    STRING          reduce using rule 20 (expr -> expr MINUS term .)
    TRUE            reduce using rule 20 (expr -> expr MINUS term .)
    FALSE           reduce using rule 20 (expr -> expr MINUS term .)
    IF              reduce using rule 20 (expr -> expr MINUS term .)
    WHILE           reduce using rule 20 (expr -> expr MINUS term .)
    PRINTF          reduce using rule 20 (expr -> expr MINUS term .)
    NUMBER          reduce using rule 20 (expr -> expr MINUS term .)
    LEFT_PAREN      reduce using rule 20 (expr -> expr MINUS term .)
    RIGHT_BRACE     reduce using rule 20 (expr -> expr MINUS term .)
    RIGHT_PAREN     reduce using rule 20 (expr -> expr MINUS term .)
    SEMICOLON       reduce using rule 20 (expr -> expr MINUS term .)
    COMMA           reduce using rule 20 (expr -> expr MINUS term .)
    TIMES           shift and go to state 42
    DIVIDE          shift and go to state 43


state 56

    (21) expr -> expr EQUALS_EQUALS expr .
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .)
    NOT             reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .)
    STRING          reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .)
    TRUE            reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .)
    FALSE           reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .)
    IF              reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .)
    WHILE           reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .)
    PRINTF          reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .)
    NUMBER          reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .)
    LEFT_PAREN      reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .)
    RIGHT_BRACE     reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .)
    RIGHT_PAREN     reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .)
    SEMICOLON       reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .)
    COMMA           reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! PLUS            [ reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .) ]
  ! MINUS           [ reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .) ]
  ! LESS_THAN       [ reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .) ]
  ! GREATER_THAN    [ reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .) ]
  ! AND             [ reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .) ]
  ! OR              [ reduce using rule 21 (expr -> expr EQUALS_EQUALS expr .) ]


state 57

    (22) expr -> expr LESS_THAN expr .
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 22 (expr -> expr LESS_THAN expr .)
    NOT             reduce using rule 22 (expr -> expr LESS_THAN expr .)
    STRING          reduce using rule 22 (expr -> expr LESS_THAN expr .)
    TRUE            reduce using rule 22 (expr -> expr LESS_THAN expr .)
    FALSE           reduce using rule 22 (expr -> expr LESS_THAN expr .)
    IF              reduce using rule 22 (expr -> expr LESS_THAN expr .)
    WHILE           reduce using rule 22 (expr -> expr LESS_THAN expr .)
    PRINTF          reduce using rule 22 (expr -> expr LESS_THAN expr .)
    NUMBER          reduce using rule 22 (expr -> expr LESS_THAN expr .)
    LEFT_PAREN      reduce using rule 22 (expr -> expr LESS_THAN expr .)
    RIGHT_BRACE     reduce using rule 22 (expr -> expr LESS_THAN expr .)
    RIGHT_PAREN     reduce using rule 22 (expr -> expr LESS_THAN expr .)
    SEMICOLON       reduce using rule 22 (expr -> expr LESS_THAN expr .)
    COMMA           reduce using rule 22 (expr -> expr LESS_THAN expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! PLUS            [ reduce using rule 22 (expr -> expr LESS_THAN expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr LESS_THAN expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 22 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 22 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 22 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 22 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 22 (expr -> expr LESS_THAN expr .) ]
  ! AND             [ reduce using rule 22 (expr -> expr LESS_THAN expr .) ]
  ! OR              [ reduce using rule 22 (expr -> expr LESS_THAN expr .) ]


state 58

    (23) expr -> expr LESS_THAN_EQUAL expr .
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .)
    NOT             reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .)
    STRING          reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .)
    TRUE            reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .)
    FALSE           reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .)
    IF              reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .)
    WHILE           reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .)
    PRINTF          reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .)
    NUMBER          reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .)
    LEFT_PAREN      reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .)
    SEMICOLON       reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .)
    COMMA           reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! PLUS            [ reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! AND             [ reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .) ]
  ! OR              [ reduce using rule 23 (expr -> expr LESS_THAN_EQUAL expr .) ]


state 59

    (24) expr -> expr GREATER_THAN expr .
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 24 (expr -> expr GREATER_THAN expr .)
    NOT             reduce using rule 24 (expr -> expr GREATER_THAN expr .)
    STRING          reduce using rule 24 (expr -> expr GREATER_THAN expr .)
    TRUE            reduce using rule 24 (expr -> expr GREATER_THAN expr .)
    FALSE           reduce using rule 24 (expr -> expr GREATER_THAN expr .)
    IF              reduce using rule 24 (expr -> expr GREATER_THAN expr .)
    WHILE           reduce using rule 24 (expr -> expr GREATER_THAN expr .)
    PRINTF          reduce using rule 24 (expr -> expr GREATER_THAN expr .)
    NUMBER          reduce using rule 24 (expr -> expr GREATER_THAN expr .)
    LEFT_PAREN      reduce using rule 24 (expr -> expr GREATER_THAN expr .)
    RIGHT_BRACE     reduce using rule 24 (expr -> expr GREATER_THAN expr .)
    RIGHT_PAREN     reduce using rule 24 (expr -> expr GREATER_THAN expr .)
    SEMICOLON       reduce using rule 24 (expr -> expr GREATER_THAN expr .)
    COMMA           reduce using rule 24 (expr -> expr GREATER_THAN expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! PLUS            [ reduce using rule 24 (expr -> expr GREATER_THAN expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr GREATER_THAN expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 24 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 24 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 24 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 24 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 24 (expr -> expr GREATER_THAN expr .) ]
  ! AND             [ reduce using rule 24 (expr -> expr GREATER_THAN expr .) ]
  ! OR              [ reduce using rule 24 (expr -> expr GREATER_THAN expr .) ]


state 60

    (25) expr -> expr GREATER_THAN_EQUAL expr .
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    NOT             reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    STRING          reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    TRUE            reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    FALSE           reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    IF              reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    WHILE           reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    PRINTF          reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    NUMBER          reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    LEFT_PAREN      reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    RIGHT_BRACE     reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    RIGHT_PAREN     reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    SEMICOLON       reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    COMMA           reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! PLUS            [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! AND             [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]
  ! OR              [ reduce using rule 25 (expr -> expr GREATER_THAN_EQUAL expr .) ]


state 61

    (26) expr -> expr AND expr .
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 26 (expr -> expr AND expr .)
    NOT             reduce using rule 26 (expr -> expr AND expr .)
    STRING          reduce using rule 26 (expr -> expr AND expr .)
    TRUE            reduce using rule 26 (expr -> expr AND expr .)
    FALSE           reduce using rule 26 (expr -> expr AND expr .)
    IF              reduce using rule 26 (expr -> expr AND expr .)
    WHILE           reduce using rule 26 (expr -> expr AND expr .)
    PRINTF          reduce using rule 26 (expr -> expr AND expr .)
    NUMBER          reduce using rule 26 (expr -> expr AND expr .)
    LEFT_PAREN      reduce using rule 26 (expr -> expr AND expr .)
    RIGHT_BRACE     reduce using rule 26 (expr -> expr AND expr .)
    RIGHT_PAREN     reduce using rule 26 (expr -> expr AND expr .)
    SEMICOLON       reduce using rule 26 (expr -> expr AND expr .)
    COMMA           reduce using rule 26 (expr -> expr AND expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! PLUS            [ reduce using rule 26 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr AND expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 26 (expr -> expr AND expr .) ]
  ! LESS_THAN       [ reduce using rule 26 (expr -> expr AND expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 26 (expr -> expr AND expr .) ]
  ! GREATER_THAN    [ reduce using rule 26 (expr -> expr AND expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 26 (expr -> expr AND expr .) ]
  ! AND             [ reduce using rule 26 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 26 (expr -> expr AND expr .) ]


state 62

    (27) expr -> expr OR expr .
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN_EQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 27 (expr -> expr OR expr .)
    NOT             reduce using rule 27 (expr -> expr OR expr .)
    STRING          reduce using rule 27 (expr -> expr OR expr .)
    TRUE            reduce using rule 27 (expr -> expr OR expr .)
    FALSE           reduce using rule 27 (expr -> expr OR expr .)
    IF              reduce using rule 27 (expr -> expr OR expr .)
    WHILE           reduce using rule 27 (expr -> expr OR expr .)
    PRINTF          reduce using rule 27 (expr -> expr OR expr .)
    NUMBER          reduce using rule 27 (expr -> expr OR expr .)
    LEFT_PAREN      reduce using rule 27 (expr -> expr OR expr .)
    RIGHT_BRACE     reduce using rule 27 (expr -> expr OR expr .)
    RIGHT_PAREN     reduce using rule 27 (expr -> expr OR expr .)
    SEMICOLON       reduce using rule 27 (expr -> expr OR expr .)
    COMMA           reduce using rule 27 (expr -> expr OR expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40

  ! PLUS            [ reduce using rule 27 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 27 (expr -> expr OR expr .) ]
  ! EQUALS_EQUALS   [ reduce using rule 27 (expr -> expr OR expr .) ]
  ! LESS_THAN       [ reduce using rule 27 (expr -> expr OR expr .) ]
  ! LESS_THAN_EQUAL [ reduce using rule 27 (expr -> expr OR expr .) ]
  ! GREATER_THAN    [ reduce using rule 27 (expr -> expr OR expr .) ]
  ! GREATER_THAN_EQUAL [ reduce using rule 27 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 27 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 27 (expr -> expr OR expr .) ]


state 63

    (4) program -> function_call SEMICOLON program .

    RIGHT_BRACE     reduce using rule 4 (program -> function_call SEMICOLON program .)


state 64

    (16) term -> term TIMES factor .

    TIMES           reduce using rule 16 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 16 (term -> term TIMES factor .)
    PLUS            reduce using rule 16 (term -> term TIMES factor .)
    MINUS           reduce using rule 16 (term -> term TIMES factor .)
    EQUALS_EQUALS   reduce using rule 16 (term -> term TIMES factor .)
    LESS_THAN       reduce using rule 16 (term -> term TIMES factor .)
    LESS_THAN_EQUAL reduce using rule 16 (term -> term TIMES factor .)
    GREATER_THAN    reduce using rule 16 (term -> term TIMES factor .)
    GREATER_THAN_EQUAL reduce using rule 16 (term -> term TIMES factor .)
    AND             reduce using rule 16 (term -> term TIMES factor .)
    OR              reduce using rule 16 (term -> term TIMES factor .)
    ID              reduce using rule 16 (term -> term TIMES factor .)
    NOT             reduce using rule 16 (term -> term TIMES factor .)
    STRING          reduce using rule 16 (term -> term TIMES factor .)
    TRUE            reduce using rule 16 (term -> term TIMES factor .)
    FALSE           reduce using rule 16 (term -> term TIMES factor .)
    IF              reduce using rule 16 (term -> term TIMES factor .)
    WHILE           reduce using rule 16 (term -> term TIMES factor .)
    PRINTF          reduce using rule 16 (term -> term TIMES factor .)
    NUMBER          reduce using rule 16 (term -> term TIMES factor .)
    LEFT_PAREN      reduce using rule 16 (term -> term TIMES factor .)
    RIGHT_BRACE     reduce using rule 16 (term -> term TIMES factor .)
    RIGHT_PAREN     reduce using rule 16 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 16 (term -> term TIMES factor .)
    COMMA           reduce using rule 16 (term -> term TIMES factor .)


state 65

    (17) term -> term DIVIDE factor .

    TIMES           reduce using rule 17 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 17 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 17 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 17 (term -> term DIVIDE factor .)
    EQUALS_EQUALS   reduce using rule 17 (term -> term DIVIDE factor .)
    LESS_THAN       reduce using rule 17 (term -> term DIVIDE factor .)
    LESS_THAN_EQUAL reduce using rule 17 (term -> term DIVIDE factor .)
    GREATER_THAN    reduce using rule 17 (term -> term DIVIDE factor .)
    GREATER_THAN_EQUAL reduce using rule 17 (term -> term DIVIDE factor .)
    AND             reduce using rule 17 (term -> term DIVIDE factor .)
    OR              reduce using rule 17 (term -> term DIVIDE factor .)
    ID              reduce using rule 17 (term -> term DIVIDE factor .)
    NOT             reduce using rule 17 (term -> term DIVIDE factor .)
    STRING          reduce using rule 17 (term -> term DIVIDE factor .)
    TRUE            reduce using rule 17 (term -> term DIVIDE factor .)
    FALSE           reduce using rule 17 (term -> term DIVIDE factor .)
    IF              reduce using rule 17 (term -> term DIVIDE factor .)
    WHILE           reduce using rule 17 (term -> term DIVIDE factor .)
    PRINTF          reduce using rule 17 (term -> term DIVIDE factor .)
    NUMBER          reduce using rule 17 (term -> term DIVIDE factor .)
    LEFT_PAREN      reduce using rule 17 (term -> term DIVIDE factor .)
    RIGHT_BRACE     reduce using rule 17 (term -> term DIVIDE factor .)
    RIGHT_PAREN     reduce using rule 17 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 17 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 17 (term -> term DIVIDE factor .)


state 66

    (32) expr -> IF LEFT_PAREN expr . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> IF LEFT_PAREN expr . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 73
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 67

    (34) expr -> WHILE LEFT_PAREN expr . RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 74
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 68

    (35) expr -> PRINTF LEFT_PAREN expr . RIGHT_PAREN SEMICOLON
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr

    RIGHT_PAREN     shift and go to state 75
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 69

    (2) program -> ID EQUALS expr SEMICOLON . program
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (8) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (36) lambda -> .
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    ID              shift and go to state 10
    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    RIGHT_BRACE     reduce using rule 36 (lambda -> .)
    NUMBER          shift and go to state 25
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 13
    program                        shift and go to state 76
    function_call                  shift and go to state 14
    lambda                         shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 70

    (3) program -> ID EQUALS function_call SEMICOLON . program
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (8) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (36) lambda -> .
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    ID              shift and go to state 10
    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    RIGHT_BRACE     reduce using rule 36 (lambda -> .)
    NUMBER          shift and go to state 25
    LEFT_PAREN      shift and go to state 11

    function_call                  shift and go to state 14
    program                        shift and go to state 77
    expr                           shift and go to state 13
    lambda                         shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 71

    (8) function_call -> ID LEFT_PAREN args RIGHT_PAREN .

    SEMICOLON       reduce using rule 8 (function_call -> ID LEFT_PAREN args RIGHT_PAREN .)


state 72

    (12) args -> args COMMA . expr
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    NUMBER          shift and go to state 25
    ID              shift and go to state 29
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 78
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 73

    (32) expr -> IF LEFT_PAREN expr RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE
    (33) expr -> IF LEFT_PAREN expr RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE

    LEFT_BRACE      shift and go to state 79


state 74

    (34) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN . LEFT_BRACE program RIGHT_BRACE

    LEFT_BRACE      shift and go to state 80


state 75

    (35) expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 81


state 76

    (2) program -> ID EQUALS expr SEMICOLON program .

    RIGHT_BRACE     reduce using rule 2 (program -> ID EQUALS expr SEMICOLON program .)


state 77

    (3) program -> ID EQUALS function_call SEMICOLON program .

    RIGHT_BRACE     reduce using rule 3 (program -> ID EQUALS function_call SEMICOLON program .)


state 78

    (12) args -> args COMMA expr .
    (19) expr -> expr . PLUS term
    (20) expr -> expr . MINUS term
    (21) expr -> expr . EQUALS_EQUALS expr
    (22) expr -> expr . LESS_THAN expr
    (23) expr -> expr . LESS_THAN_EQUAL expr
    (24) expr -> expr . GREATER_THAN expr
    (25) expr -> expr . GREATER_THAN_EQUAL expr
    (26) expr -> expr . AND expr
    (27) expr -> expr . OR expr

    RIGHT_PAREN     reduce using rule 12 (args -> args COMMA expr .)
    COMMA           reduce using rule 12 (args -> args COMMA expr .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    EQUALS_EQUALS   shift and go to state 34
    LESS_THAN       shift and go to state 35
    LESS_THAN_EQUAL shift and go to state 36
    GREATER_THAN    shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    AND             shift and go to state 39
    OR              shift and go to state 40


state 79

    (32) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE
    (33) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (8) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (36) lambda -> .
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    ID              shift and go to state 10
    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    RIGHT_BRACE     reduce using rule 36 (lambda -> .)
    NUMBER          shift and go to state 25
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 13
    program                        shift and go to state 82
    function_call                  shift and go to state 14
    lambda                         shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 80

    (34) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE . program RIGHT_BRACE
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (8) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (36) lambda -> .
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    ID              shift and go to state 10
    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    RIGHT_BRACE     reduce using rule 36 (lambda -> .)
    NUMBER          shift and go to state 25
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 13
    program                        shift and go to state 83
    function_call                  shift and go to state 14
    lambda                         shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 81

    (35) expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .

    PLUS            reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    MINUS           reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    EQUALS_EQUALS   reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    LESS_THAN       reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    LESS_THAN_EQUAL reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    GREATER_THAN    reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    GREATER_THAN_EQUAL reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    AND             reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    OR              reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    ID              reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    NOT             reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    STRING          reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    TRUE            reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    FALSE           reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    PRINTF          reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    NUMBER          reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    LEFT_PAREN      reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    RIGHT_PAREN     reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)
    COMMA           reduce using rule 35 (expr -> PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON .)


state 82

    (32) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE
    (33) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 84


state 83

    (34) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 85


state 84

    (32) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .
    (33) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE . ELSE LEFT_BRACE program RIGHT_BRACE

    PLUS            reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    MINUS           reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    EQUALS_EQUALS   reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN       reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN_EQUAL reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN    reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    AND             reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    OR              reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    ID              reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    NOT             reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    STRING          reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    TRUE            reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    FALSE           reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    IF              reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    WHILE           reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    PRINTF          reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    NUMBER          reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    SEMICOLON       reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    COMMA           reduce using rule 32 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    ELSE            shift and go to state 86


state 85

    (34) expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .

    PLUS            reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    MINUS           reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    EQUALS_EQUALS   reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN       reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN_EQUAL reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN    reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    AND             reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    OR              reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    ID              reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    NOT             reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    STRING          reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    TRUE            reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    FALSE           reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    IF              reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    WHILE           reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    PRINTF          reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    NUMBER          reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    SEMICOLON       reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)
    COMMA           reduce using rule 34 (expr -> WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE .)


state 86

    (33) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE . LEFT_BRACE program RIGHT_BRACE

    LEFT_BRACE      shift and go to state 87


state 87

    (33) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE . program RIGHT_BRACE
    (2) program -> . ID EQUALS expr SEMICOLON program
    (3) program -> . ID EQUALS function_call SEMICOLON program
    (4) program -> . function_call SEMICOLON program
    (5) program -> . expr program
    (6) program -> . lambda
    (8) function_call -> . ID LEFT_PAREN args RIGHT_PAREN
    (7) expr -> . term
    (19) expr -> . expr PLUS term
    (20) expr -> . expr MINUS term
    (21) expr -> . expr EQUALS_EQUALS expr
    (22) expr -> . expr LESS_THAN expr
    (23) expr -> . expr LESS_THAN_EQUAL expr
    (24) expr -> . expr GREATER_THAN expr
    (25) expr -> . expr GREATER_THAN_EQUAL expr
    (26) expr -> . expr AND expr
    (27) expr -> . expr OR expr
    (28) expr -> . NOT expr
    (29) expr -> . STRING
    (30) expr -> . TRUE
    (31) expr -> . FALSE
    (32) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (33) expr -> . IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE
    (34) expr -> . WHILE LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE
    (35) expr -> . PRINTF LEFT_PAREN expr RIGHT_PAREN SEMICOLON
    (36) lambda -> .
    (16) term -> . term TIMES factor
    (17) term -> . term DIVIDE factor
    (18) term -> . factor
    (13) factor -> . NUMBER
    (14) factor -> . ID
    (15) factor -> . LEFT_PAREN expr RIGHT_PAREN

    ID              shift and go to state 10
    NOT             shift and go to state 17
    STRING          shift and go to state 18
    TRUE            shift and go to state 19
    FALSE           shift and go to state 20
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    PRINTF          shift and go to state 23
    RIGHT_BRACE     reduce using rule 36 (lambda -> .)
    NUMBER          shift and go to state 25
    LEFT_PAREN      shift and go to state 11

    expr                           shift and go to state 13
    program                        shift and go to state 88
    function_call                  shift and go to state 14
    lambda                         shift and go to state 15
    term                           shift and go to state 16
    factor                         shift and go to state 24

state 88

    (33) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 89


state 89

    (33) expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .

    PLUS            reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    MINUS           reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    EQUALS_EQUALS   reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN       reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    LESS_THAN_EQUAL reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN    reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    GREATER_THAN_EQUAL reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    AND             reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    OR              reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    ID              reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    NOT             reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    STRING          reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    TRUE            reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    FALSE           reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    IF              reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    WHILE           reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    PRINTF          reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    NUMBER          reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    LEFT_PAREN      reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    RIGHT_PAREN     reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    SEMICOLON       reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)
    COMMA           reduce using rule 33 (expr -> IF LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE program RIGHT_BRACE ELSE LEFT_BRACE program RIGHT_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFT_PAREN in state 10 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 44 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 44 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 44 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 44 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 44 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 44 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 44 resolved as shift
WARNING: shift/reduce conflict for AND in state 44 resolved as shift
WARNING: shift/reduce conflict for OR in state 44 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 56 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 56 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 56 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 56 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 56 resolved as shift
WARNING: shift/reduce conflict for AND in state 56 resolved as shift
WARNING: shift/reduce conflict for OR in state 56 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 57 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 57 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 57 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 57 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 57 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 57 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 57 resolved as shift
WARNING: shift/reduce conflict for AND in state 57 resolved as shift
WARNING: shift/reduce conflict for OR in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 58 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 58 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 58 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 58 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 58 resolved as shift
WARNING: shift/reduce conflict for AND in state 58 resolved as shift
WARNING: shift/reduce conflict for OR in state 58 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 59 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 59 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for AND in state 59 resolved as shift
WARNING: shift/reduce conflict for OR in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 60 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 60 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 60 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 60 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 60 resolved as shift
WARNING: shift/reduce conflict for AND in state 60 resolved as shift
WARNING: shift/reduce conflict for OR in state 60 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 61 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 61 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 61 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 61 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 61 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 61 resolved as shift
WARNING: shift/reduce conflict for AND in state 61 resolved as shift
WARNING: shift/reduce conflict for OR in state 61 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 62 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 62 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 62 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN_EQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 62 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN_EQUAL in state 62 resolved as shift
WARNING: shift/reduce conflict for AND in state 62 resolved as shift
WARNING: shift/reduce conflict for OR in state 62 resolved as shift
